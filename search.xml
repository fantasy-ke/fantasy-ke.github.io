<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试场景问题</title>
      <link href="/posts/30618.html"/>
      <url>/posts/30618.html</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ宕机了怎么办，你会如何处理？"><a href="#RabbitMQ宕机了怎么办，你会如何处理？" class="headerlink" title="RabbitMQ宕机了怎么办，你会如何处理？"></a>RabbitMQ宕机了怎么办，你会如何处理？</h1><p>当面临 RabbitMQ 宕机时，我采用分阶段流程处理，目标是<strong>快速恢复服务、减少业务影响、找出根因并防止复发</strong>。</p><p>处理流程分四个阶段：</p><h3 id="第一阶段：应急响应与影响评估"><a href="#第一阶段：应急响应与影响评估" class="headerlink" title="第一阶段：应急响应与影响评估"></a>第一阶段：应急响应与影响评估</h3><p>控制事态并通知相关人员。</p><ol><li><strong>立即沟通:</strong><ul><li><strong>内部通报：</strong> 在技术应急渠道通报问题，告知相关团队”RabbitMQ异常，正在排查”，避免信息风暴。</li><li><strong>影响范围：</strong> 评估受影响系统，确定优先级。</li></ul></li><li><strong>“止血”处理:</strong><ul><li>与开发协商<strong>暂停关键业务消息生产者</strong>，防止上游服务报错、数据丢失或请求堆积。</li></ul></li></ol><hr><h3 id="第二阶段：故障诊断与问题定位"><a href="#第二阶段：故障诊断与问题定位" class="headerlink" title="第二阶段：故障诊断与问题定位"></a>第二阶段：故障诊断与问题定位</h3><p>系统排查线索，从简单原因开始：</p><ol><li><strong>基础服务检查：</strong><ul><li>执行 <code>systemctl status rabbitmq-server</code> 查看服务状态。</li><li><strong>检查：</strong><ul><li>服务状态是否 <code>active</code>？</li><li>是否 <code>failed</code>？</li><li>是否反复重启？</li></ul></li></ul></li><li><strong>日志分析:</strong><ul><li>查看 <code>/var/log/rabbitmq/</code> 日志。</li><li><strong>关注：</strong><ul><li><code>ERROR</code>, <code>CRASH</code>, <code>CRITICAL</code> 关键字。</li><li>宕机前日志中的异常堆栈和告警。</li></ul></li></ul></li><li><strong>资源检查：</strong><ul><li>资源耗尽是常见原因。</li><li><strong>磁盘：</strong> <code>df -h</code>。磁盘满会触发告警并阻塞生产者。</li><li><strong>内存：</strong> <code>free -m</code>。内存高水位线会阻塞生产者，OOM会杀死进程。</li><li><strong>文件描述符：</strong> <code>ulimit -n</code>和<code>rabbitmqctl status</code>检查连接数。</li></ul></li><li><strong>集群状态检查:</strong><ul><li>执行 <code>rabbitmqctl cluster_status</code>。</li><li><strong>关注：</strong><ul><li><strong>网络分区:</strong> 检查脑裂问题。</li><li><strong>Mnesia数据库：</strong> 检查各节点数据库状态。</li></ul></li></ul></li><li><strong>网络与配置：</strong><ul><li><strong>端口：</strong> 检查5672和15672端口连通性。</li><li><strong>配置：</strong> 检查近期配置变更。</li></ul></li></ol><hr><h3 id="第三阶段：服务恢复与验证"><a href="#第三阶段：服务恢复与验证" class="headerlink" title="第三阶段：服务恢复与验证"></a>第三阶段：服务恢复与验证</h3><p>根据诊断采取恢复措施：</p><ul><li><strong>资源问题：</strong><ul><li><strong>磁盘满：</strong> 清理文件或扩容后重启。</li><li><strong>内存不足：</strong> 增加内存或调整水位线配置后重启。</li></ul></li><li><strong>进程崩溃：</strong><ul><li>重启服务并观察日志。</li></ul></li><li><strong>网络分区：</strong><ul><li>选择权威分区，重启其他节点重新加入集群。<strong>此操作需谨慎</strong>。</li></ul></li><li><strong>严重问题：</strong><ul><li><strong>故障转移：</strong> 切换到备用集群快速恢复业务。</li><li><strong>备份恢复：</strong> 从备份恢复元数据。</li></ul></li></ul><p>恢复后验证：</p><p>通知开发团队，逐步恢复生产者，监控队列、连接和消息指标。</p><hr><h3 id="第四阶段：复盘与长期改进"><a href="#第四阶段：复盘与长期改进" class="headerlink" title="第四阶段：复盘与长期改进"></a>第四阶段：复盘与长期改进</h3><p>问题解决后进行复盘：</p><ol><li><strong>根本原因分析:</strong><ul><li>组织复盘会议分析宕机原因。</li></ul></li><li><strong>改进计划：</strong><ul><li><strong>高可用建设：</strong><ul><li><strong>集群化：</strong> 单点升级为集群。</li><li><strong>队列镜像：</strong> 为核心队列设置高可用策略。</li></ul></li><li><strong>监控告警：</strong><ul><li>设置精细化告警阈值，做到提前预警。</li></ul></li><li><strong>备份预案：</strong><ul><li>定期备份元数据。</li><li>定期<strong>灾难恢复演练</strong>。</li></ul></li><li><strong>应用韧性：</strong><ul><li>实现<strong>发布者确认机制、幂等性处理</strong>和<strong>死信队列</strong>。</li></ul></li></ul></li></ol><p>通过此流程，确保面对RabbitMQ宕机时能专业高效地解决问题，提升系统稳定性。</p><h1 id="一千个并发下订单，然后每个订单都通知不同的用户（修改用户的已处理字段），怎么做？"><a href="#一千个并发下订单，然后每个订单都通知不同的用户（修改用户的已处理字段），怎么做？" class="headerlink" title="一千个并发下订单，然后每个订单都通知不同的用户（修改用户的已处理字段），怎么做？"></a>一千个并发下订单，然后每个订单都通知不同的用户（修改用户的已处理字段），怎么做？</h1><p>这是一个典型的高并发场景。直接在数据库处理1000个并发写请求，特别是同时创建订单和修改用户状态的事务，容易导致死锁、连接池耗尽和请求超时，最终系统崩溃。</p><p>因此，核心思想是<strong>异步解耦、削峰填谷</strong>。</p><p>采用**”消息队列 (Message Queue)”**架构解决问题。方案如下：</p><hr><h3 id="核心架构设计"><a href="#核心架构设计" class="headerlink" title="核心架构设计"></a>核心架构设计</h3><p>将流程分为三部分：</p><ol><li><strong>API接口层:</strong> 接收下单请求，只”收下”不”处理”。</li><li><strong>消息队列:</strong> 作为缓冲区，暂存下单任务。</li><li><strong>后端工作者:</strong> 执行业务逻辑，处理队列任务。</li></ol><p>流程图：</p><p><code>[1000个并发客户端] ---&gt; [1. API接口层] ---&gt; [2. 消息队列 (MQ)] ---&gt; [3. 后端工作者] ---&gt; [数据库]</code></p><hr><h3 id="第一步：API接口层改造"><a href="#第一步：API接口层改造" class="headerlink" title="第一步：API接口层改造"></a>第一步：API接口层改造</h3><p>面向用户请求入口，须<strong>快速响应</strong>。</p><ol><li><strong>职责分离：</strong><ul><li>接口职责：<strong>接收请求、验证参数、生成订单ID，将信息发送到消息队列</strong>。</li><li><strong>禁止</strong>直接执行<code>INSERT</code>和<code>UPDATE</code>操作。</li></ul></li><li><strong>快速响应：</strong><ul><li>消息发送成功后<strong>立即</strong>返回响应，如<code>HTTP 202 Accepted</code>。</li><li>告知客户端请求已收到并排队处理，使API轻松应对高并发。</li></ul></li><li><strong>接口示例 (<strong><strong><code>C#</code></strong></strong>):</strong></li></ol><p>&#96;[ApiController]<br>[Route(“api&#x2F;[controller]”)]<br>public class OrdersController : ControllerBase<br>{<br>    private readonly IMessageQueueProducer _mqProducer;</p><pre><code>public OrdersController(IMessageQueueProducer mqProducer)&#123;    _mqProducer = mqProducer;&#125;[HttpPost]public async Task&amp;lt;IActionResult&amp;gt; CreateOrder([FromBody] CreateOrderDto orderDto)&#123;    // 1. 基本参数验证    if (!ModelState.IsValid)    &#123;        return BadRequest(ModelState);    &#125;    // 2. 创建一个唯一的订单消息    var orderMessage = new OrderProcessingMessage    &#123;        // 使用分布式ID生成器或数据库序列等保证唯一性        OrderId = Guid.NewGuid().ToString(&quot;N&quot;),         UserIdToNotify = orderDto.UserIdToNotify,        ProductInfo = orderDto.ProductInfo,        Timestamp = DateTime.UtcNow    &#125;;    // 3. 将消息发送到消息队列    // 这个操作应该非常快    await _mqProducer.PublishAsync(&quot;order_processing_queue&quot;, orderMessage);    // 4. 立即返回，告知客户端请求已被接受    return Accepted(new &#123; OrderId = orderMessage.OrderId, Status = &quot;Processing&quot; &#125;);&#125;</code></pre><p>}&#96;</p><hr><h3 id="第二步：消息队列配置"><a href="#第二步：消息队列配置" class="headerlink" title="第二步：消息队列配置"></a>第二步：消息队列配置</h3><p>消息队列是核心，将前端流量平滑交由后端处理。</p><ol><li><strong>技术选型：</strong><ul><li>可选<strong>RabbitMQ</strong>, <strong>RocketMQ</strong>, <strong>Kafka</strong>或云服务如<strong>AWS SQS</strong>&#x2F;<strong>Azure Service Bus</strong>。RabbitMQ易用且适合此场景。</li></ul></li><li><strong>关键配置:</strong><ul><li><strong>持久化:</strong> 队列和消息都设为持久化，确保服务重启不丢失任务。</li><li><strong>生产者确认:</strong> 确保消息成功到达MQ，防止传输丢失。</li></ul></li></ol><hr><h3 id="第三步：后端工作者实现"><a href="#第三步：后端工作者实现" class="headerlink" title="第三步：后端工作者实现"></a>第三步：后端工作者实现</h3><p>后台持续运行的服务，真正执行业务逻辑。</p><ol><li><strong>订阅队列：</strong><ul><li>连接并订阅处理订单队列。</li></ul></li><li><strong>处理逻辑:</strong><ul><li>处理每条消息时，在<strong>一个事务</strong>中完成数据库操作。</li></ul></li></ol><p>&#96;BEGIN TRANSACTION;</p><p>– 1. 插入新的订单记录<br>INSERT INTO Orders (Id, ProductInfo, CreateTime) VALUES (…);</p><p>– 2. 修改对应用户的状态字段<br>UPDATE Users SET HasBeenProcessed &#x3D; 1 WHERE UserId &#x3D; @UserIdToNotify;</p><p>COMMIT TRANSACTION;&#96;</p><ol><li><strong>幂等性保证:</strong><ul><li>处理重复消息不产生副作用。</li><li><strong>实现:</strong> 用唯一<code>OrderId</code>，操作前检查是否已存在，避免重复处理。</li></ul></li><li><strong>错误处理:</strong><ul><li>处理失败的消息不应阻塞队列。</li><li>将失败消息发送到**”死信队列”**，便于后续处理。</li></ul></li><li><strong>水平扩展:</strong><ul><li>增加工作者实例数量，提升处理能力。</li></ul></li></ol><h3 id="总结与优势"><a href="#总结与优势" class="headerlink" title="总结与优势"></a>总结与优势</h3><p><strong>API网关+消息队列+后端工作者</strong>模式优势：</p><ul><li><strong>高可用性:</strong> 前后端解耦，任一方故障不影响另一方。</li><li><strong>高性能:</strong> API层轻量化，应对海量并发。</li><li><strong>削峰填谷:</strong> MQ缓冲请求，后端平稳处理，不被流量洪峰冲垮。</li><li><strong>可扩展性:</strong> 可独立动态扩展各组件实例数量。</li><li><strong>可靠性:</strong> 通过多种机制确保订单准确处理，不丢失数据。</li></ul><hr><h1 id="有几千万数据，存入redis。存入什么结构读写更快"><a href="#有几千万数据，存入redis。存入什么结构读写更快" class="headerlink" title="有几千万数据，存入redis。存入什么结构读写更快"></a>有几千万数据，存入redis。存入什么结构读写更快</h1><p>Redis 中存储千万级数据的关键决策。</p><p>对于千万级数据追求最快读写速度，<strong>首选</strong> <strong><code>Hash</code></strong> <strong>(哈希) 数据结构。</strong></p><p>下面比较 <code>Hash</code> 与 <code>String (JSON)</code> 两种方案。</p><hr><h3 id="Hash-vs-String-对比"><a href="#Hash-vs-String-对比" class="headerlink" title="Hash vs. String 对比"></a>Hash vs. String 对比</h3><p>用户信息示例：</p><p>{ “id”: 1001, “name”: “张三”, “age”: 30, “city”: “北京” }</p><h3 id="方案一：String-JSON"><a href="#方案一：String-JSON" class="headerlink" title="方案一：String (JSON)"></a>方案一：String (JSON)</h3><p>将对象序列化为JSON字符串存入单个Key。</p><ul><li>存储结构:SET user:1001 “{&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:30,&quot;city&quot;:&quot;北京&quot;}”</li><li><strong>评价:</strong><ul><li><strong>优点:</strong> 模型简单，<code>SET</code>&#x2F;<code>GET</code>操作直接。</li><li><strong>致命缺点:</strong><ol><li><strong>无法部分更新:</strong> 修改单一字段需要读取、反序列化、修改、序列化、写入的完整流程。</li><li><strong>带宽浪费:</strong> 小改动需传输整个JSON。</li><li><strong>内存占用高:</strong> JSON元数据在千万级数据下造成巨大内存开销。</li></ol></li></ul></li></ul><h3 id="方案二：Hash-推荐"><a href="#方案二：Hash-推荐" class="headerlink" title="方案二：Hash (推荐)"></a>方案二：Hash (推荐)</h3><p>用Key表示对象，每个字段作为Hash的<code>field</code>和<code>value</code>。</p><ul><li>存储结构:HSET user:1001 name “张三” age 30 city “北京”</li><li><strong>评价:</strong><ul><li><strong>优势:</strong><ol><li><strong>部分更新高效:</strong> 一条命令修改单字段：<code>HSET user:1001 age 31</code>。</li><li><strong>读取灵活:</strong> <code>HGETALL</code>全量读取，<code>HMGET</code>&#x2F;<code>HGET</code>部分读取。</li><li><strong>内存效率高:</strong> 内部使用<code>listpack</code>压缩，比JSON节省**30%-60%**内存。</li></ol></li></ul></li></ul><hr><h3 id="对比总结"><a href="#对比总结" class="headerlink" title="对比总结"></a>对比总结</h3><table><thead><tr><th>特性</th><th>String (JSON)</th><th>Hash (推荐)</th><th>结论</th></tr></thead><tbody><tr><td><strong>数据模型</strong></td><td><code>Key -&amp;gt; &quot;JSON字符串&quot;</code></td><td><code>Key -&amp;gt; &#123;Field: Value&#125;</code></td><td>Hash更直观</td></tr><tr><td><strong>写入(全量)</strong></td><td>一次<code>SET</code></td><td>一次<code>HSET</code></td><td>性能相当</td></tr><tr><td><strong>读取(全量)</strong></td><td>一次<code>GET</code></td><td>一次<code>HGETALL</code></td><td>性能相当</td></tr><tr><td><strong>部分更新</strong></td><td><strong>极差</strong></td><td><strong>极好</strong></td><td><strong>Hash完胜</strong></td></tr><tr><td><strong>部分读取</strong></td><td><strong>差</strong></td><td><strong>极好</strong></td><td><strong>Hash完胜</strong></td></tr><tr><td><strong>内存效率</strong></td><td><strong>低</strong></td><td><strong>高</strong></td><td><strong>Hash完胜</strong></td></tr></tbody></table><hr><h3 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h3><p>选择<code>Hash</code>后的进一步优化：</p><ol><li>Pipeline批量操作批量操作用Pipeline打包命令，将网络往返从N次减至1次。</li><li>规范Key命名使用统一命名规范：业务对象:唯一ID<ul><li><code>user:1001</code></li><li><code>order:202507101533</code></li></ul></li><li>多字段HSET使用支持多字段的HSET命令替代旧的HMSET。HSET user:1002 name “李四” age 25 city “上海”</li><li>优化内存编码通过<code>OBJECT ENCODING</code>检查Hash编码，适当调整配置优化内存使用。</li></ol><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>千万级结构化数据，<strong>选择</strong>**<code>Hash</code>**<strong>数据结构</strong>。在部分更新性能、内存效率和灵活性上全面优于String存储JSON方案。</p><h1 id="设计一个50000并发的高可用实时通讯的聊天室，你应该怎么做，使用哪些技术，为什么采用这些技术"><a href="#设计一个50000并发的高可用实时通讯的聊天室，你应该怎么做，使用哪些技术，为什么采用这些技术" class="headerlink" title="设计一个50000并发的高可用实时通讯的聊天室，你应该怎么做，使用哪些技术，为什么采用这些技术"></a>设计一个50000并发的高可用实时通讯的聊天室，你应该怎么做，使用哪些技术，为什么采用这些技术</h1><p>设计支持5万并发、高可用、实时聊天室是典型的后端架构挑战。.NET提供成熟高性能工具栈可实现这一目标。</p><p>设计核心原则：</p><ul><li><strong>水平扩展:</strong> 通过增加服务器数量线性提升承载能力，不依赖单机性能。</li><li><strong>无单点故障:</strong> 所有组件均有冗余和故障转移机制。</li><li><strong>异步解耦:</strong> 核心模块通过消息队列或事件总线通信，提升系统弹性。</li><li><strong>职责分离:</strong> 系统分为不同服务层，各层专注核心任务。</li></ul><p>以下是架构设计和技术选型。</p><hr><h3 id="一、整体架构图"><a href="#一、整体架构图" class="headerlink" title="一、整体架构图"></a>一、整体架构图</h3><p>分层架构设计，确保各层独立扩展和容错。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------------+</span><br><span class="line">                    |        用户客户端         |</span><br><span class="line">                    | (Web/App/Desktop)           |</span><br><span class="line">                    +-------------+---------------+</span><br><span class="line">                                  |</span><br><span class="line">                                  | (WebSocket/SignalR 连接)</span><br><span class="line">                                  |</span><br><span class="line">                    +-------------v---------------+</span><br><span class="line">                    |     负载均衡器 (Nginx/ALB)    |</span><br><span class="line">                    | (SSL终止, 流量分发)         |</span><br><span class="line">                    +-------------+---------------+</span><br><span class="line">                                  |</span><br><span class="line">           +----------------------+----------------------+</span><br><span class="line">           |                      |                      |</span><br><span class="line">+----------v----------+ +----------v----------+ +----------v----------+</span><br><span class="line">|  接入网关服务器 1   | |  接入网关服务器 2   | |  接入网关服务器 n   |</span><br><span class="line">| (ASP.NET Core SignalR)| (ASP.NET Core SignalR)| (ASP.NET Core SignalR)|</span><br><span class="line">+----------+----------+ +----------+----------+ +----------+----------+</span><br><span class="line">           |                      |                      |</span><br><span class="line">           +----------------------+----------------------+</span><br><span class="line">                                  | (Redis Pub/Sub Backplane)</span><br><span class="line">                    +-------------v---------------+</span><br><span class="line">                    |     Redis 集群 (高速缓存)     |</span><br><span class="line">                    | (状态同步/消息总线/在线状态) |</span><br><span class="line">                    +-------------+---------------+</span><br><span class="line">                                  |</span><br><span class="line">                                  | (HTTP/gRPC 调用, 消息队列)</span><br><span class="line">                                  |</span><br><span class="line">+---------------------------------v----------------------------------+</span><br><span class="line">|                        后端业务服务层 (Microservices)                  |</span><br><span class="line">|                                                                    |</span><br><span class="line">| +-----------------+  +-----------------+  +-----------------------+ |</span><br><span class="line">| |   用户与认证服务  |  |   消息与历史记录服务 |  |     房间管理服务      | |</span><br><span class="line">| +-----------------+  +-----------------+  +-----------------------+ |</span><br><span class="line">+---------------------------------v----------------------------------+</span><br><span class="line">                                  |</span><br><span class="line">           +----------------------+----------------------+</span><br><span class="line">           |                      |                      |</span><br><span class="line">+----------v----------+ +----------v----------+ +----------v----------+</span><br><span class="line">|   关系型数据库集群    | |    NoSQL 数据库集群   | |     对象存储 (可选)   |</span><br><span class="line">| (PostgreSQL/SQL Srv)| |  (Cassandra/CosmosDB) | | (MinIO/Azure Blob)  |</span><br><span class="line">|  (用户/房间元数据)   | |     (聊天记录)      | |      (图片/文件)      |</span><br><span class="line">+---------------------+ +---------------------+ +---------------------+</span><br></pre></td></tr></table></figure><hr><h3 id="二、技术选型与原因"><a href="#二、技术选型与原因" class="headerlink" title="二、技术选型与原因"></a>二、技术选型与原因</h3><h3 id="1-实时通讯核心：ASP-NET-Core-SignalR"><a href="#1-实时通讯核心：ASP-NET-Core-SignalR" class="headerlink" title="1. 实时通讯核心：ASP.NET Core SignalR"></a>1. 实时通讯核心：<a href="http://asp.net/">ASP.NET</a> Core SignalR</h3><ul><li><strong>是什么：</strong> .NET开源实时应用框架，封装WebSockets等技术。</li><li><strong>为什么采用：</strong><ul><li><strong>高性能与高并发：</strong> 基于Kestrel服务器，专为大量并发连接设计。</li><li><strong>协议抽象：</strong> 智能选择最佳通信方式，提供统一编程模型。</li><li><strong>水平扩展支持：</strong> 通过”后端总线”机制组建服务器集群，实现高并发。</li><li><strong>生态系统集成：</strong> 与.NET框架无缝集成。</li></ul></li></ul><h3 id="2-消息分发总线与状态存储：Redis集群"><a href="#2-消息分发总线与状态存储：Redis集群" class="headerlink" title="2. 消息分发总线与状态存储：Redis集群"></a>2. 消息分发总线与状态存储：Redis集群</h3><ul><li><strong>是什么：</strong> 内存高性能键值数据库。</li><li><strong>为什么采用：</strong> 在架构中扮演三个角色：<ol><li><strong>SignalR后端总线:</strong><ul><li>消息通过Redis Pub&#x2F;Sub在网关服务器间传递。<code>Microsoft.AspNetCore.SignalR.StackExchangeRedis</code>简化集成。</li><li><strong>原因：</strong> 微秒级延迟，满足实时消息需求。</li></ul></li><li><strong>在线状态管理:</strong><ul><li>使用Redis数据结构跟踪用户连接状态。</li><li><strong>原因：</strong> 高速读写，应对频繁状态更新。</li></ul></li><li><strong>高速缓存:</strong><ul><li>缓存热点数据，减轻数据库压力。</li></ul></li></ol></li></ul><h3 id="3-业务逻辑层：ASP-NET-Core-Web-API-gRPC微服务"><a href="#3-业务逻辑层：ASP-NET-Core-Web-API-gRPC微服务" class="headerlink" title="3. 业务逻辑层：ASP.NET Core Web API&#x2F;gRPC微服务"></a>3. 业务逻辑层：<a href="http://asp.net/">ASP.NET</a> Core Web API&#x2F;gRPC微服务</h3><ul><li><strong>是什么：</strong> 处理特定业务逻辑的独立服务。</li><li><strong>为什么采用：</strong><ul><li><strong>职责分离：</strong> 分离连接管理与业务逻辑，保持网关轻量高效。</li><li><strong>技术选型灵活：</strong> 服务间可通过gRPC或RESTful API通信。</li></ul></li></ul><h3 id="4-数据持久化层：混合数据库方案"><a href="#4-数据持久化层：混合数据库方案" class="headerlink" title="4. 数据持久化层：混合数据库方案"></a>4. 数据持久化层：混合数据库方案</h3><ul><li><strong>关系型数据库集群:</strong><ul><li><strong>存储内容：</strong> 用户账户、房间元数据等结构化数据。</li><li><strong>为什么采用：</strong> 保证ACID特性，通过主从复制等确保高可用。</li></ul></li><li><strong>NoSQL数据库集群:</strong><ul><li><strong>存储内容：</strong> 海量聊天记录。</li><li><strong>为什么采用：</strong><ul><li><strong>高写入吞吐量：</strong> 处理”写多读少”场景，支持每秒数十万写入。</li><li><strong>水平扩展能力：</strong> 通过增加节点线性扩展容量和性能。</li><li><strong>分区容错：</strong> 分布式设计确保高可用性。</li></ul></li></ul></li></ul><hr><h3 id="三、关键流程解析：一条消息的生命周期"><a href="#三、关键流程解析：一条消息的生命周期" class="headerlink" title="三、关键流程解析：一条消息的生命周期"></a>三、关键流程解析：一条消息的生命周期</h3><ol><li><strong>连接建立：</strong> 客户端通过负载均衡器与网关建立WebSocket连接，连接信息存入Redis。</li><li><strong>发送消息：</strong> 用户A发送消息。</li><li><strong>消息广播：</strong> 网关发布消息到Redis Pub&#x2F;Sub频道。</li><li><strong>接收与分发：</strong> 所有网关从Redis接收消息。</li><li><strong>推送至客户端：</strong> 网关将消息推送给相关房间的客户端。</li><li><strong>消息持久化：</strong> 异步任务发送至后端消息服务。</li><li><strong>写入数据库：</strong> 消息服务将聊天记录写入NoSQL数据库。</li></ol><p>此架构可支持5万以上并发用户，具备高可用性和低延迟特性。</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notion + Hexo + GitHub Actions + Vercel 博客解决方案</title>
      <link href="/posts/a65df701.html"/>
      <url>/posts/a65df701.html</url>
      
        <content type="html"><![CDATA[<h1 id="博客工具"><a href="#博客工具" class="headerlink" title="博客工具"></a>博客工具</h1><ul><li>写作平台：Notion</li><li>博客平台：<a href="https://hexo.io/">Hexo</a></li><li>博客主题：<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly@4.10.0</a></li><li>博客文档同步：<a href="https://github.com/LetTTGACO/elog">Elog</a></li><li>部署平台：Vercel</li><li>博客仓库：<a href="https://github.com/LetTTGACO/notion-hexo">https://github.com/LetTTGACO/notion-hexo</a></li></ul><h1 id="博客搭建指南"><a href="#博客搭建指南" class="headerlink" title="博客搭建指南"></a>博客搭建指南</h1><h2 id="Fork模板仓库"><a href="#Fork模板仓库" class="headerlink" title="Fork模板仓库"></a>Fork模板仓库</h2><p><a href="https://github.com/elog-x/notion-hexo/fork">点击 Fork</a> 该模板仓库到个人 Github 账号仓库下并 clone 到本地</p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>在项目根目录下运行命令安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="新建-Elog-本地调试文件"><a href="#新建-Elog-本地调试文件" class="headerlink" title="新建 Elog 本地调试文件"></a>新建 Elog 本地调试文件</h2><p>在项目根目录中复制<code>.elog.example.env</code>文件并改名为<code>.elog.env</code>，此文件将用于本地同步Notion 文档</p><h2 id="配置-Notion-关键信息"><a href="#配置-Notion-关键信息" class="headerlink" title="配置 Notion 关键信息"></a>配置 Notion 关键信息</h2><p>按照<a href="https://elog.1874.cool/notion/gvnxobqogetukays#notion">文档提示</a>配置 Notion 并获取 <code>token</code> 和 <code>databaseId</code>，在本地<code>.elog.env</code>中写入</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NOTION_TOKEN=获取的token</span><br><span class="line">NOTION_DATABASE_ID=获取的databaseId</span><br></pre></td></tr></table></figure><h2 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h2><p>在项目根目录运行同步命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run sync:local</span><br></pre></td></tr></table></figure><h2 id="启动-Hexo"><a href="#启动-Hexo" class="headerlink" title="启动 Hexo"></a>启动 Hexo</h2><p>在项目根目录运行hexo启动命令，会自动打开本地博客</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure><h2 id="配置-Hexo-博客"><a href="#配置-Hexo-博客" class="headerlink" title="配置 Hexo 博客"></a>配置 Hexo 博客</h2><p>根据 <a href="https://hexo.io/">Hexo</a> 文档和 <a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a> 主题配置文档，配置你的博客直到你满意为主，你也可以换别的主题，这里不做演示</p><h2 id="提交代码到-github"><a href="#提交代码到-github" class="headerlink" title="提交代码到 github"></a>提交代码到 github</h2><p>本地访问没问题直接提交所有文件到 Github 仓库即可</p><h2 id="部署到-Vercel"><a href="#部署到-Vercel" class="headerlink" title="部署到 Vercel"></a>部署到 Vercel</h2><p>注册 Vercel 账号并绑定 Github，在 Vercel 导入 该项目，Vercel 会自动识别出该 Hexo 项目，不需要改动，直接选择 Deploy 部署。部署完成会有一个 Vercel 临时域名，你也可以绑定自己的域名。</p><p><img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/e2e7f3dfa23b181d5e1004bb03113a7d.png" alt="Untitled.png"></p><p><img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/2923704cb8598259b0514125286c9896.png" alt="Untitled.png"></p><h2 id="配置-Github-Actions-权限"><a href="#配置-Github-Actions-权限" class="headerlink" title="配置 Github Actions 权限"></a>配置 Github Actions 权限</h2><p>在 Github 仓库的设置中找到 <code>Actions-General</code>，打开流水线写入权限<code>Workflow permissions</code></p><p><img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/f338ff4a47253f838f0e1f474f553d68.png" alt="Untitled.png"></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>在本地运行时，用的是<code>.elog.env</code>文件中定义的 Notion 账号信息，而在 Github Actions 时，需要提前配置环境变量。</p><p>在 Github 仓库的设置中找到 <code>Secrets  and variables</code>，新增仓库的环境变量<code>NOTION_DATABASE_ID</code>和<code>NOTION_TOKEN</code>和<code>.elog.env</code>保持一致即可</p><p><img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/1f2c947283c69c3e1f74cd443f79ea49.png" alt="Untitled.png"></p><h2 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h2><p>当在 Notion 中改动文档后，手动&#x2F;自动触发 Github Actions流水线，会重新从 Notion 增量拉取文档，自动提交代码到 Github 仓库。</p><p>Vercel 会实时监测仓库代码，当有新的提交时都会重新部署博客。如此就实现了自动化部署博客。</p><p>整个流程的关键点就在于：如何手动&#x2F;自动触发 Github Actions</p><p>在项目.<code>github/workflows/sync.yaml</code>中已经配置了外部 API 触发 Github Actions 事件，所以只需要调用 API 触发流水线即可。</p><h3 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a>手动触发</h3><p>为了方便，这里提供一个部署在 Vercel 的免费公用的<a href="https://github.com/elog-x/serverless-api"><strong>ServerlessAPI</strong></a>，只需要配置好 URL 参数并浏览器访问即可触发流水线</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://serverless-api-elog.vercel.app/api/github?user=xxx&amp;repo=xxx&amp;event_type=deploy&amp;token=xxx</span><br></pre></td></tr></table></figure><h3 id="自动触发"><a href="#自动触发" class="headerlink" title="自动触发"></a>自动触发</h3><p>可在 Notion 中结合 Slack 触发，<a href="https://elog.1874.cool/notion/vy55q9xwlqlsfrvk">参考教程</a>，这里就不做进一步演示了</p><h1 id="自定义-Elog-配置"><a href="#自定义-Elog-配置" class="headerlink" title="自定义 Elog 配置"></a>自定义 Elog 配置</h1><p>如果想自定义 Elog 配置，可访问 <a href="https://elog.1874.cool/">Elog 文档</a></p><h1 id="博客示例"><a href="#博客示例" class="headerlink" title="博客示例"></a>博客示例</h1><p>示例仓库：<a href="https://github.com/LetTTGACO/notion-hexo">https://github.com/LetTTGACO/notion-hexo</a></p><p>博客示例地址：<a href="https://notion-hexo.vercel.app/">https://notion-hexo.vercel.app</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客折腾手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notion-Hexo 的 Elog 配置详解</title>
      <link href="/posts/cfaae164.html"/>
      <url>/posts/cfaae164.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用 Elog 同步Notion 上的文档时，因为是将富文本向下转成 markdown，会有很多样式损失。这是由于 markdown 样式集合＜ Notion 样式集合。所以在 Notion 上书写时，得按照 markdown 支持的样式进行写作。</p><blockquote><p>可以在<a href="/notion-example/">这里</a> 看到 Notion 文档被导出为 markdown 时的样式损失程度</p></blockquote><p>如果你不能接受样式损失，可能 markdown 并不适合你，隔壁 <a href="https://github.com/tangly1024/NotionNext">NotionNext</a> 可能更适合你搭建博客。</p><h1 id="Notion-格式注意点"><a href="#Notion-格式注意点" class="headerlink" title="Notion 格式注意点"></a>Notion 格式注意点</h1><h3 id="不要使用-markdown-不支持的样式-语法"><a href="#不要使用-markdown-不支持的样式-语法" class="headerlink" title="不要使用 markdown 不支持的样式&#x2F;语法"></a>不要使用 markdown 不支持的样式&#x2F;语法</h3><p>例如字体颜色、多级折叠块、书签、数据库、嵌入等。导出为 markdown 都不能正常展示。</p><h3 id="适当使用-markdown-形式的超链接"><a href="#适当使用-markdown-形式的超链接" class="headerlink" title="适当使用 markdown 形式的超链接"></a>适当使用 markdown 形式的超链接</h3><p>在文档中使用markdown 形式的超链接可以解决部分路由问题，例如链接Notion文档的超链接会被自动处理为非完整路径，或者手动链接到某个相对路由，可以使用以下方式解决</p><figure class="highlight plaintext"><figcaption><span>text</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 使用[]() markdown 超链接语法</span><br><span class="line">点击 [下一篇](/notion/deploy-platform) 继续配置部署平台</span><br></pre></td></tr></table></figure><h3 id="请勿上传视频、文件到-Notion-文档"><a href="#请勿上传视频、文件到-Notion-文档" class="headerlink" title="请勿上传视频、文件到 Notion 文档"></a>请勿上传视频、文件到 Notion 文档</h3><p>Elog 还暂不支持将Notion 中的视频、文件暂不支持上传到图床。如果下载到本地，短期内能访问，但因为 notion 的链接具有时效性，一般是一个小时，之后就不能查看了。</p><h1 id="Elog-配置详解"><a href="#Elog-配置详解" class="headerlink" title="Elog 配置详解"></a>Elog 配置详解</h1><p>参考<a href="https://elog.1874.cool/">Elog 文档</a>，本博客的 Elog 的配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">write</span>: &#123;</span><br><span class="line">    <span class="attr">platform</span>: <span class="string">&#x27;notion&#x27;</span>,</span><br><span class="line">    <span class="attr">notion</span>: &#123;</span><br><span class="line">      <span class="attr">token</span>: process.<span class="property">env</span>.<span class="property">NOTION_TOKEN</span>,</span><br><span class="line">      <span class="attr">databaseId</span>: process.<span class="property">env</span>.<span class="property">NOTION_DATABASE_ID</span>,</span><br><span class="line">      <span class="attr">filter</span>: &#123; <span class="attr">property</span>: <span class="string">&#x27;status&#x27;</span>, <span class="attr">select</span>: &#123; <span class="attr">equals</span>: <span class="string">&#x27;已发布&#x27;</span> &#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">deploy</span>: &#123;</span><br><span class="line">    <span class="attr">platform</span>: <span class="string">&#x27;local&#x27;</span>,</span><br><span class="line">    <span class="attr">local</span>: &#123;</span><br><span class="line">      <span class="attr">outputDir</span>: <span class="string">&#x27;./source/_posts&#x27;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;markdown&#x27;</span>,</span><br><span class="line">      <span class="attr">frontMatter</span>: &#123;</span><br><span class="line">        <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">include</span>: [<span class="string">&#x27;categories&#x27;</span>, <span class="string">&#x27;tags&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;updated&#x27;</span>, <span class="string">&#x27;permalink&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>, <span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">formatExt</span>: <span class="string">&#x27;./format-image.js&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">image</span>: &#123;</span><br><span class="line">    <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">platform</span>: <span class="string">&#x27;local&#x27;</span>,</span><br><span class="line">    <span class="attr">local</span>: &#123;</span><br><span class="line">      <span class="attr">outputDir</span>: <span class="string">&#x27;./source/images&#x27;</span>,</span><br><span class="line">      <span class="attr">prefixKey</span>: <span class="string">&#x27;/images&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Notion-配置"><a href="#Notion-配置" class="headerlink" title="Notion 配置"></a>Notion 配置</h2><p><img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/178db0957627944838dc4d826b888fc5.png" alt="Untitled.png"></p><p>根据 <a href="https://hexo.io/zh-cn/docs/front-matter">Hexo 的 FrontMatter 配置文档</a>，和 <a href="https://butterfly.js.org/posts/dc584b87/?highlight=front%20matter#Post-Front-matter">Butterfly主题的 FrontMatter 配置文档</a>，可以将需要的参数作为 notion 数据库的字段来设置。一般来说，主题的 FrontMatter 为 Hexo在一些基础字段是共用的。</p><ul><li><code>permalink</code>为文档的永久链接，例如<code>https://notion-hexo.vercel.app/notion-hexo/</code>，注意记得在结尾加上<code>/</code></li><li><code>categories</code>为文档的分类</li><li><code>tags</code> 为文档的标签</li><li><code>description</code>为主题配置中可选的文档描述</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">notion</span>: &#123;</span><br><span class="line">  <span class="attr">token</span>: process.<span class="property">env</span>.<span class="property">NOTION_TOKEN</span>,</span><br><span class="line">  <span class="attr">databaseId</span>: process.<span class="property">env</span>.<span class="property">NOTION_DATABASE_ID</span>,</span><br><span class="line">  <span class="attr">filter</span>: &#123; <span class="attr">property</span>: <span class="string">&#x27;status&#x27;</span>, <span class="attr">select</span>: &#123; <span class="attr">equals</span>: <span class="string">&#x27;已发布&#x27;</span> &#125;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>token</code>为 Notion Token，可从<a href="https://elog.1874.cool/notion/gvnxobqogetukays#token-1">此处</a>获取</li><li><code>databaseId</code>为数据库的 ID，可从<a href="https://elog.1874.cool/notion/gvnxobqogetukays#databaseid">此处</a>获取</li><li><code>filter</code>表示 Elog 将下载 notion 数据库属性为<code>status=已发布</code>的文档</li></ul><h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><p><img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/325b218f95881daa6db137eb10a970b5.png" alt="Untitled.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local</span>: &#123;</span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&#x27;./source/_posts&#x27;</span>,</span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">  <span class="attr">format</span>: <span class="string">&#x27;markdown&#x27;</span>,</span><br><span class="line">  <span class="attr">frontMatter</span>: &#123;</span><br><span class="line">    <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">include</span>: [<span class="string">&#x27;categories&#x27;</span>, <span class="string">&#x27;tags&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;updated&#x27;</span>, <span class="string">&#x27;permalink&#x27;</span>, <span class="string">&#x27;cover&#x27;</span>, <span class="string">&#x27;description&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">formatExt</span>: <span class="string">&#x27;./format-image.js&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>outputDir</code>表示文档的存放位置为项目根目录下的<code>source/_posts</code>文件夹中</li><li><code>filename</code>表示文档将以数据库的 <code>title</code> 字段命名，也就是文档名</li><li><code>format</code>表示文档将以 markdown 的形式保存</li><li><code>frontMatter.enable</code>表示在 markdown 文档开头添加 Front Matter</li><li><code>frontMatter.include</code>表示只输出数组中存在的字段，数据库的其他字段忽略</li><li><code>formatExt=./format-image.js</code>表示将使用自定义文档插件，插件路径为项目根目录下的<code>format-image.js</code>文件</li></ul><h3 id="format-image-js"><a href="#format-image-js" class="headerlink" title="format-image.js"></a>format-image.js</h3><p>该文档插件的作用就是将 notion 文档最上面的<code>封面图 cover</code>，也下载到本地，并替换为本地图片链接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; matterMarkdownAdapter &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@elog/cli&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义文档插件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">DocDetail</span>&#125; doc doc的类型定义为 DocDetail</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ImageClient</span>&#125; imageClient 图床下载器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">Promise&lt;DocDetail&gt;</span>&#125; 返回处理后的文档对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">format</span> = <span class="keyword">async</span> (<span class="params">doc, imageClient</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> cover = doc.<span class="property">properties</span>.<span class="property">cover</span></span><br><span class="line">  <span class="keyword">if</span> (imageClient)  &#123;</span><br><span class="line">    <span class="comment">// 只有启用图床平台image.enable=true时，imageClient才能用，否则请自行实现图片上传</span></span><br><span class="line">    <span class="keyword">const</span> url = <span class="keyword">await</span> imageClient.<span class="title function_">uploadImageFromUrl</span>(cover, doc)</span><br><span class="line">    <span class="comment">// cover链接替换为本地图片</span></span><br><span class="line">    doc.<span class="property">properties</span>.<span class="property">cover</span> = url</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将文档内容格式化为带有 Front Matter 的 markdown</span></span><br><span class="line">  doc.<span class="property">body</span> = <span class="title function_">matterMarkdownAdapter</span>(doc);</span><br><span class="line">  <span class="comment">// 返回整个文档对象</span></span><br><span class="line">  <span class="keyword">return</span> doc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 必须要暴露此方法</span></span><br><span class="line">  format,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="图床配置"><a href="#图床配置" class="headerlink" title="图床配置"></a>图床配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local</span>: &#123;</span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&#x27;./source/images&#x27;</span>,</span><br><span class="line">  <span class="attr">prefixKey</span>: <span class="string">&#x27;/images&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>outputDir</code>表示图片的存放位置为项目根目录下的<code>source/images</code>文件夹中</li><li><code>prefixKey=/images</code>表示图片的统一前缀为<code>/images</code>，因为 Hexo 会将<code>source/images</code>文件夹视为<a href="https://hexo.io/zh-cn/docs/asset-folders">静态资源根目录</a>，统一将图片放在这里，并指定图片前缀，Hexo 才能找到此图片</li></ul><h2 id="更多-Elog-配置详情，请阅读-Elog-文档"><a href="#更多-Elog-配置详情，请阅读-Elog-文档" class="headerlink" title="更多 Elog 配置详情，请阅读 Elog 文档"></a>更多 Elog 配置详情，请阅读 <a href="https://elog.1874.cool/">Elog 文档</a></h2>]]></content>
      
      
      <categories>
          
          <category> Elog-Notion </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在.NET Core中使用异步多线程消费</title>
      <link href="/posts/6077dc15.html"/>
      <url>/posts/6077dc15.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><p>处理大量数据是一个常见的需求，传统的同步处理方式往往效率低下，尤其是在数据量非常大的情况下。本篇将介绍一种高效的多线程异步处理大数据量的方法，通过边处理边消费的方式，极大地提高了处理效率，并且减少了内存开销。这种解决方案只是实现这一需求的一种实践，并不排除还有其他方式可以实现。如果您有任何问题或建议，欢迎在评论区留言讨论。</p><h2 id="二、假设场景"><a href="#二、假设场景" class="headerlink" title="二、假设场景"></a>二、假设场景</h2><p>假设我们有一个需要处理大量图片文件的应用程序。每个图片文件都需要进行压缩、调整等复杂的计算和数据处理。由于图片文件数量庞大，如果按同步方式处理，不仅速度慢，而且会占用大量内存。为了解决这个问题，我们采用了多线程异步处理的方式。</p><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><p>我们可以使用 .NET 的 <strong>异步编程模型</strong> 和 <a href="https://learn.microsoft.com/zh-cn/dotnet/core/extensions/channels">Channel</a> 来实现生产者-消费者模式。生产者负责读取图片文件并将其写入到<code>Channel</code>中，消费者从<code>Channel</code>中读取图片文件并进行处理。通过这种方式，我们可以边读取边处理，极大地提高了处理效率。</p><p><strong>以下是解决问题的思路和方案：</strong></p><ol><li>定义生产者和消费者：<ul><li>生产者负责读取图片文件，并将其写入到<code>Channel</code>中</li><li>消费者从<code>Channel</code>中读取图片文件，并对其进行处理（如压缩、调整大小等）</li></ul></li><li>使用<code>Channel</code>实现生产者-消费者模式：<ul><li><code>Channel</code>是 .NET 提供的一种用于实现生产者-消费者模式的高效数据结构</li><li>生产者将数据写入<code>Channel</code>，消费者从<code>Channel</code>中读取数据</li></ul></li><li>并行处理：<ul><li>使用<code>Task.Run</code>启动多个生产者和消费者任务，以实现并行处理</li><li>通过设置最大并行度来控制同时运行的任务数量</li></ul></li><li>异步编程：<ul><li>使用<code>async</code>和<code>await</code>关键字实现异步编程，以避免阻塞线程。</li><li>异步编程可以提高应用程序的响应速度和吞吐量</li></ul></li></ol><p><strong>涉及技术点介绍：</strong></p><ul><li><code>Channel</code>：用于在生产者和消费者之间传递数据，支持高效的并发操作</li><li><code>Task</code>：用于启动并行任务，实现多线程处理</li><li><code>async/await</code>：用于实现异步编程，避免阻塞线程，提高应用程序的响应速度</li></ul><h2 id="四、示例代码"><a href="#四、示例代码" class="headerlink" title="四、示例代码"></a>四、示例代码</h2><p>以下是一个简单的示例代码，演示如何使用<code>Channel</code>实现生产者-消费者模式来处理图片文件：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading.Channels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cts = <span class="keyword">new</span> CancellationTokenSource();</span><br><span class="line"><span class="comment">// 假设有一组图片文件</span></span><br><span class="line"><span class="keyword">var</span> imageFiles = Enumerable.Range(<span class="number">0</span>, <span class="number">1000</span>).Select(x =&gt; <span class="string">$&quot;image_<span class="subst">&#123;x&#125;</span>.jpg&quot;</span>).ToList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> processor = <span class="keyword">new</span> ImageProcessor(<span class="number">10</span>, cts.Token);</span><br><span class="line"><span class="keyword">await</span> processor.ProcessAsync(imageFiles);</span><br><span class="line"></span><br><span class="line">Console.ReadKey();</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 图片处理器</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;maxDegreeOfParallelism&quot;&gt;</span>最大并行度<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;cancellationToken&quot;&gt;</span>CancellationToken<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ImageProcessor</span>(<span class="params"><span class="built_in">int</span> maxDegreeOfParallelism, CancellationToken cancellationToken</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">ProcessAsync</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; imageFiles</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建一个无界的 Channel</span></span><br><span class="line">        <span class="keyword">var</span> channel = Channel.CreateUnbounded&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动多个生产者任务</span></span><br><span class="line">        <span class="keyword">var</span> producerTasks = Enumerable.Range(<span class="number">0</span>, maxDegreeOfParallelism)</span><br><span class="line">            .Select(i =&gt; Task.Run(() =&gt; Producer(imageFiles, i, channel.Writer), cancellationToken))</span><br><span class="line">            .ToArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动多个消费者任务</span></span><br><span class="line">        <span class="keyword">var</span> consumerTasks = Enumerable.Range(<span class="number">0</span>, maxDegreeOfParallelism)</span><br><span class="line">            .Select(_ =&gt; Task.Run(() =&gt; Consumer(channel.Reader), cancellationToken))</span><br><span class="line">            .ToArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待所有生产者任务完成</span></span><br><span class="line">        <span class="keyword">await</span> Task.WhenAll(producerTasks);</span><br><span class="line">        <span class="comment">// 完成 Channel 的写入</span></span><br><span class="line">        channel.Writer.Complete();</span><br><span class="line">        <span class="comment">// 等待所有消费者任务完成</span></span><br><span class="line">        <span class="keyword">await</span> Task.WhenAll(consumerTasks);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">Producer</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; imageFiles, <span class="built_in">int</span> producerIndex, ChannelWriter&lt;<span class="built_in">string</span>&gt; writer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 计算每个生产者需要处理的文件数量</span></span><br><span class="line">            <span class="built_in">int</span> filesPerProducer = imageFiles.Count / maxDegreeOfParallelism;</span><br><span class="line">            <span class="built_in">int</span> start = producerIndex * filesPerProducer;</span><br><span class="line">            <span class="built_in">int</span> end = producerIndex == maxDegreeOfParallelism - <span class="number">1</span></span><br><span class="line">                ? imageFiles.Count</span><br><span class="line">                : start + filesPerProducer;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = start; i &lt; end; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 模拟读取图片文件</span></span><br><span class="line">                <span class="keyword">await</span> Task.Delay(<span class="number">100</span>, cancellationToken);</span><br><span class="line">                <span class="comment">// 将图片文件路径写入 Channel</span></span><br><span class="line">                <span class="keyword">await</span> writer.WriteAsync(imageFiles[i], cancellationToken);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Producer image file: <span class="subst">&#123;imageFiles[i]&#125;</span>&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Producer error: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">Consumer</span>(<span class="params">ChannelReader&lt;<span class="built_in">string</span>&gt; reader</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 从 Channel 中读取数据并处理</span></span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">foreach</span> (<span class="keyword">var</span> imageFile <span class="keyword">in</span> reader.ReadAllAsync(cancellationToken))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 模拟处理图片文件（如压缩、调整大小等）</span></span><br><span class="line">                <span class="keyword">await</span> Task.Delay(<span class="number">100</span>, cancellationToken);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;Processed image file: <span class="subst">&#123;imageFile&#125;</span>&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Consumer error: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在<a href="https://www.cnblogs.com/Tangtang1997/p/18623843">博客园</a> 看到的文章，搬砖过来，如有侵权，请联系站主删除</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#8.0 可空引用类型</title>
      <link href="/posts/a2b0f015.html"/>
      <url>/posts/a2b0f015.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>我们的项目代码运行时最频繁的错误之一就是 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.nullreferenceexception">System.NullReferenceException</a> 异常，c#8.0 增加的<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/nullable-references">可为空引用类型</a>就是用来帮助开发者降低甚至消除<strong>NULL</strong>异常。我们需要注意的是可空引用类型是语法级别的功能，也就是代码编写的时候就会受到编程约束，这个与<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/nullable-value-types">可为空值类型</a>是不一样的。项目支持 c#8.0 请参见<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/configure-language-version">C# 语言版本控制</a>。</p><h2 id="在项目中启用可空引用类型支持"><a href="#在项目中启用可空引用类型支持" class="headerlink" title="在项目中启用可空引用类型支持"></a>在项目中启用可空引用类型支持</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Project Sdk=<span class="string">&quot;Microsoft.NET.Sdk.Web&quot;</span>&gt;  </span><br><span class="line">  </span><br><span class="line">  &lt;PropertyGroup&gt;  </span><br><span class="line">    &lt;TargetFramework&gt;net6<span class="number">.0</span>&lt;/TargetFramework&gt;  </span><br><span class="line">    &lt;Nullable&gt;enable&lt;/Nullable&gt;  </span><br><span class="line">  &lt;/PropertyGroup&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/Project&gt;  </span><br></pre></td></tr></table></figure><p>在项目文件中增加<code>&lt;Nullable&gt;enable&lt;/Nullable&gt;</code>后，项目代码中的引用类型将被解析拆分为<strong>不可空引用类型</strong>和<strong>可空引用类型</strong>。</p><h3 id="将警告提升为异常"><a href="#将警告提升为异常" class="headerlink" title="将警告提升为异常"></a>将警告提升为异常</h3><p>可空引用类型功能是以警告的形式出现，并不会干扰项目生成编译，约束力较弱。如果想严格要求自身，那我们可将特定的警告变为异常来提升约束力。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Project Sdk=<span class="string">&quot;Microsoft.NET.Sdk.Web&quot;</span>&gt;  </span><br><span class="line">  </span><br><span class="line">  &lt;PropertyGroup&gt;  </span><br><span class="line">    &lt;TargetFramework&gt;net6<span class="number">.0</span>&lt;/TargetFramework&gt;  </span><br><span class="line">    &lt;Nullable&gt;enable&lt;/Nullable&gt;  </span><br><span class="line">    &lt;WarningsAsErrors&gt;  </span><br><span class="line">    $(WarningsAsErrors);CS8600;CS8601;CS8602;CS8603;CS8604;CS8609;CS8610;CS8614;CS8616;CS8618;CS8619;CS8622;CS8625  </span><br><span class="line">    &lt;/WarningsAsErrors&gt;  </span><br><span class="line">  &lt;/PropertyGroup&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;/Project&gt;  </span><br></pre></td></tr></table></figure><p>相关技术文档<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/compiler-options/errors-warnings">C# 编译器选项 - 错误和警告 | Microsoft Docs</a>，<a href="https://cezarypiatek.github.io/post/non-nullable-references-in-dotnet-core/">Non-nullable references with C# 8 and .NET Core 3.0 · Cezary Piątek Blog (cezarypiatek.github.io)</a>，大家在编写代码时遇到 Microsoft.CodeAnalysis.CSharp 分析器所给的警告代码，都可按照自己的要求将其变为异常来约束自己。</p><h2 id="将变量标注为可空引用类型"><a href="#将变量标注为可空引用类型" class="headerlink" title="将变量标注为可空引用类型"></a>将变量标注为可空引用类型</h2><p>我们平时使用的引用类型属于<strong>不可空引用类型</strong>，在其后附加**?<strong>便为</strong>可空引用类型**。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> name;   </span><br><span class="line"><span class="built_in">string</span>? adress;   </span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TKey <span class="title">GetKey</span>&lt;<span class="title">TKey</span>&gt;()</span>  </span><br><span class="line">&#123;  </span><br><span class="line">      </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> TValue? GetValue&lt;TValue&gt;()  </span><br><span class="line">&#123;  </span><br><span class="line">      </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20241217/image.8z6l0b9074.webp" alt="image"></p><p>如上示例，由于 Student 拥有默认的空构造函数<code>new Student()</code>,此构造函数会使<code>Name</code>和<code>Adress</code>属性为 null，所以分析器发出了 CS8618 的警告。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20241217/image.13lu2yn6vo.webp" alt="image"></p><p>我们将空构造函数写上，此时警告智能的转移到构造函数上了。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20241217/image.2dor9a5ifc.webp" alt="image"></p><p>我们在构造函数中将可能为 null 的 string 类型属性附上值，警告消除。而 string?类型无需处理，因为它是允许为 null 的。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20241217/image.m4s2ryw5.webp" alt="image"></p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20241217/image.7p3ntzrzz3.webp" alt="image"></p><p>以上两种方式也可以消除警告。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20241217/image.3nroflo0z0.webp" alt="image"></p><p>在<code>GetStudentNames</code>方法中，我们使用<code>Student</code>的<code>EnglishName</code>属性时，分析器发出了 CS8604 警告，因为<code>EnglishName</code>属性是可空引用类型，无法放入<code>List&lt;string&gt;</code>中，只能放入在<code>List&lt;string?&gt;</code>中。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20241217/image.3gogk61zwc.webp" alt="image"></p><p>我们使用??判断当<code>EnglishName</code>为 null 时，使用不可空引用类型属性<code>Name</code>，此时 CS8604 警告消除。</p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>可空引用类型模式中，属性是可以被拆分为两种模式的，其一是属性是否可被赋值 null，其二是属性的值是否可能为 null。大家可能对这句话理解起来有点懵，请接着看下面的讲解。</p><h3 id="AllowNull"><a href="#AllowNull" class="headerlink" title="[AllowNull]"></a>[AllowNull]</h3><p>不可为 null 的引用类型属性允许被赋值 null</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20241217/image.7i0fyk684e.webp" alt="image"></p><p>上面代码中，<code>Adress</code>属性即使被赋值 null，也不会使其值为 null，不会在代码中引发潜在的 Null 异常。所以此场景是合理且被允许的。</p><h3 id="DisallowNull"><a href="#DisallowNull" class="headerlink" title="[DisallowNull]"></a>[DisallowNull]</h3><p>可为 null 的引用类型属性不允许赋值为 null</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20241217/image.1vypkp518n.webp" alt="image"></p><p><code>Adress</code>属性虽然默认值是 null，但对其赋值 null 是不合理的。虽然不能赋值 null，但获取<code>Adress</code>属性的值时仍可能为 null，大家可在合适的场景使用<code>[DisallowNull]</code>。</p><h3 id="NotNull"><a href="#NotNull" class="headerlink" title="[NotNull]"></a>[NotNull]</h3><p>可为 null 的引用类型属性的值永远不会是 null，可放心使用</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20241217/image.2dor9a6ick.webp" alt="image"></p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20241217/image.1sf3mzc64k.webp" alt="image"></p><p>我们使用<code>GetStudentAdress</code>方法返回<code>Student</code>的<code>Adress</code>属性，分析器并没有发出警告，因为分析器通过<code>[NotNull]</code>特性也知道了<code>Adress</code>属性的值永远不会为 null。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20241217/image.32i0tau94o.webp" alt="image"></p><p>我们尝试将<code>Adress</code>属性改为可能返回 null 值，分析器立马发出了 CS8603 警告，很给力。</p><h3 id="NotNullIfNotNull"><a href="#NotNullIfNotNull" class="headerlink" title="[NotNullIfNotNull]"></a>[NotNullIfNotNull]</h3><p>这个特性作用于方法中，用于告诉其他程序员只要你不给我的方法传 null 参，我就不会返回 null 给你，你看着办。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">return: NotNullIfNotNull(<span class="string">&quot;student&quot;</span>)</span>]  </span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span>? GetStudentAdress(Student? student)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">return</span> student?.Adress;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20241217/image.8l059g2mqr.webp" alt="image"></p><p><code>adress</code>和<code>adress2</code>有着不同的待遇。</p><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><p>有些场景分析器无法分析出潜在的 null 异常</p><h3 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Student  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName;  </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? MiddleName;  </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> LastName;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintStudent</span>(<span class="params">Student student</span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;First name: <span class="subst">&#123;student.FirstName.ToUpper()&#125;</span>&quot;</span>);  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Middle name: <span class="subst">&#123;student.MiddleName?.ToUpper()&#125;</span>&quot;</span>);  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Last name: <span class="subst">&#123;student.LastName.ToUpper()&#125;</span>&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span> =&gt; PrintStudent(<span class="literal">default</span>(FirstName));  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main2</span>()</span> =&gt; PrintStudent(<span class="keyword">new</span> Student());  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><code>default(FirstName)</code> 和<code>new Student()</code>中的<code>FirstName</code> 和 <code>LastName</code> 运行时为 null，编辑器此时未出现任何警告。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Foo&lt;T&gt;  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> T Bar &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">string</span> s = <span class="literal">default</span>(Foo&lt;<span class="built_in">string</span>&gt;).Bar;  </span><br><span class="line">        <span class="built_in">string</span> s2 = <span class="keyword">new</span> Foo&lt;<span class="built_in">string</span>&gt;().Bar;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>属性 <code>Bar</code> 在运行时为 <code>null</code>,而<code>s</code>和<code>s2</code>是不可为 null 字符串类型，编辑器此时未出现任何警告。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组也是可为 null 的引用类型中的已知缺陷</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">string</span>[] values = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">10</span>];  </span><br><span class="line">        <span class="built_in">string</span> s = values[<span class="number">0</span>];  </span><br><span class="line">        Console.WriteLine(s.ToUpper());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>代码中的数组声明其元素为不可为 null 的 string，而其元素在初始化时都为 null，编辑器此时未出现任何警告。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>将引用类型拆分为可空引用类型和不可空引用类型可以为我们的项目代码带来质的提升，团队之间协作或者使用第三方的类库都可以通过<code>?</code>标识来知道方法的某个参数传 null 不会引发异常、属性赋值 null 不会引发异常，反之我们使用某些属性或者方法的返参也可以知道其是否可能为 null，对于不可能为 null 的变量我们就无需再麻烦的检测 null 值了，而在以前，我们可能需要对每个变量都需要做 null 判断。感兴趣的同学赶紧给自己的项目加入这个功能吧。</p><blockquote><p>在<a href="https://blogs.masastack.com/">MASA Stack </a> 看到的文章，搬砖过来，如有侵权，请联系站主删除</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo nexT主题添加相册</title>
      <link href="/posts/72bea106.html"/>
      <url>/posts/72bea106.html</url>
      
        <content type="html"><![CDATA[<p>给博客添加一个相册页面，以展示自己拍摄的一些照片 (≖ᴗ≖)✧</p><h2 id="config-next-yml"><a href="#config-next-yml" class="headerlink" title="_config.next.yml"></a>_config.next.yml</h2><p>首先新建<code>hexo new page photos</code>相册页面，将会在<code>source/</code>下创建<code>photos/index.md</code>，在其中添加<code>type: photos</code></p><p>之后在主题<code>_config.next.yml</code>文件中对应位置<code>menu</code>里添加<code>Photos: /photos/ || image</code> ，这样生成后就能在页面的对应页面选项中有该相册Tab。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menu<span class="punctuation">:</span></span><br><span class="line">  photos<span class="punctuation">:</span> /photos/ || fas fa-camera-retro</span><br></pre></td></tr></table></figure><h2 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h2><p>在博客根目录下新建<code>scripts</code>文件夹，里面将会存放相关js文件。</p><p>新建<code>scripts/phototool.js</code>文件，里面内容如下，主要功能是访问照片文件夹，获取每张照片的size和name，并生成对应的json文件：</p><p>命令：<code>Git Bash</code>中键入 <code>node phototool.js</code>生成json<br>注：若出现<code>Error: Cannot find module &#39;axios&#39;</code>问题，请在<code>Git Bash</code>中键入对应命令<code>npm install image-size</code>进行安装。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置项</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">OWNER</span> = <span class="string">&quot;xxxxx&quot;</span>; <span class="comment">// GitHub用户名</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REPO</span> = <span class="string">&quot;xxxx&quot;</span>; <span class="comment">// 仓库名称</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BRANCH</span> = <span class="string">&quot;master&quot;</span>; <span class="comment">// 分支名称</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TOKEN</span> = <span class="string">&quot;ghp_Czclu19lnkjrACxxxxxxxxxxxxxxxxxxxxx&quot;</span>; <span class="comment">// 你的GitHub个人访问令牌</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">API_URL</span> = <span class="string">`https://api.github.com/repos/<span class="subst">$&#123;OWNER&#125;</span>/<span class="subst">$&#123;REPO&#125;</span>/contents`</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">OUTPATH</span> = <span class="string">&quot;source/images/picX&quot;</span>;<span class="comment">// 这里是输出图片json的目录</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">GenerateImg</span> = [<span class="string">&quot;DevOps&quot;</span>,<span class="string">&quot;docker&quot;</span>,<span class="string">&quot;rabbitMQ&quot;</span>,<span class="string">&quot;redis&quot;</span>]<span class="comment">//这里是你需要生成仓库中指定的文件中的图片</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归获取文件信息</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchFiles</span>(<span class="params">dir = <span class="string">&quot;&quot;</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = dir ? <span class="string">`<span class="subst">$&#123;API_URL&#125;</span>/<span class="subst">$&#123;dir&#125;</span>?ref=<span class="subst">$&#123;BRANCH&#125;</span>`</span> : <span class="string">`<span class="subst">$&#123;API_URL&#125;</span>?ref=<span class="subst">$&#123;BRANCH&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(url, &#123;</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="title class_">Authorization</span>: <span class="string">`token <span class="subst">$&#123;TOKEN&#125;</span>`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> tasks = data.<span class="title function_">map</span>(<span class="title function_">async</span> (item) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">type</span> === <span class="string">&quot;file&quot;</span> &amp;&amp; <span class="regexp">/\.(jpg|jpeg|png|webp|gif)$/i</span>.<span class="title function_">test</span>(item.<span class="property">name</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">name</span>: item.<span class="property">name</span>,</span><br><span class="line">          <span class="attr">width</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">height</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">path</span>: item.<span class="property">path</span>,</span><br><span class="line">          <span class="attr">size</span>: item.<span class="property">size</span>,</span><br><span class="line">          <span class="attr">url</span>: item.<span class="property">html_url</span></span><br><span class="line">          &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">type</span> === <span class="string">&quot;dir&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">GenerateImg</span>.<span class="title function_">includes</span>(item.<span class="property">name</span>)) &#123;</span><br><span class="line">          <span class="comment">// 如果是文件夹，递归处理</span></span><br><span class="line">          <span class="keyword">const</span> folderData = <span class="keyword">await</span> <span class="title function_">fetchFiles</span>(item.<span class="property">path</span>);</span><br><span class="line">          <span class="title function_">saveJsonToFile</span>(item.<span class="property">name</span>, folderData);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(tasks)).<span class="title function_">filter</span>(<span class="title class_">Boolean</span>); <span class="comment">// 过滤掉空值</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`获取目录 <span class="subst">$&#123;dir&#125;</span> 失败: `</span>, error.<span class="property">message</span>);</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存JSON到对应文件夹</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">saveJsonToFile</span>(<span class="params">folderName, data</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> folderPath = path.<span class="title function_">join</span>(<span class="variable constant_">OUTPATH</span>, folderName);</span><br><span class="line">  <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(folderPath)) &#123;</span><br><span class="line">    fs.<span class="title function_">mkdirSync</span>(folderPath, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (data == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(folderPath, <span class="string">`<span class="subst">$&#123;folderName&#125;</span>_info.json`</span>);</span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(filePath, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data, <span class="literal">null</span>, <span class="number">2</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`JSON文件已保存到: <span class="subst">$&#123;filePath&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始获取GitHub图床数据喵...&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">fetchFiles</span>();</span><br><span class="line">  <span class="comment">//saveJsonToFile(&quot;&quot;, data); // 保存根目录的JSON</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;所有数据已处理完成喵！&quot;</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>文件样例如下：</p><p>生成文件的路径<code>source/images/picX/docker/docker_info.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Untitled-1.ic5ab26hd.webp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;docker/Untitled-1.ic5ab26hd.webp&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">14830</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/xxxxx/picx-xxxxxx/blob/master/docker/Untitled-1.ic5ab26hd.webp&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h2 id="inline-tags-js"><a href="#inline-tags-js" class="headerlink" title="inline-tags.js"></a>inline-tags.js</h2><p>新建<code>scripts/inline-tags.js</code>文件，里面内容如下，主要功能是注入方法，根据指定的路径生成相册以及图片的Html元素：</p><p><code>inline-tags.js</code>内容如下，主要功能是访问json文件内容，遍历每行数据，并在页面对应位置上放置代码，展示图片（其中图片链接为自个GitHub相册库中图片的链接）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化对象存储域名 cosDomain</span></span><br><span class="line"><span class="keyword">const</span> cosDomain = hexo.<span class="property">config</span>.<span class="property">cos_domain</span>;</span><br><span class="line"><span class="keyword">const</span> cos_base = hexo.<span class="property">config</span>.<span class="property">cos_base</span>;</span><br><span class="line"><span class="comment">// preconnect</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">injector</span>.<span class="title function_">register</span>(<span class="string">&#x27;head_begin&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">//    const vendorsCdnUrl = new URL(hexo.config.theme_config.vendors.custom_cdn_url);</span></span><br><span class="line"><span class="comment">//    const vendorsCdn = vendorsCdnUrl.protocol + &#x27;//&#x27; + vendorsCdnUrl.hostname;</span></span><br><span class="line"><span class="comment">//    &lt;link rel=&quot;preconnect&quot; href=&quot;$&#123;vendorsCdn&#125;&quot; crossorigin=&quot;&quot;&gt;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;link rel=&quot;preconnect&quot; href=&quot;<span class="subst">$&#123;cosDomain&#125;</span>&quot; crossorigin=&quot;&quot;&gt;`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 着重号</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;dot&#x27;</span>, <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;span class=&quot;emphasis-point&quot;&gt;<span class="subst">$&#123;args.join(<span class="string">&#x27; &#x27;</span>)&#125;</span>&lt;/span&gt;`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相册</span></span><br><span class="line"><span class="comment">// 如果输入是两个值，那么用 args[0]，args[1] 分别代表</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;album&#x27;</span>, <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> photoSrc = cosDomain + <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> jsonSrc = cos_base + <span class="string">`/images/picX/<span class="subst">$&#123;args&#125;</span>`</span> + <span class="string">`/<span class="subst">$&#123;args&#125;</span>_info.json`</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;style&gt;</span></span><br><span class="line"><span class="string">            .post-block &#123; </span></span><br><span class="line"><span class="string">                padding-left: 10px;</span></span><br><span class="line"><span class="string">                padding-right: 10px;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &lt;/style&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;album&quot; photo-src=&quot;<span class="subst">$&#123;photoSrc&#125;</span>&quot; json-src=&quot;<span class="subst">$&#123;jsonSrc&#125;</span>&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子页面列表</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;subpagebox&#x27;</span>, <span class="keyword">function</span> (<span class="params">[args, delimiter = <span class="string">&#x27;|&#x27;</span>, comment = <span class="string">&#x27;%&#x27;</span>], content</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args, delimiter, comment, content);</span><br><span class="line">    <span class="keyword">const</span> links = content.<span class="title function_">split</span>(<span class="string">&#x27;\n&#x27;</span>).<span class="title function_">filter</span>(<span class="function"><span class="params">line</span> =&gt;</span> line.<span class="title function_">trim</span>() !== <span class="string">&#x27;&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">line</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> item = line.<span class="title function_">split</span>(delimiter).<span class="title function_">map</span>(<span class="function"><span class="params">arg</span> =&gt;</span> arg.<span class="title function_">trim</span>());</span><br><span class="line">        <span class="keyword">const</span> imageSource = cosDomain + <span class="string">&#x27;/&#x27;</span> + item[<span class="number">1</span>] + <span class="string">&#x27;/&#x27;</span> + item[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (item[<span class="number">0</span>][<span class="number">0</span>] === comment) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;subpage-box-cover&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;a style=&quot;width: 100%;&quot; href=&quot;<span class="subst">$&#123;item[<span class="number">1</span>]&#125;</span>/&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;p class=&quot;image-caption&quot;&gt;<span class="subst">$&#123;item[<span class="number">0</span>]&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">                    &lt;img alt=&quot;<span class="subst">$&#123;item[<span class="number">0</span>]&#125;</span>&quot; src=&quot;<span class="subst">$&#123;imageSource&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`&lt;div class=&quot;subpage-box&quot;&gt;<span class="subst">$&#123;links.join(<span class="string">&#x27;&#x27;</span>)&#125;</span>&lt;/div&gt;`</span>;</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>添加配置<code>cos_domain</code>以及<code>cos_base</code><ul><li>在Hexo的<code>_config.yml</code>文件当中添加</li><li><pre><code class="language-yml">cos_domain: https://xxxxx/aaaaaacos_base: https://xxxxx<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 相册菜单</span><br><span class="line"></span><br><span class="line">### 相册菜单主页面</span><br><span class="line"></span><br><span class="line">添加相册主页对应不同模块标签，如下图</span><br><span class="line"></span><br><span class="line">![6a3f387807d0f0246e55a3f7e8c126fb.png](https://github.com/fantasy-ke/picx-images-hosting/Qexo/24/11/6a3f387807d0f0246e55a3f7e8c126fb.png &quot;6a3f387807d0f0246e55a3f7e8c126fb.png&quot;)</span><br><span class="line"></span><br><span class="line">文件对应的结构目录</span><br><span class="line"></span><br><span class="line">```yaml</span><br><span class="line">photos</span><br><span class="line">--Devops</span><br><span class="line">----index.md</span><br><span class="line">--docker</span><br><span class="line">----index.md</span><br><span class="line">--index.md</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p>路径<code>photos/index.md</code>添加内容如下</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 相册</span><br><span class="line">date: 2024-11-18 15:41:38</span><br><span class="line">updated: 2024-11-18 15:41:38</span><br><span class="line">type: &quot;photos&quot;</span><br><span class="line"><span class="section">comments: false</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span>岁月无声，光影留痕。<span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- inline-tags.js 注入的子页面方法subpagebox --&gt;</span><br><span class="line">&lt;!-- 文件夹名称 | 文件夹名称 | 对应标签的主封面 --&gt;</span><br><span class="line">&lt;!-- redis | redis | logo.491b7w38xo.webp --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% subpagebox  %&#125;</span><br><span class="line">redis | redis | logo.491b7w38xo.webp</span><br><span class="line">docker | docker | logo.1027b8euuh.webp</span><br><span class="line">rabbitMQ | rabbitMQ | image.5j48e7lwua.webp</span><br><span class="line">DevOps | DevOps | logo.7ax7942wpp.svg</span><br><span class="line">&#123;% endsubpagebox %&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="相册菜单子页面"><a href="#相册菜单子页面" class="headerlink" title="相册菜单子页面"></a>相册菜单子页面</h3><p>路径<code>photos/docker/index.md</code>添加内容如下</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: docker</span><br><span class="line"><span class="section">description: <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../&quot;</span>&gt;</span></span>光影集<span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> / docker</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line">&lt;!-- inline-tags.js 注入的子页面方法album --&gt;</span><br><span class="line">&#123;% album docker %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="添加子页面布局"><a href="#添加子页面布局" class="headerlink" title="添加子页面布局"></a>添加子页面布局</h2><h3 id="body-end-njk"><a href="#body-end-njk" class="headerlink" title="body-end.njk"></a>body-end.njk</h3><p>新增文件<code>_data/body-end.njk</code> 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&#123;### 相册 ###&#125;</span><br><span class="line">&#123;#</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/minigrid@3.1.1/dist/minigrid.min.js&quot; integrity=&quot;sha256-oexHY81/KuGogn0rnUzhYExxPnIyzC4ErClSXE+jFa8=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="line">#&#125;</span><br><span class="line">&lt;script src=&quot;/resources/minigrid.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&#123;&#123; pjax &#125;&#125; type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var album = document.querySelector(&quot;.album&quot;);</span><br><span class="line">if (album) &#123;</span><br><span class="line">  // 相册列表 JSON 数据</span><br><span class="line">  var imgDataPath = album.getAttribute(&#x27;json-src&#x27;);</span><br><span class="line">  // 照片存储路径</span><br><span class="line">  var imgPath = album.getAttribute(&#x27;photo-src&#x27;);</span><br><span class="line">  // 最多显示数量</span><br><span class="line">  var imgMaxNum = 50;</span><br><span class="line">  // 获取窗口大小以决定图片宽度</span><br><span class="line">  var windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;</span><br><span class="line">  var imageWidth;</span><br><span class="line"></span><br><span class="line">  if (windowWidth &lt; 768) &#123;</span><br><span class="line">    imageWidth = 145; // 移动端图片宽度</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    imageWidth = 235;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 生成相册</span><br><span class="line">  var linkDataPath = imgDataPath;</span><br><span class="line">  var photo = &#123;</span><br><span class="line">    page: 1,</span><br><span class="line">    offset: imgMaxNum,</span><br><span class="line">    init: function () &#123;</span><br><span class="line">      var that = this;</span><br><span class="line">      $.getJSON(linkDataPath, function (data) &#123;</span><br><span class="line">          that.render(that.page, data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    render: function (page, data) &#123;</span><br><span class="line">      var begin = (page - 1) * this.offset;</span><br><span class="line">      var end = page * this.offset;</span><br><span class="line">      if (begin &gt;= data.length) return;</span><br><span class="line">      var imgNameWithPattern, imgName, imageSize, imageX, imageY, li = &quot;&quot;;</span><br><span class="line">      for (var i = begin; i &lt; end &amp;&amp; i &lt; data.length; i++) &#123;</span><br><span class="line">        imgNameWithPattern = data[i].path;</span><br><span class="line">        imgName = data[i].name;</span><br><span class="line">        imageSize = data[i].size;</span><br><span class="line">        li += &#x27;&lt;div class=&quot;card&quot; style=&quot;width:&#x27; + imageWidth + &#x27;px&quot; &gt;&#x27;;</span><br><span class="line">        li += &#x27;&lt;div class=&quot;album-photo&quot; style=&quot;height:&#x27; + imageWidth + &#x27;px&quot; &gt;&#x27;;</span><br><span class="line">        li += &#x27;&lt;a class=&quot;fancybox fancybox.image&quot; href=&quot;&#x27; + imgPath + imgNameWithPattern + &#x27;&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/ImageObject&quot; itemprop=&quot;url&quot; data-fancybox=&quot;group&quot; rel=&quot;group&quot; data-caption=&quot;&#x27; + imgName + &#x27;&quot; title=&quot;&#x27; +  imgName + &#x27;&quot;&gt;&#x27;;</span><br><span class="line">        li += &#x27;&lt;img data-src=&quot;&#x27; + imgPath + imgNameWithPattern + &#x27;&quot; src=&quot;&#x27; + imgPath + imgNameWithPattern + &#x27;&quot; alt=&quot;&#x27; +  imgName + &#x27;&quot; data-loaded=&quot;true&quot;&gt;&#x27;;</span><br><span class="line">        li += &#x27;&lt;/a&gt;&#x27;;</span><br><span class="line">        li += &#x27;&lt;/div&gt;&#x27;;</span><br><span class="line">        li += &#x27;&lt;/div&gt;&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">      album.insertAdjacentHTML(&#x27;beforeend&#x27;, li);</span><br><span class="line">      this.minigrid();</span><br><span class="line">    &#125;,</span><br><span class="line">    minigrid: function () &#123;</span><br><span class="line">      var grid = new Minigrid(&#123;</span><br><span class="line">        container: &#x27;.album&#x27;,</span><br><span class="line">        item: &#x27;.card&#x27;,</span><br><span class="line">        gutter: 12</span><br><span class="line">      &#125;);</span><br><span class="line">      grid.mount();</span><br><span class="line">      window.addEventListener(&#x27;resize&#x27;, function () &#123;</span><br><span class="line">        grid.mount();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  photo.init();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>引入布局js <code>minigrid.min.js</code>可以使用远程直接引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/minigrid@3.1.1/dist/minigrid.min.js&quot;</span> integrity=<span class="string">&quot;sha256-oexHY81/KuGogn0rnUzhYExxPnIyzC4ErClSXE+jFa8=&quot;</span> crossorigin=<span class="string">&quot;anonymous&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>也可以下载下来本地引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;/resources/minigrid.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="新增相册页面样式"><a href="#新增相册页面样式" class="headerlink" title="新增相册页面样式"></a>新增相册页面样式</h2><h3 id="styles-styl"><a href="#styles-styl" class="headerlink" title="styles.styl"></a>styles.styl</h3><p>新增文件<code>_data/styles.styl</code> 如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************/</span></span><br><span class="line"><span class="comment">/*********************** 子页面列表 *************************/</span></span><br><span class="line"><span class="comment">/**********************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.subpage-box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1.5em</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.subpage-box-cover</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.subpage-box-cover</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.subpage-box-cover</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.subpage-box-cover</span> <span class="selector-class">.image-caption</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//对齐</span><br><span class="line"><span class="selector-class">.text-center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text-left</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text-right</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************/</span></span><br><span class="line"><span class="comment">/********************* 图片与相册 **************************/</span></span><br><span class="line"><span class="comment">/**********************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 图片阴影圆角 */</span></span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-body</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="comment">/* border-radius: 4px; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 图片标题 */</span></span><br><span class="line"><span class="selector-tag">figcaption</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">10px</span> auto <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.875em</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 组图标题 */</span></span><br><span class="line"><span class="selector-class">.group-picture</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.group-picture-column</span> <span class="selector-class">.image-caption</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.group-picture</span> <span class="selector-class">.group-picture-row</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 相册 */</span></span><br><span class="line"><span class="selector-class">.album</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1080px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.album</span> <span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">transition</span>: .<span class="number">3s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 图片大小 */</span></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src$=<span class="string">&#x27;#200x&#x27;</span>]</span> &#123; <span class="attribute">width</span>:<span class="number">200px</span>; &#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src$=<span class="string">&#x27;#250x&#x27;</span>]</span> &#123; <span class="attribute">width</span>:<span class="number">250px</span>; &#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src$=<span class="string">&#x27;#300x&#x27;</span>]</span> &#123; <span class="attribute">width</span>:<span class="number">300px</span>; &#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src$=<span class="string">&#x27;#350x&#x27;</span>]</span> &#123; <span class="attribute">width</span>:<span class="number">350px</span>; &#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src$=<span class="string">&#x27;#400x&#x27;</span>]</span> &#123; <span class="attribute">width</span>:<span class="number">400px</span>; &#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src$=<span class="string">&#x27;#450x&#x27;</span>]</span> &#123; <span class="attribute">width</span>:<span class="number">450px</span>; &#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src$=<span class="string">&#x27;#500x&#x27;</span>]</span> &#123; <span class="attribute">width</span>:<span class="number">500px</span>; &#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src$=<span class="string">&#x27;#550x&#x27;</span>]</span> &#123; <span class="attribute">width</span>:<span class="number">550px</span>; &#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src$=<span class="string">&#x27;#600x&#x27;</span>]</span> &#123; <span class="attribute">width</span>:<span class="number">600px</span>; &#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src$=<span class="string">&#x27;#650x&#x27;</span>]</span> &#123; <span class="attribute">width</span>:<span class="number">650px</span>; &#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-class">.fancybox-image</span> &#123; <span class="attribute">width</span>:<span class="number">100%</span>; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="替换主题文件"><a href="#替换主题文件" class="headerlink" title="替换主题文件"></a>替换主题文件</h2><h3 id="config-next-yml-1"><a href="#config-next-yml-1" class="headerlink" title="_config.next.yml"></a>_config.next.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">bodyEnd:</span> <span class="string">source/_data/body-end.njk</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>提交博客修改：</p><blockquote><p>hexo clean<br>hexo g<br>hexo d</p></blockquote><p>最后可以看看效果了。</p><h3 id="最终的效果"><a href="#最终的效果" class="headerlink" title="最终的效果"></a>最终的效果</h3><p><img src="https://picx.fantasyke.cn/Qexo/24/11/350abd47866a11aa12d3b335c93769ac.png" alt="350abd47866a11aa12d3b335c93769ac.png"></p><p><img src="https://picx.fantasyke.cn/Qexo/24/11/51895b88d9cc6ef12738a6bac88d99c4.png" alt="350abd47866a11aa12d3b335c93769ac.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是添加相册功能大概流程，因为步骤比较多，且是通过后期回忆步骤进行记录，所以可能存在些许问题，还请原谅，并请把出现的问题在本文下面的评论中点出，我会进行修改。</p><p>后续的实现：</p><ul><li>将照片上传至GitHub相册库时，由于照片分辨率较高，其都达到了两三M以上，上传速度较慢，导致上传进度缓慢。后期想通过代码将照片进行压缩后再上传至相册库。</li><li>相册展示整个操作流程为：先上传照片到git库，再生成json文件，之后便是正常的clean、g、d，后期想把压缩、上传照片和生成json文件整合到一起。</li><li>目前的照片展示都是所有照片一整块放一起进行瀑布流显示，后期想将照片根据其旅游场景或类别、时间不同进行分类至对应文件夹，并根据类别或时间线显式展示出不同文件夹下的照片。</li></ul><p>参考链接：<br><a href="https://www.cnblogs.com/xljzlw/p/5137622.html">hexo主题中添加相册功能</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭州行</title>
      <link href="/posts/70cef458.html"/>
      <url>/posts/70cef458.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="863eb140e0ad86da7811296a4ea4fc2d7551612d9f8af4f0022dd53eba4a122e">7de94216c6a70d2d626cc013a0a1b96b52e149d7ba48b43618b1156bdaca2b154051bb893a9a3bf63ddfadced966c608162c05c1bedea95301d1a250290b8f6bae80ae7f40d96d9a03b81e670b69f189d210b22b8a2f7d7108dc9d47343ee173d6761bb0c373d9ba7efada8608f84b5f319f8f207c4c7090fddba72a82c2c11fdbaada4d9371d6ffb7c986f61c03c4ac9a33ef8e607ba4cedb7be57dedc2d5a54d173c56f4a0ff4e8ed776208820204d717f255b49ce60a57a7d6765c7d743f3a69d65bc8f8749d5538d5a9d3d8b2b2a87baf10c8c6914526834c990cbf2ca9090f54a535b04f288339dd53d50e1372aa45b2327a1570496ad22694f334f653e801ca15bd124d7adca26afda758db545</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">您好, 这里需要密码. 博主网站的姓名</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程技巧 --- 远程调试</title>
      <link href="/posts/8143.html"/>
      <url>/posts/8143.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近在做的项目上做了一些性能优化的工作，用到了 <code>Visual Studio</code> 远程调试，所以本篇文章整理一下远程调试技巧。</p><p><strong>首先，了解一下 Visual Studio远程调试是什么？</strong></p><span id="more"></span><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/a538ce667023b58f59dbce25eee87e3b.remote-debugger-client-apps.png" alt="remote-debugger-client-apps.png"></p><p><code>Visual Studio</code> 的远程调试功能允许在本地调试远程计算机上运行的应用程序。用远程调试，可以在本地计算机上设置断点、查看变量和监视程序执行，能更轻松地诊断和解决问题。</p><p><strong>其次 ，远程调试能够做什么？</strong></p><p>这对于调试在不同环境中运行的应用程序非常有用，例如在生产服务器上或是在其他设备上，可以更高效地解决问题并提高开发效率。</p><p>对于调试同一环境下有进程间通信的的多个进程，也非常有用。</p><p>那么，接下来实践一下远程调试。</p><h2 id="远程调试实操"><a href="#远程调试实操" class="headerlink" title="远程调试实操"></a>远程调试实操</h2><p>那么，接下来就实操一下远程调试，首先，你需要做一些准备工作：</p><ul><li>你得有一台需要远程的计算机或服务器，另一台开发环境的电脑，该电脑<code>Visual Studio</code> 这个是必须安装的，无论是 <code>Community</code>、<code>Professional</code> 或 <code>Enterprise</code>，均支持。</li><li>要远程调试的计算机与 <code>Visual Studio</code> 计算机必须通过网络（有线&#x2F;无线）或通过以太网电缆直接连接的方式连接在一起。 不支持在通过代理连接的两台计算机之间进行调试。 也不建议通过高延迟或低带宽连接的情况下连接，否则可能会导致调试失败或速度过慢。</li><li>设置远程调试器[1]，这是最重要的一环，远程调试器是跟随 <code>Visula Studio</code> 安装时一同安装的，若要远程调试的计算机安装了 <code>Visula Studio</code>， 可以直接找到他启动，若要远程的调试的计算机是纯净环境，那么可以通过设置文件共享[1]，将本机的远程调试器共享以便调试，另外如果要远程调试的计算机是服务器，你需要经常进行这样的远程调试，则可以将远程调试器配置为服务[1]。</li></ul><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>这里我们写一段简单的控制台测试代码，输出当前电脑的基本信息:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Management;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//回车后开始输出，便于等待远程调试接入</span></span><br><span class="line">        Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        sb.AppendLine(<span class="string">&quot;计算机基本信息：\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取操作系统信息</span></span><br><span class="line">        sb.AppendLine(<span class="string">&quot;操作系统信息：&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> osQuery = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">&quot;SELECT * FROM Win32_OperatingSystem&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> os <span class="keyword">in</span> osQuery.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            sb.AppendLine(<span class="string">$&quot;名称: <span class="subst">&#123;os[<span class="string">&quot;Caption&quot;</span>]&#125;</span>&quot;</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">$&quot;版本: <span class="subst">&#123;os[<span class="string">&quot;Version&quot;</span>]&#125;</span>&quot;</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">$&quot;制造商: <span class="subst">&#123;os[<span class="string">&quot;Manufacturer&quot;</span>]&#125;</span>&quot;</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">$&quot;计算机名: <span class="subst">&#123;os[<span class="string">&quot;CSName&quot;</span>]&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sb.AppendLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取处理器信息</span></span><br><span class="line">        sb.AppendLine(<span class="string">&quot;处理器信息：&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> cpuQuery = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">&quot;SELECT * FROM Win32_Processor&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> cpu <span class="keyword">in</span> cpuQuery.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            sb.AppendLine(<span class="string">$&quot;名称: <span class="subst">&#123;cpu[<span class="string">&quot;Name&quot;</span>]&#125;</span>&quot;</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">$&quot;制造商: <span class="subst">&#123;cpu[<span class="string">&quot;Manufacturer&quot;</span>]&#125;</span>&quot;</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">$&quot;描述: <span class="subst">&#123;cpu[<span class="string">&quot;Description&quot;</span>]&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sb.AppendLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取内存信息</span></span><br><span class="line">        sb.AppendLine(<span class="string">&quot;内存信息：&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> memQuery = <span class="keyword">new</span> ManagementObjectSearcher(<span class="string">&quot;SELECT * FROM Win32_PhysicalMemory&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> mem <span class="keyword">in</span> memQuery.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            sb.AppendLine(<span class="string">$&quot;容量: <span class="subst">&#123;Math.Round(Convert.ToDouble(mem[<span class="string">&quot;Capacity&quot;</span>]) / (<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>), <span class="number">2</span>)&#125;</span> GB&quot;</span>);</span><br><span class="line">            sb.AppendLine(<span class="string">$&quot;速度: <span class="subst">&#123;mem[<span class="string">&quot;Speed&quot;</span>]&#125;</span> MHz&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str= sb.ToString();</span><br><span class="line"></span><br><span class="line">        Console.Write(str);</span><br><span class="line"></span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在本机 <code>Debug</code> 一下看一下本机的信息：</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/5afde3e417168de1a32f9c69efb5ae64.image.png" alt="image.png"></p><p>确认代码无问题后，将该解决方案以Debug发布，生成Debug文件夹，这里<strong>一定记住需要使用Debug发布</strong>，远程调试需要使用到Debug发布生成的 <code>.pdb</code> 文件[2]，具体<code>.pdb</code> 文件，后面的章节解释。</p><p>将生成的生成Debug文件夹，拷贝或发布到需要远程的计算机或服务器上<br><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/72b2b85f01b08c11948240a2befcf70b.image.png" alt="image.png"></p><h3 id="设置远程调试器"><a href="#设置远程调试器" class="headerlink" title="设置远程调试器"></a>设置远程调试器</h3><p>上面说了，设置远程调试器，是最重要的一环，远程调试器是跟随 <code>Visula Studio</code> 安装时一同安装的，若要远程调试的计算机安装了 <code>Visula Studio</code>， 可以直接找到它启动，在与你的 Visual Studio 版本匹配的目录中找到 <code>msvsmon.exe</code> ，比如我的是 <code>Visula Studio 2022</code> ,则我的目录为 ：</p><ul><li><code>C:\Program Files\Microsoft Visual Studio\2022\Professional\Common7\IDE\Remote Debugger\x64msvsmon.exe</code></li><li><code>C:\Program Files\Microsoft Visual Studio\2022\Professional\Common7\IDE\Remote Debugger\x86\msvsmon.exe</code></li></ul><p>但是，一般我们都不会在发布计算机或者服务器上安装调试环境，所以还有第二种方式，以<strong>文件共享的方式</strong>，将当前开发环境电脑的远程调试器共享给发布计算机或者服务器。具体如何设置共享文件夹就不在这里赘述了，我这里使用 <code>MobaXterm</code> 远程过去后自动添加了C盘的共享，可以直接使用。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/e5d28a055ccea62801bdc1a623d28437.image.png" alt="image.png"></p><p>接下来启动远程调试器（<code>msvsmon.exe</code>）并设置[3]，这里有两个点需要注意：</p><ul><li>第一，需要以管理员权限启动 <code>msvsmon.exe</code>。</li><li>第二，启动后需要在 <strong>工具-&gt;选项</strong> 中设置端口号和身份验证。</li><li>这里默认端口是 4026，建议身份验证设为武神分验证时，一定勾选允许任何用户进行调试。</li></ul><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/cece5d6cd38c0a425ae2650790b16322.image.png" alt="image.png"></p><p>此时，远程调试调试的所有准备工作就都准备完了。</p><h3 id="附加进程"><a href="#附加进程" class="headerlink" title="附加进程"></a>附加进程</h3><p>此时，如想要远程调试程序，就需要在 <code>Visula Studio</code> 对远程计算机或服务器的程序进行附加进程。</p><p>远程调试的进入路径，实际上还是通过附加进程的方式，那么附加进程又能做什么呢？</p><p><code>Visual Studio</code> 的附加进程功能允许开发人员将调试器附加到运行中的外部进程，以便在不中断程序执行的情况下对其进行调试。通过附加进程，可以监视外部进程的运行状态、查看变量和调用堆栈，以便诊断问题和进行性能优化。</p><p>这对于调试与应用程序交互的其他进程或第三方组件非常有用。附加进程功能可以帮助我们更全面地了解应用程序在运行时的行为，从而快速解决问题并改进代码。</p><p>那么，现在启动远程计算机或服务器的测试程序。切换到开发环境的电脑使用 <code>Visula Studio</code> 进行附加进程，在<strong>调试-&gt;附加到进程</strong>，打开附加到进程界面，需要做如下四点设置：</p><ul><li>连接类型选择-远程(windows - 无身份验证)。</li><li>连接目标选择远程的目标计算机或服务器IP地址+远程调试器设置的端口号，默认为4026。</li><li>选择你要调试的目标进程。</li><li>勾选显示所有用户的进程，防止找不到目标进程。</li></ul><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/53c98821e2d141586d1c0462783d3cf1.image.png" alt="image.png"><br>选中目标进城后，确认附加，就可以进行远程调试了。从下图可以看到，输出了目标目标计算机或服务器的电脑基本信息。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/19d73e46228cc9f9e684db93f46ae13b.image.png" alt="image.png"></p><h2 id="pdb文件"><a href="#pdb文件" class="headerlink" title="pdb文件"></a>pdb文件</h2><p>为什么远程调试中，一定要以Debug发布呢？因为只有在Debug发布，才会生成 <code>.pdb</code> 文件。<br>那么什么是 <code>.pdb</code> 文件？</p><p>程序数据库 ( <code>.pdb</code>) 文件（也称为符号文件）将项目源代码中的标识符和语句映射到已编译应用中的相应标识符和说明。 这些映射文件将调试器链接到源代码，以进行调试。</p><p>.pdb 文件保存调试和项目状态信息，使用这些信息可以对应用的调试配置进行增量链接。 在调试时，<code>Visual Studio</code> 调试器使用 <code>.pdb</code> 文件来确定两项关键信息：</p><ul><li>要在 <code>Visual Studio IDE</code> 中显示的源文件名和行号。</li><li>在应用中停止的断点位置。</li></ul><p>调试器只会加载与在生成应用时创建的 <code>.pdb</code> 文件完全匹配的 <code>.pdb</code> 文件（即原始 <code>.pdb</code> 文件或副本），所以只有Debug发布生成的 <code>.pdb</code> 文件才能与你当前的代码完全映射，进而进行调试。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>远程调试作为一种调试技巧，除了能够在在本地环境中调试不同操作系统或远程服务器上的代码外，还能够通过多人共享远程调试会话，协助解决问题和优化代码，促进团队协作，在 解决远程服务器上的问题，无需下载整个代码库，无需安装调试环境，简化问题排查流程，高效地解决问题，是一项非常实用，高效的技能。</p><blockquote><p><strong>参考链接</strong></p><p>[1] Visual studio (windows)远程调试 —<br><a href="https://learn.microsoft.com/zh-cn/visualstudio/debugger/remote-debugging?view=vs-2022">https://learn.microsoft.com/zh-cn/visualstudio/debugger/remote-debugging?view=vs-2022</a></p><p>[2] 调试程序中的符号（.pdb）和源文件 — <a href="https://learn.microsoft.com/zh-cn/visualstudio/debugger/specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger?view=vs-2022">https://learn.microsoft.com/zh-cn/visualstudio/debugger/specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger?view=vs-2022</a></p><p>[3] 远程调试c#项目 — <a href="https://learn.microsoft.com/zh-cn/visualstudio/debugger/remote-debugging-csharp?view=vs-2022">https://learn.microsoft.com/zh-cn/visualstudio/debugger/remote-debugging-csharp?view=vs-2022</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx for Ubuntu</title>
      <link href="/posts/fdf27838.html"/>
      <url>/posts/fdf27838.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a><strong>1、安装</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 更新包</span><br><span class="line">sudo apt-get update</span><br><span class="line">// 下载安装nginx</span><br><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><h2 id="2、测试安装"><a href="#2、测试安装" class="headerlink" title="2、测试安装"></a><strong>2、测试安装</strong></h2><p>在命令行中输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>窗口显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure><p>在浏览器中输入ip地址：</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/DevOps/image.7ax7286faz.png" alt="7ax7286faz.png"></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="nginx文件安装完成之后的文件位置："><a href="#nginx文件安装完成之后的文件位置：" class="headerlink" title="nginx文件安装完成之后的文件位置："></a>nginx文件安装完成之后的文件位置：</h2><p>&#x2F;usr&#x2F;sbin&#x2F;nginx：主程序<br>&#x2F;etc&#x2F;nginx：存放配置文件<br>&#x2F;usr&#x2F;share&#x2F;nginx：存放静态文件<br>&#x2F;var&#x2F;log&#x2F;nginx：存放日志</p><p>最新版本nginx配置是由4个文件构成：</p><ol><li><code>conf.d</code>：用户自己定义的conf配置文件</li><li><code>sites-available</code>：系统默认设置的配置文件</li><li><code>sites-enabled</code>：由<code>sites-available</code>中的配置文件转换生成</li><li><code>nginx.conf</code>：汇总以上三个配置文件的内容，同时配置我们所需要的参数</li></ol><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>在&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;nginx.conf中配置，没有就创建：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虚拟主机配置</span></span><br><span class="line">    server &#123;</span><br><span class="line">        listen <span class="number">80</span>; //默认端口<span class="number">80</span></span><br><span class="line">        server_name www.gitlab.faceman.cn; //要配置的域名</span><br><span class="line">    </span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://<span class="number">192.168</span>.<span class="number">10.130</span>:<span class="number">8077</span>; //要映射的地址和端口</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>执行Nginx配置测试命令：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure><p>如果没有错误提示，则重新加载Nginx配置：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl reload nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><h3 id="1、删除nginx，-purge包括配置文件"><a href="#1、删除nginx，-purge包括配置文件" class="headerlink" title="1、删除nginx，-purge包括配置文件"></a><strong>1、删除nginx，-purge包括配置文件</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get --purge remove nginx</span><br></pre></td></tr></table></figure><h3 id="2、移除全部不使用的软件包"><a href="#2、移除全部不使用的软件包" class="headerlink" title="2、移除全部不使用的软件包"></a><strong>2、移除全部不使用的软件包</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get autoremove</span><br></pre></td></tr></table></figure><h3 id="3、罗列出与nginx相关的软件并删除"><a href="#3、罗列出与nginx相关的软件并删除" class="headerlink" title="3、罗列出与nginx相关的软件并删除"></a><strong>3、罗列出与nginx相关的软件并删除</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections|grep nginx</span><br><span class="line">sudo apt-get --purge remove nginx</span><br><span class="line">sudo apt-get --purge remove nginx-common</span><br><span class="line">sudo apt-get --purge remove nginx-core</span><br></pre></td></tr></table></figure><h3 id="4、查看nginx正在运行的进程，如果有就kill掉"><a href="#4、查看nginx正在运行的进程，如果有就kill掉" class="headerlink" title="4、查看nginx正在运行的进程，如果有就kill掉"></a><strong>4、查看nginx正在运行的进程，如果有就kill掉</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |grep nginx</span><br><span class="line">sudo kill -9 XXX</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署Mysql</title>
      <link href="/posts/1841cbd2.html"/>
      <url>/posts/1841cbd2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker部署Mysql"><a href="#Docker部署Mysql" class="headerlink" title="Docker部署Mysql"></a>Docker部署Mysql</h1><h2 id="一、概要"><a href="#一、概要" class="headerlink" title="一、概要"></a>一、概要</h2><p>此文档用于帮助开发人员快速了解 Docker 部署 MySQL 数据库的过程，并为他们提供一个指导性的指南，目前Mysql数据库使用版本为8.0。</p><h2 id="二、安装Docker"><a href="#二、安装Docker" class="headerlink" title="二、安装Docker"></a>二、安装Docker</h2><ul><li><p>若未安装docker请参考此链接</p><p><a href="/posts/b1a6a586.html#Docker的安装">Docker的安装</a></p></li></ul><!-- [Docker介绍](https://blog.fantasyke.cn/2023/04/11/docker/1-docker-introduce/) --><h2 id="三、部署Mysql数据库"><a href="#三、部署Mysql数据库" class="headerlink" title="三、部署Mysql数据库"></a>三、部署Mysql数据库</h2><h3 id="方法一：使用脚本部署"><a href="#方法一：使用脚本部署" class="headerlink" title="方法一：使用脚本部署"></a>方法一：使用脚本部署</h3><h3 id="1、新建docker-compose-yml文件"><a href="#1、新建docker-compose-yml文件" class="headerlink" title="1、新建docker-compose.yml文件"></a>1、新建docker-compose.yml文件</h3><p> 在文件中粘贴以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_server_db:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql_server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span>  <span class="string">//mysql数据库版本</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="string">//Docker守护程序将在容器退出时自动重新启动它，无论容器是由于发生错误还是由于手动停止。</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span>   <span class="string">//数据库映射端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span>   <span class="string">//数据库密码</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_server_db:/var/lib/mysql</span>  <span class="string">//mysql数据库目录映射到数据卷</span></span><br><span class="line">    <span class="attr">command:</span> </span><br><span class="line">      <span class="string">--local-infile=1</span>  <span class="string">//修改数据库配置</span></span><br></pre></td></tr></table></figure><h3 id="2-使用文件传输工具将docker-compose-yml文件上传到服务器"><a href="#2-使用文件传输工具将docker-compose-yml文件上传到服务器" class="headerlink" title="2.使用文件传输工具将docker-compose.yml文件上传到服务器"></a>2.使用文件传输工具将docker-compose.yml文件上传到服务器</h3><h3 id="3-执行docker-compose-yml文件"><a href="#3-执行docker-compose-yml文件" class="headerlink" title="3.执行docker-compose.yml文件"></a>3.执行docker-compose.yml文件</h3><p> 到docker-compose.yml文件下执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//启动容器</span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><h3 id="4-连接数据库"><a href="#4-连接数据库" class="headerlink" title="4.连接数据库"></a>4.连接数据库</h3><p> 使用MySql客户端连接，若连接成功则表示部署完成。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/Untitled-1.ic5ab26hd.webp" alt="ic5ab26hd.webp"></p><h3 id="方法二：手动部署"><a href="#方法二：手动部署" class="headerlink" title="方法二：手动部署"></a>方法二：手动部署</h3><h3 id="1-打开终端，使用以下命令拉取-MySQL-8-0-镜像："><a href="#1-打开终端，使用以下命令拉取-MySQL-8-0-镜像：" class="headerlink" title="1.打开终端，使用以下命令拉取 MySQL 8.0 镜像："></a>1.打开终端，使用以下命令拉取 MySQL 8.0 镜像：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:8.0</span><br></pre></td></tr></table></figure><h3 id="2-使用以下命令在-Docker-中启动一个-MySQL-容器，并将其命名为-“my-mysql”："><a href="#2-使用以下命令在-Docker-中启动一个-MySQL-容器，并将其命名为-“my-mysql”：" class="headerlink" title="2.使用以下命令在 Docker 中启动一个 MySQL 容器，并将其命名为 “my-mysql”："></a>2.使用以下命令在 Docker 中启动一个 MySQL 容器，并将其命名为 “my-mysql”：</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">--name</span> my<span class="literal">-mysql</span> <span class="literal">-v</span> /<span class="keyword">data</span>/mysql:/var/lib/mysql <span class="literal">-e</span> MYSQL_ROOT_PASSWORD=your_password <span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span> <span class="literal">-d</span> mysql:<span class="number">8.0</span></span><br></pre></td></tr></table></figure><ul><li><code>-name</code>指定了你要取的名字。</li><li><code>p</code>对应，需要映射出来的端口。比如:3306:3306,意识表示为my-mysql的容器里面的3306端口对应我外面这个虚拟机的3306端口。</li><li><code>e</code>是mysql的命令，设置root的密码为123456</li><li><code>d</code>是运行的镜像，这里是<code>mysql</code> 容器镜像</li><li><code>v</code> : 指定数据卷，意思就是将mysql容器中的&#x2F;var&#x2F;lib&#x2F;mysql（这个是数据库所有数据信息文件）映射到宿主机&#x2F;data&#x2F;mysql里面。（参考文档——<a href="https://www.jianshu.com/p/57420240e877">使用Docker快速搭建Mysql，并进行数据卷分离</a>）</li></ul><h3 id="3-检查容器是否正在运行："><a href="#3-检查容器是否正在运行：" class="headerlink" title="3.检查容器是否正在运行："></a>3.检查容器是否正在运行：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p> 如果你看到了一个名为 “my-mysql” 的容器正在运行，说明 MySQL 已经成功部署。</p><h3 id="4-进入Mysql"><a href="#4-进入Mysql" class="headerlink" title="4.进入Mysql"></a>4.进入Mysql</h3><p> 现在你可以通过 MySQL 客户端连接到这个容器，执行 SQL 命令，管理数据库了。例如，使用以下命令连接到容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntudoc:~# docker <span class="built_in">exec</span> -it my-mysql bash</span><br><span class="line"><span class="comment">### 下述代表容器里面的情况了</span></span><br><span class="line">root@3958ab15ea05:/# <span class="built_in">df</span> -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">overlay          53G  3.7G   47G   8% /</span><br><span class="line">tmpfs            64M     0   64M   0% /dev</span><br><span class="line">tmpfs          1000M     0 1000M   0% /sys/fs/cgroup</span><br><span class="line">/dev/dm-0        53G  3.7G   47G   8% /etc/hosts</span><br><span class="line">shm              64M     0   64M   0% /dev/shm</span><br><span class="line">tmpfs          1000M     0 1000M   0% /proc/acpi</span><br><span class="line">tmpfs          1000M     0 1000M   0% /proc/scsi</span><br><span class="line">tmpfs          1000M     0 1000M   0% /sys/firmware</span><br><span class="line"></span><br><span class="line">root@3958ab15ea05:/# mysql -uroot -p123456</span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 8</span><br><span class="line">Server version: 8.0.19 MySQL Community Server -</span><br><span class="line"></span><br><span class="line"> GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p> 使用MySql客户端连接，若连接成功则表示部署完成。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/Untitled.1lbul6y3kg.webp" alt="1lbul6y3kg"></p><h2 id="四、注意"><a href="#四、注意" class="headerlink" title="四、注意"></a>四、注意</h2><h3 id="1、修改数据库配置"><a href="#1、修改数据库配置" class="headerlink" title="1、修改数据库配置"></a>1、修改数据库配置</h3><p> 在数据库执行以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>查看配置,若为OFF则执行下一步</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;local_infile&#x27;</span></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>可将OFF改为ONset <span class="keyword">global</span> local_infile<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p> 修改成功显示：</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/Untitled-2.175eubpra1.webp" alt="175eubpra1"></p><p>必须修改，否则会在批量操作的时候（例如排产派工）时会抛出错误【loading local data is disabled； this must be enabled on both the client and server sides】，且在连接字符串中要加上AllowLoadLocalInfile&#x3D;true。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;Default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Server=192.168.2.41;Port=3307;Database=MySqlDb;Uid=root;Pwd=123456;charset=utf8;TreatTinyAsBoolean=false;AllowLoadLocalInfile=true&quot;</span><span class="punctuation">,</span> </span><br><span class="line"><span class="attr">&quot;DatabaseType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysql&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swarm-环境搭建</title>
      <link href="/posts/e65b7fd8.html"/>
      <url>/posts/e65b7fd8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Swarm-环境搭建"><a href="#Swarm-环境搭建" class="headerlink" title="Swarm-环境搭建"></a>Swarm-环境搭建</h1><h2 id="系统规划"><a href="#系统规划" class="headerlink" title="系统规划"></a><strong>系统规划</strong></h2><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image-20220726154555016.39l7gwav0x.webp" alt="https:&#x2F;&#x2F;filebed.fantasyke.cn&#x2F;file&#x2F;blogContent&#x2F;docker&#x2F;image-20220726154555016.39l7gwav0x.webp"></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a><strong>环境准备</strong></h2><h3 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a><strong>创建服务器</strong></h3><p>新建三台虚拟机</p><table><thead><tr><th><strong>节点</strong></th><th><strong>IP</strong></th><th><strong>系统</strong></th><th><strong>配置</strong></th><th><strong>存储</strong></th><th><strong>服务</strong></th></tr></thead><tbody><tr><td>manager</td><td>192.168.2.xx</td><td>CentOS7.6</td><td>8U16G</td><td>100G</td><td>redis,frp,mssql</td></tr><tr><td>worker1</td><td>192.168.2.xx</td><td>CentOS7.6</td><td>4U8G</td><td>80G</td><td>app</td></tr><tr><td>worker2</td><td>192.168.2.xx</td><td>CentOS7.6</td><td>4U8G</td><td>80G</td><td>app</td></tr></tbody></table><h3 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a><strong>时间同步</strong></h3><p>时间同步任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ntp</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF&gt;&gt;/var/spool/cron/root</span></span><br><span class="line"><span class="string"># 12点同步</span></span><br><span class="line"><span class="string">00 12 * * * /usr/sbin/ntpdate -u ntp1.aliyun.com &amp;&amp; /usr/sbin/hwclock -w</span></span><br><span class="line"><span class="string"># 23：59分执行删除</span></span><br><span class="line"><span class="string">59 23 * * *  docker image prune -af</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##查看计划任务</span></span><br><span class="line">crontab -l</span><br><span class="line"></span><br><span class="line"><span class="comment">##手动执行</span></span><br><span class="line">/usr/sbin/ntpdate -u ntp1.aliyun.com &amp;&amp; /usr/sbin/hwclock -w</span><br></pre></td></tr></table></figure><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a><strong>Docker</strong></h3><p>启动docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a><strong>防火墙</strong></h3><blockquote><p>Error response from daemon: rpc error: code &#x3D; Unavailable desc &#x3D; connection error: desc &#x3D; “transport: Error while dialing dial tcp 192.168.2.61:2377: connect: no route to host”</p></blockquote><p><strong>打开防火墙</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># manager</span></span><br><span class="line">firewall-cmd --zone=public --add-port=2377/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有node</span></span><br><span class="line">firewall-cmd --zone=public --add-port=7946/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=7946/udp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4789/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4789/udp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有node</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>要在 swarm 集群中使用使用路由网格，首先需要开启加入swarm集群的节点的以下端口：</p><ul><li><code>2377</code> ：主节点监听端口</li><li><code>7946</code> ：容器网络发现</li><li><code>4789</code> ：容器网络入口</li></ul><h2 id="Swarm"><a href="#Swarm" class="headerlink" title="Swarm"></a><strong>Swarm</strong></h2><h3 id="创建Swarm"><a href="#创建Swarm" class="headerlink" title="创建Swarm"></a><strong>创建Swarm</strong></h3><p>创建<strong>Swarm</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr your_manager_ip</span><br></pre></td></tr></table></figure><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image-20220726145701895.6m3xb9smof.webp" alt="https:&#x2F;&#x2F;filebed.fantasyke.cn&#x2F;file&#x2F;blogContent&#x2F;docker&#x2F;image-20220726145701895.6m3xb9smof.webp"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker swarm init --advertise-addr 192.168.2.61</span><br><span class="line">Swarm initialized: current node (rzds6oyb0bgvudzegpscmgiz3) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    docker swarm <span class="built_in">join</span> --token SWMTKN-1-51b7t8whxn8j6mdjt5perjmec9u8qguxq8tern9nill737pra2-ejc5nw5f90oz6xldcbmrl2ztu 192.168.2.61:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run <span class="string">&#x27;docker swarm join-token manager&#x27;</span> and follow the instructions.</span><br></pre></td></tr></table></figure><h3 id="加入Swarm"><a href="#加入Swarm" class="headerlink" title="加入Swarm"></a><strong>加入Swarm</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm <span class="built_in">join</span> --token SWMTKN-1-51b7t8whxn8j6mdjt5perjmec9u8qguxq8tern9nill737pra2-ejc5nw5f90oz6xldcbmrl2ztu 192.168.2.61:2377</span><br></pre></td></tr></table></figure><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image-20220726145636086.3uuv37756b.webp" alt="https:&#x2F;&#x2F;filebed.fantasyke.cn&#x2F;file&#x2F;blogContent&#x2F;docker&#x2F;image-20220726145636086.3uuv37756b.webp"></p><h3 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a><strong>查看节点</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker node <span class="built_in">ls</span></span><br><span class="line">ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class="line">rzds6oyb0bgvudzegpscmgiz3 *   manager    Ready     Active         Leader           20.10.17</span><br><span class="line">rjj3fr5uazywwsfj6ok3f3fw3     worker1    Ready     Active                          20.10.17</span><br><span class="line">6vkvdm3gcxip8htc6cfk8bm3n     worker2    Ready     Active                          20.10.17</span><br></pre></td></tr></table></figure><h3 id="服务约束"><a href="#服务约束" class="headerlink" title="服务约束"></a><strong>服务约束</strong></h3><p>添加<strong>label</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker node update --label-add role=<span class="built_in">env</span> manager</span><br><span class="line"><span class="built_in">sudo</span> docker node update --label-add gct_medpro=gct_medpro zhuji</span><br></pre></td></tr></table></figure><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image-20220726162645325.99tdlmmgzk.webp" alt="https:&#x2F;&#x2F;filebed.fantasyke.cn&#x2F;file&#x2F;blogContent&#x2F;docker&#x2F;image-20220726162645325.99tdlmmgzk.webp"></p><p>给节点也加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# <span class="built_in">sudo</span> docker node update --label-add role=app worker1</span><br><span class="line">worker1</span><br><span class="line">[root@manager ~]# <span class="built_in">sudo</span> docker node update --label-add role=app worker2</span><br><span class="line">worker2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Docker-Swarm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-Swarm速成</title>
      <link href="/posts/ca2309d1.html"/>
      <url>/posts/ca2309d1.html</url>
      
        <content type="html"><![CDATA[<h1 id="在生产环境使用swarm集群的注意事项"><a href="#在生产环境使用swarm集群的注意事项" class="headerlink" title="在生产环境使用swarm集群的注意事项"></a><strong>在生产环境使用swarm集群的注意事项</strong></h1><h2 id="swarm集群的管理"><a href="#swarm集群的管理" class="headerlink" title="swarm集群的管理"></a><strong>swarm集群的管理</strong></h2><p><a href="https://docs.docker.com/engine/swarm/admin_guide/">https://docs.docker.com/engine/swarm/admin_guide/</a></p><h3 id="swarm集群如何使用-docker-componse-yml-部署容器"><a href="#swarm集群如何使用-docker-componse-yml-部署容器" class="headerlink" title="swarm集群如何使用 docker-componse.yml 部署容器"></a><strong>swarm集群如何使用 docker-componse.yml 部署容器</strong></h3><h3 id="如何操作"><a href="#如何操作" class="headerlink" title="如何操作"></a><strong>如何操作</strong></h3><p><a href="https://docs.docker.com/engine/swarm/stack-deploy/">https://docs.docker.com/engine/swarm/stack-deploy/</a></p><h3 id="docker-stack-命令"><a href="#docker-stack-命令" class="headerlink" title="docker stack 命令"></a><strong>docker stack 命令</strong></h3><p><a href="https://docs.docker.com/engine/reference/commandline/stack/">https://docs.docker.com/engine/reference/commandline/stack/</a></p><h3 id="如何编写支持-swarm-的-docker-componse-yml"><a href="#如何编写支持-swarm-的-docker-componse-yml" class="headerlink" title="如何编写支持 swarm 的 docker-componse.yml"></a><strong>如何编写支持 swarm 的 docker-componse.yml</strong></h3><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:3.0.5</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">6</span> <span class="comment"># 启动实例数量</span></span><br><span class="line">      <span class="attr">placement:</span> <span class="comment"># 配置容器实例位置------------</span></span><br><span class="line">        <span class="attr">max_replicas_per_node:</span> <span class="number">2</span> <span class="comment"># 每个节点最多运行容器实例数量</span></span><br><span class="line">        <span class="attr">constraints:</span> <span class="comment"># 将容器分配到匹配标签的节点运行</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;node.role==manager&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;engine.labels.operatingsystem==ubuntu 18.04&quot;</span></span><br><span class="line">        <span class="attr">preferences:</span> <span class="comment"># 将任务平均分配到不同类别的节点上</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">spread:</span> <span class="string">node.labels.zone</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="comment"># 资源限制------------</span></span><br><span class="line">        <span class="attr">limits:</span> <span class="comment"># 占用上限</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;0.50&#x27;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">50M</span></span><br><span class="line">        <span class="attr">reservations:</span> <span class="comment"># 启动占用</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;0.25&#x27;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">20M</span></span><br><span class="line">    <span class="attr">restart_policy:</span> <span class="comment"># 重启策略------------</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span> <span class="comment"># 发生失败时</span></span><br><span class="line">                <span class="attr">delay:</span> <span class="string">5s</span> <span class="comment"># 重启时间间隔</span></span><br><span class="line">        <span class="attr">max_attempts:</span> <span class="number">3</span> <span class="comment">#最大尝试次数        </span></span><br><span class="line">                <span class="attr">window:</span> <span class="string">120s</span> <span class="comment"># 判断是否重启成功的等待时长                </span></span><br><span class="line">    <span class="attr">update_config:</span> <span class="comment"># 滚动更新的配置------------</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span> <span class="comment"># 同时更新的数量</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span> <span class="comment"># 每次更新间隔时间</span></span><br><span class="line">        <span class="attr">monitor:</span> <span class="string">5s</span> <span class="comment"># 每次更新监控失败持续的时长</span></span><br><span class="line">        <span class="attr">failure_action:</span> <span class="string">&#x27;pause&#x27;</span> <span class="comment"># 滚动更新出现错误时执行的操作: continue/rollback/pause</span></span><br><span class="line">        <span class="attr">max_failure_ratio:</span> <span class="comment"># 允许的更新失败率</span></span><br><span class="line">        <span class="attr">order:</span> <span class="string">stop-first</span> <span class="comment"># 更新顺序 stop-first(旧任务在启动新任务之前停止)或start-first(新任务首先启动，运行中的任务会出现短暂重叠)</span></span><br><span class="line">    <span class="attr">rollback_config:</span> <span class="comment"># 更新失败如何回滚------------</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span> <span class="comment"># 每次回滚的数量，如果为0则全部回滚</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span> <span class="comment"># 每次回滚间隔时间</span></span><br><span class="line">        <span class="attr">monitor:</span> <span class="string">5s</span> <span class="comment"># 每次更新监控失败持续的时长</span></span><br><span class="line">        <span class="attr">failure_action:</span> <span class="string">&#x27;pause&#x27;</span> <span class="comment"># 回滚出现错误时执行的操作: continue/rollback/pause</span></span><br><span class="line">        <span class="attr">max_failure_ratio:</span> <span class="comment"># 允许的回滚失败率，默认为0</span></span><br><span class="line">        <span class="attr">order:</span> <span class="string">stop-first</span> <span class="comment"># 回滚顺序 stop-first(旧任务在启动新任务之前停止)或start-first(新任务首先启动，运行中的任务会出现短暂重叠)</span></span><br></pre></td></tr></table></figure><h3 id="docker-stack-不支持的docker-compose配置"><a href="#docker-stack-不支持的docker-compose配置" class="headerlink" title="docker-stack 不支持的docker-compose配置"></a><strong>docker-stack 不支持的docker-compose配置</strong></h3><ul><li><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#build">build</a></li><li><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#cgroup_parent">cgroup_parent</a></li><li><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#container_name">container_name</a></li><li><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#devices">devices</a></li><li><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#tmpfs">tmpfs</a></li><li><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#external_links">external_links</a></li><li><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#links">links</a></li><li><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#network_mode">network_mode</a></li><li><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#restart">restart</a></li><li><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#security_opt">security_opt</a></li><li><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#userns_mode">userns_mode</a></li></ul><h2 id="节点管理"><a href="#节点管理" class="headerlink" title="节点管理"></a><strong>节点管理</strong></h2><blockquote><p>更多高级操作：</p></blockquote><ul><li><a href="https://docs.docker.com/engine/swarm/join-nodes/">给 Swarm 添加节点</a></li><li><a href="https://docs.docker.com/engine/swarm/manage-nodes/">管理集群中的节点</a></li></ul><h3 id="创建一个新的-Manager-Node"><a href="#创建一个新的-Manager-Node" class="headerlink" title="创建一个新的 Manager Node"></a><strong>创建一个新的 Manager Node</strong></h3><p>使用</p><p><code>docker swarm init</code> 命令创建一个 Manager Node.</p><ul><li><code>-advertise-addr</code> 参数将 Manager Node 监听的IP设置为：</li></ul><p><code>192.168.99.100</code>.</p><blockquote><p>注意，使用</p></blockquote><ul><li><code>-advertise-addr</code> 默认监听的端口为</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2377</span></span><br></pre></td></tr></table></figure><p>swarm 中的其他 Node 必须能访问 Manager Node 的 IP.</p><p>输出包括将新节点加入 swarm 的命令。根据</p><ul><li><code>-token</code> 标志的值，节点将作为Master或Worker加入。</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init <span class="literal">--advertise-addr</span> ManagerIP地址</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@u2004:/home/ubuntu<span class="comment"># docker swarm init --advertise-addr 192.168.1.80</span></span><br><span class="line">Swarm initialized: current node (<span class="number">9</span>nxycsrinzgh5bgqwfus2ia8<span class="built_in">r</span>) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line"> docker swarm join <span class="literal">--token</span> SWMTKN<span class="literal">-1-5qv7t73fvawvh795ckh3nxl9vnyo2hwwsqnnjwqyav3spj7ufu-1i7wir7oc3g9fh7yidg19i8p5</span> <span class="number">192.168</span>.<span class="number">1.80</span>:<span class="number">2377</span></span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run <span class="string">&#x27;docker swarm join-token manager&#x27;</span> and follow the instructions.</span><br></pre></td></tr></table></figure><p><code>docker swarm join-token manager</code> 命令用于获取添加新的 Manager Node 的命令参数</p><p><code>docker swarm join-token worker</code> 命令用于获取添加新的 Worker Node 的命令参数</p><blockquote><p>在生产环境 Manager Node 不推荐运行任何容器实例，但是 Swarm 调度器会分配给Manager Node，</p></blockquote><blockquote><p>因此我们可以通过 禁用节点 告诉 Swarm 调度器不要分配给 Manager Node 任何容器实例。</p></blockquote><h3 id="查看-swarm-当前状态"><a href="#查看-swarm-当前状态" class="headerlink" title="查看 swarm 当前状态"></a><strong>查看 swarm 当前状态</strong></h3><p>docker info</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">root@u2004:/home/ubuntu# docker info</span><br><span class="line">Client:</span><br><span class="line">Context: default</span><br><span class="line">Debug Mode: false</span><br><span class="line">Plugins:</span><br><span class="line">app: Docker App (Docker Inc., v0.9.1-beta3)</span><br><span class="line">buildx: Build with BuildKit (Docker Inc., v0.6.3-docker)</span><br><span class="line">scan: Docker Scan (Docker Inc., v0.9.0)</span><br><span class="line">Server:</span><br><span class="line">Swarm: active</span><br><span class="line">NodeID: 9nxycsrinzgh5bgqwfus2ia8r</span><br><span class="line">Is Manager: true</span><br><span class="line">ClusterID: lu8frg6np6dmqf3bjr7jyl628</span><br><span class="line">Managers: 1</span><br><span class="line">Nodes: 1</span><br><span class="line">Default Address Pool: 10.0.0.0/8</span><br><span class="line">SubnetSize: 24</span><br><span class="line">Data Path Port: 4789</span><br><span class="line">Orchestration:</span><br><span class="line">Task History Retention Limit: 5</span><br><span class="line">Raft:</span><br><span class="line">Snapshot Interval: 10000</span><br><span class="line">Number of Old Snapshots to Retain: 0</span><br><span class="line">Heartbeat Tick: 1</span><br><span class="line">Election Tick: 10</span><br><span class="line">Dispatcher:</span><br><span class="line">Heartbeat Period: 5 seconds</span><br><span class="line">CA Configuration:</span><br><span class="line">Expiry Duration: 3 months</span><br><span class="line">Force Rotate: 0</span><br><span class="line">Autolock Managers: false</span><br><span class="line">Root Rotation In Progress: false</span><br><span class="line">Node Address: 192.168.1.80</span><br><span class="line">Manager Addresses:</span><br><span class="line">192.168.1.80:2377</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看节点列表"><a href="#查看节点列表" class="headerlink" title="查看节点列表"></a><strong>查看节点列表</strong></h3><p>使用以下命令查看节点列表，节点</p><p><code>ID</code> 旁边的 <code>*</code> 表示你当前已经连接到此节点</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@u2004:/home/ubuntu<span class="comment"># docker node ls</span></span><br><span class="line">ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class="line"><span class="number">9</span>nxycsrinzgh5bgqwfus2ia8<span class="built_in">r</span> *   u2004      Ready     Active         Leader           <span class="number">20.10</span>.<span class="number">11</span></span><br></pre></td></tr></table></figure><h3 id="查看节点详细信息"><a href="#查看节点详细信息" class="headerlink" title="查看节点详细信息"></a><strong>查看节点详细信息</strong></h3><p>使用以下命令查看节点的详情：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node inspect <span class="literal">--pretty</span> 节点名称</span><br></pre></td></tr></table></figure><h3 id="添加新的-Manager-Node-到集群"><a href="#添加新的-Manager-Node-到集群" class="headerlink" title="添加新的 Manager Node 到集群"></a><strong>添加新的 Manager Node 到集群</strong></h3><p>在另一台机器运行 <code>docker swarm join</code> 命令加入已存在的集群中</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@u2004:/home/ubuntu<span class="comment"># docker swarm join-token managerTo add a manager to this swarm, run the following command:    docker swarm join --token SWMTKN-1-5qv7t73fvawvh795ckh3nxl9vnyo2hwwsqnnjwqyav3spj7ufu-ca1v0jiu9xwb6o20dqqajl4n1 192.168.1.80:2377</span></span><br></pre></td></tr></table></figure><p>Manager Node 必须是单数（Raft），生产环境推荐3台或5台作为 Manager Node</p><blockquote><p>docker swarm join-token manager 命令用于获取添加新的 Manager Node 的命令参数</p></blockquote><h3 id="添加新的-Worker-Node-到集群"><a href="#添加新的-Worker-Node-到集群" class="headerlink" title="添加新的 Worker Node 到集群"></a><strong>添加新的 Worker Node 到集群</strong></h3><p>在另一台机器运行</p><p><code>docker swarm join</code> 命令加入已存在的集群中</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join <span class="literal">--token</span> SWMTKN<span class="literal">-1-5qv7t73fvawvh795ckh3nxl9vnyo2hwwsqnnjwqyav3spj7ufu-1i7wir7oc3g9fh7yidg19i8p5</span> <span class="number">192.168</span>.<span class="number">1.80</span>:<span class="number">2377</span></span><br></pre></td></tr></table></figure><blockquote><p>docker swarm join-token worker 命令用于获取添加新的 Worker Node 的命令参数</p></blockquote><h3 id="禁用节点"><a href="#禁用节点" class="headerlink" title="禁用节点"></a><strong>禁用节点</strong></h3><p>在某些情况下我们想要将某个节点禁用或将节点中运行的容器清空，使用以下命令即可实现：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node update <span class="literal">--availability</span> drain 节点名称</span><br></pre></td></tr></table></figure><blockquote><p>被禁用的节点仍然存在集群中，只是不会被swarm调度运行容器实例</p></blockquote><h3 id="启用节点"><a href="#启用节点" class="headerlink" title="启用节点"></a><strong>启用节点</strong></h3><p>禁用节点后使用以下命令即可启用节点：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node update <span class="literal">--availability</span> active 节点名称</span><br></pre></td></tr></table></figure><h3 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a><strong>更新节点</strong></h3><p>更新节点</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node update <span class="literal">--label-add</span> foo <span class="literal">--label-add</span> bar=baz 节点名称</span><br></pre></td></tr></table></figure><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a><strong>服务管理</strong></h2><blockquote><p>更多高级操作：</p></blockquote><blockquote><p><a href="https://docs.docker.com/engine/reference/commandline/service/">https://docs.docker.com/engine/reference/commandline/service/</a></p></blockquote><blockquote><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#placement">https://docs.docker.com/compose/compose-file/compose-file-v3/#placement</a></p></blockquote><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a><strong>运行服务</strong></h3><p>连接到 Manager Node，使用</p><p><code>docker service create</code> 命令创建服务.</p><p>例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service create <span class="literal">--replicas</span> <span class="number">1</span> <span class="literal">--name</span> helloworld alpine ping docker.com</span><br></pre></td></tr></table></figure><ul><li><code>-name</code> 指定服务名称为 <code>helloworld</code></li><li><code>-replicas</code> 指定服务运行实例数量为 <code>1</code></li><li>参数 <code>alpine</code> 表示运行的镜像为 <code>Alpine Linux</code></li><li>参数 <code>ping docker.com</code> 表示在容器中执行的命令</li></ul><h3 id="查看运行的服务"><a href="#查看运行的服务" class="headerlink" title="查看运行的服务"></a><strong>查看运行的服务</strong></h3><p>在 Manager Node 运行此命令查看正在运行的服务列表：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@u2004:/home/ubuntu<span class="comment"># docker service ls</span></span><br><span class="line">ID             NAME         MODE         REPLICAS   IMAGE           PORTS</span><br><span class="line">jkj80hnr73rn   helloworld   replicated   <span class="number">1</span>/<span class="number">1</span>        alpine:latest</span><br></pre></td></tr></table></figure><h3 id="查看服务的详细信息"><a href="#查看服务的详细信息" class="headerlink" title="查看服务的详细信息"></a><strong>查看服务的详细信息</strong></h3><p>在 Manager Node 运行此命令查看服务的运行详情：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service inspect <span class="literal">--pretty</span> 服务名称</span><br></pre></td></tr></table></figure><blockquote><p>参数 –pretty 表示返回格式化后的详细信息，不加这个参数则打印 JSON 格式的信息</p></blockquote><h3 id="查看服务运行在那些节点"><a href="#查看服务运行在那些节点" class="headerlink" title="查看服务运行在那些节点"></a><strong>查看服务运行在那些节点</strong></h3><p>在 Manager Node 使用此命令查看服务都在那些节点运行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service <span class="built_in">ps</span> 服务名称</span><br></pre></td></tr></table></figure><blockquote><p>docker-swarm 中的服务实例由 swarm 调度。因此有部分服务的实例运行在 Manager Node 是正常表现。</p></blockquote><h3 id="伸缩服务"><a href="#伸缩服务" class="headerlink" title="伸缩服务"></a><strong>伸缩服务</strong></h3><p>docker-swarm 支持对服务实例进行动态伸缩，使用以下命令即可实现：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale 服务名称=实例数量(最少为<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@u2004:/home/ubuntu<span class="comment"># docker service scale helloworld=2</span></span><br><span class="line">helloworld scaled to <span class="number">2</span></span><br><span class="line">overall progress: <span class="number">2</span> out of <span class="number">2</span> tasks</span><br><span class="line"><span class="number">1</span>/<span class="number">2</span>: running   [==================================================&gt;]</span><br><span class="line"><span class="number">2</span>/<span class="number">2</span>: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure><h3 id="删除服务"><a href="#删除服务" class="headerlink" title="删除服务"></a><strong>删除服务</strong></h3><p>在 Manager Node 使用以下命令删除服务：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service <span class="built_in">rm</span> 服务名称</span><br></pre></td></tr></table></figure><blockquote><p>注意，因为是集群的原因，集群中的Node将会存在延迟的情况，想确认服务是否被删除成功请使用 docker service ls 查看</p></blockquote><h3 id="滚动更新服务"><a href="#滚动更新服务" class="headerlink" title="滚动更新服务"></a><strong>滚动更新服务</strong></h3><h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a><strong>创建服务</strong></h3><p>进入 Manager Node 创建一个redis服务用于演示滚动更新：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  <span class="literal">--replicas</span> <span class="number">3</span> \</span><br><span class="line">  <span class="literal">--name</span> redis \</span><br><span class="line">  <span class="literal">--update-delay</span> <span class="number">10</span>s \</span><br><span class="line">  redis:<span class="number">3.0</span>.<span class="number">6</span></span><br></pre></td></tr></table></figure><blockquote><p>–update-dely 表示更新服务或服务集之间的时间延迟：1h10m3s，表示延迟1小时10分钟3秒。</p></blockquote><blockquote><p>调度器默认一次更新一个任务，可以通过 –update-parallelism 参数配置调度器同时更新服务数量。</p></blockquote><blockquote><p>默认情况下，当单个服务更新返回状态为 RUNNING，调度器会让另一个服务更新，直到所有服务都更新完成。</p></blockquote><blockquote><p>如果在更新期间某个服务返回 FAILED ，调度器会暂停更新，可以通过 –update-failure-action 参数配置控制当服务更新发生错误时的行为。</p></blockquote><h3 id="检查服务状态"><a href="#检查服务状态" class="headerlink" title="检查服务状态"></a><strong>检查服务状态</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service inspect <span class="literal">--pretty</span> redis</span><br></pre></td></tr></table></figure><h3 id="更新服务"><a href="#更新服务" class="headerlink" title="更新服务"></a><strong>更新服务</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service update <span class="literal">--image</span> redis:<span class="number">3.0</span>.<span class="number">7</span> redis</span><br></pre></td></tr></table></figure><blockquote><p>默认情况下，调度器将按以下方式更新服务：</p></blockquote><ul><li>停止一个服务</li><li>更新已停止的服务</li><li>启动已更新的服务</li></ul><blockquote><p>如果更新的服务返回 RUNNING ，等待指定的延迟时间后开始更新下一个服务</p></blockquote><blockquote><p>如果更新期间某个服务返回 FAILED ，则暂停服务更新</p></blockquote><h3 id="重新启动暂停的服务更新"><a href="#重新启动暂停的服务更新" class="headerlink" title="重新启动暂停的服务更新"></a><strong>重新启动暂停的服务更新</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service update redis</span><br></pre></td></tr></table></figure><blockquote><p>为了避免重复某些失败的更新，可以重新指定更新参数</p></blockquote><h3 id="查看服务的滚动更新"><a href="#查看服务的滚动更新" class="headerlink" title="查看服务的滚动更新"></a><strong>查看服务的滚动更新</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service <span class="built_in">ps</span> redis</span><br></pre></td></tr></table></figure><blockquote><p>在swarm更新完成所有服务之前，你可以看到一些服务的镜像为 redis:3.0.6，另一些为 redis:3.0.7</p></blockquote><h3 id="路由网格"><a href="#路由网格" class="headerlink" title="路由网格"></a><strong>路由网格</strong></h3><p>docker swarm支持路由网格。路由网格让处于swarm集群中的任意一个节点都可以作为被访问的入口，即使此节点没有运行任何服务。</p><p>要在 swarm 集群中使用使用路由网格，首先需要开启加入swarm集群的节点的以下端口：</p><ul><li><code>7946</code> ：容器网络发现</li><li><code>4789</code> ：容器网络入口</li></ul><p>其次需要将节点服务实例的端口公开，使服务可以被外部访问（例如使用nginx做负载均衡）</p><h3 id="服务原理"><a href="#服务原理" class="headerlink" title="服务原理"></a><strong>服务原理</strong></h3><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.2krxyctvov.webp" alt="1.2rv5sbkjzm.png"></p><h3 id="创建服务时公开端口"><a href="#创建服务时公开端口" class="headerlink" title="创建服务时公开端口"></a><strong>创建服务时公开端口</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --name &lt;SERVICE-NAME&gt; \</span><br><span class="line">  --publish published=&lt;PUBLISHED-PORT&gt;,target=&lt;CONTAINER-PORT&gt; \</span><br><span class="line">  &lt;IMAGE&gt;</span><br></pre></td></tr></table></figure><blockquote><p>–publish 与 -p 效果相同，其中 –published 值为公布的端口，target 值为容器内部监听的端口。–publish 的写法</p></blockquote><h3 id="更新现有服务的公开端口"><a href="#更新现有服务的公开端口" class="headerlink" title="更新现有服务的公开端口"></a><strong>更新现有服务的公开端口</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service update \</span><br><span class="line">  <span class="literal">--publish-add</span> published=&lt;PUBLISHED<span class="literal">-PORT</span>&gt;,target=&lt;CONTAINER<span class="literal">-PORT</span>&gt; \</span><br><span class="line">  &lt;SERVICE&gt;</span><br></pre></td></tr></table></figure><h3 id="查看服务发布的端口"><a href="#查看服务发布的端口" class="headerlink" title="查看服务发布的端口"></a><strong>查看服务发布的端口</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service inspect <span class="literal">--format</span>=<span class="string">&quot;&#123;&#123;json .Endpoint.Spec.Ports&#125;&#125;&quot;</span> 服务名称</span><br></pre></td></tr></table></figure><h3 id="只公开TCP或UDP端口"><a href="#只公开TCP或UDP端口" class="headerlink" title="只公开TCP或UDP端口"></a><strong>只公开TCP或UDP端口</strong></h3><p>默认情况下公开端口都是 TCP 端口，你可以通过参数配置公开端口的类型：</p><h3 id="仅TCP"><a href="#仅TCP" class="headerlink" title="仅TCP"></a><strong>仅TCP</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service create <span class="literal">--name</span> dns<span class="literal">-cache</span> \</span><br><span class="line">  <span class="literal">--publish</span> published=<span class="number">53</span>,target=<span class="number">53</span> \</span><br><span class="line">  dns<span class="literal">-cache</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service create <span class="literal">--name</span> dns<span class="literal">-cache</span> \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">53</span>:<span class="number">53</span> \</span><br><span class="line">  dns<span class="literal">-cache</span></span><br></pre></td></tr></table></figure><h3 id="仅UDP"><a href="#仅UDP" class="headerlink" title="仅UDP"></a><strong>仅UDP</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service create <span class="literal">--name</span> dns<span class="literal">-cache</span> \</span><br><span class="line">  <span class="literal">--publish</span> published=<span class="number">53</span>,target=<span class="number">53</span>,protocol=udp \</span><br><span class="line">  dns<span class="literal">-cache</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service create <span class="literal">--name</span> dns<span class="literal">-cache</span> \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">53</span>:<span class="number">53</span>/udp \</span><br><span class="line">  dns<span class="literal">-cache</span></span><br></pre></td></tr></table></figure><h3 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP+UDP"></a><strong>TCP+UDP</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create <span class="literal">--name</span> dns<span class="literal">-cache</span> \</span><br><span class="line">  <span class="literal">--publish</span> published=<span class="number">53</span>,target=<span class="number">53</span> \</span><br><span class="line">  <span class="literal">--publish</span> published=<span class="number">53</span>,target=<span class="number">53</span>,protocol=udp \</span><br><span class="line">  dns<span class="literal">-cache</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create <span class="literal">--name</span> dns<span class="literal">-cache</span> \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">53</span>:<span class="number">53</span> \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">53</span>:<span class="number">53</span>/udp \</span><br><span class="line">  dns<span class="literal">-cache</span></span><br></pre></td></tr></table></figure><h3 id="绕过路由网格"><a href="#绕过路由网格" class="headerlink" title="绕过路由网格"></a><strong>绕过路由网格</strong></h3><p>要绕过 swarm 集群的路由网格，需要使用</p><ul><li><code>-publish</code> 参数设置 <code>mode</code> 值为<code>host</code>。</li></ul><p>下面的命令使用</p><p><code>host</code> 模式创建全局服务并绕过路由网格：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create <span class="literal">--name</span> dns<span class="literal">-cache</span> \</span><br><span class="line">  <span class="literal">--publish</span> published=<span class="number">53</span>,target=<span class="number">53</span>,protocol=udp,mode=host \</span><br><span class="line">  <span class="literal">--mode</span> global \</span><br><span class="line">  dns<span class="literal">-cache</span></span><br></pre></td></tr></table></figure><blockquote><p>绕过路由网格后的注意事项：</p></blockquote><ul><li>如果你访问未运行服务的节点，则无法访问此服务</li><li>如果你希望在每个节点运行多个服务，就不能指定静态的端口。要么就允许docker随机分配一个公开端口（通过置空 <code>published</code> 参数的值实现）</li></ul><h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a><strong>配置管理</strong></h3><h3 id="普通配置"><a href="#普通配置" class="headerlink" title="普通配置"></a><strong>普通配置</strong></h3><p><a href="https://docs.docker.com/engine/swarm/configs/">https://docs.docker.com/engine/swarm/configs/</a></p><h3 id="加密配置"><a href="#加密配置" class="headerlink" title="加密配置"></a><strong>加密配置</strong></h3><p><a href="https://docs.docker.com/engine/swarm/secrets/">https://docs.docker.com/engine/swarm/secrets/</a></p><h3 id="锁定集群"><a href="#锁定集群" class="headerlink" title="锁定集群"></a><strong>锁定集群</strong></h3><blockquote><p><a href="https://docs.docker.com/engine/swarm/swarm_manager_locking/">https://docs.docker.com/engine/swarm/swarm_manager_locking/</a></p></blockquote><p>默认情况下，swarm manager 使用的 Raft 日志在磁盘上是加密的。这种静态加密保护您的服务配置和数据免受攻击者访问加密的 Raft 日志。引入此功能的原因之一是支持<a href="https://docs.docker.com/engine/swarm/secrets/">Docker 机密</a>功能。</p><p>当 Docker 重新启动时，用于加密 swarm 节点之间通信的 TLS 密钥和用于加密和解密磁盘上的 Raft 日志的密钥都被加载到每个管理器节点的内存中。Docker 有能力保护双向 TLS 加密密钥和用于加密和解密 Raft 静态日志的密钥，允许您拥有这些密钥并要求手动解锁您的管理器。此功能称为<em>自动锁定</em>。</p><p>当 Docker 重新启动时，您必须先 <a href="https://docs.docker.com/engine/swarm/swarm_manager_locking/#unlock-a-swarm">解锁 swarm</a>，使用 Docker 在 swarm 被锁定时生成的*密钥加密密钥。*您可以随时轮换此密钥加密密钥。</p><blockquote><p>注意：当新节点加入 swarm 时，您不需要解锁 swarm，因为密钥通过双向 TLS 传播给它。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Docker-Swarm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩大虚拟机配置和重启服务</title>
      <link href="/posts/954bbebf.html"/>
      <url>/posts/954bbebf.html</url>
      
        <content type="html"><![CDATA[<ol><li>首先在进行操作之前拍快照进行备份</li><li>关机虚拟机</li><li>选择编辑进行配置，比如cpu和内存之类的。</li><li>设置完之后重启，输入账号密码</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker --查看当前dockerr守护程序是否开启</span><br><span class="line">如果Docker守护程序正在运行，则此命令应该显示其当前状态为“active (running)”。</span><br><span class="line">如果Docker守护程序没有运行，则此命令应该显示其当前状态为 Active: inactive (dead)</span><br><span class="line">您可以使用以下命令启动它：</span><br><span class="line">sudo systemctl start docker --重启docker守护程序</span><br></pre></td></tr></table></figure><ol><li><p>这个时候如果虚拟机上配置有数据库，redis等服务的话还需要重启一下他们。</p><p> <img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/b155476e1edceff352e6033b5000a01d.png" alt="1680271847793-dd0bc695-d14a-4e7e-bcb0-5f638c375be9.png"></p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -查看当前文件夹文件</span><br><span class="line">cd env  --进入env文件夹</span><br></pre></td></tr></table></figure><p> <img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/943e451896508f194c5136ed3ac3c4d2.png" alt="1680271874710-b9a025b2-e852-4a64-a601-3a13a4c10067.png"></p></li><li><p>带绿色的就是可以直接执行的，灰色的是没有权限，没有权限会出现以下提示。</p><p> <img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/83cc199720f4316d39d11148efbf91fc.png" alt="1680271899896-d7067a21-02c4-4954-8ecd-0b09f7ae22dc.png"></p></li><li><p>输入chmod u+x compose-status.sh</p><p> <img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/da13f95b532407ca86cb8c6386013413.png" alt="1680271887623-1c13161b-8180-4da5-b6ba-1aaa5f99c0b5.png"></p></li><li><p>然后就可以启动文件。</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./compose-start.sh</span><br></pre></td></tr></table></figure><p> <img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/94222b4fc6f0d5677fb673b85838a3de.png" alt="1680271914972-828e7134-d7e3-4dd0-b138-7a74ceb7c6b6.png"></p></li><li><p>查看是否启动成功</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">ps</span></span><br></pre></td></tr></table></figure><p> <img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/ce079dce13e0abcd27dc714bbe9d6e8f.png" alt="1680271970700-c24b6f3c-67bd-4902-9d8b-c209c7b3a5ee.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows安装MongoDB</title>
      <link href="/posts/1348e315.html"/>
      <url>/posts/1348e315.html</url>
      
        <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网下载，选择对应的版本，默认是最新当前版本：<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>直接打开<code>.msi</code>格式的安装包，选择<code>custom</code>模式安装，选中<code>install mongoDB compass</code>取消勾选，其他的一键点<code>next</code>,即可安装完毕。</li><li>   打开安装路径下的<code>bin</code>目录，修改<code>mongod.cfg</code>核心配置文件到如下文档：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">E:\mongodb\data\db</span></span><br><span class="line">  <span class="attr">journal:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span>  <span class="string">E:\mongodb\log\mongod.log</span></span><br><span class="line"></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">authorization:</span> <span class="string">disabled</span></span><br></pre></td></tr></table></figure><p>添加bin目录的路径作为环境变量；<br>管理员模式下启动<code>命令控制台</code>，输入<code>net stop mongodb</code>关闭服务；<br>管理员模式下启动<code>命令控制台</code>，输入<code>net start mongodb</code>启动服务；<br>命令行敲<code>mongo</code><br>命令行敲<code>user test</code><br>命令行敲<code>db.createUser(&#123; user: &quot;useradmin&quot;, pwd: &quot;useradmin&quot;, roles: [&#123; role: &quot;readWrite&quot;, db: &quot;test&quot; &#125;] &#125;)</code>添加新用户。<br>打开安装路径下的<code>bin</code>目录，修改<code>mongod.cfg</code>核心配置文件到如下文档：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">E:\mongodb\data\db</span></span><br><span class="line">  <span class="attr">journal:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span>  <span class="string">E:\mongodb\log\mongod.log</span></span><br><span class="line"></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><p>管理员模式下启动<code>命令控制台</code>，输入<code>net stop mongodb</code>关闭服务；<br>管理员模式下启动<code>命令控制台</code>，输入<code>net start mongodb</code>启动服务；<br>命令行敲<code>mongo -u useradmin -p useradmin test</code>进入test数据库。<br>安装启用完毕。</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net Core自定义规范响应的中间件</title>
      <link href="/posts/a03fee4c.html"/>
      <url>/posts/a03fee4c.html</url>
      
        <content type="html"><![CDATA[<p>在本文中，我们将介绍如何使用 .NET Core 中的中间件来自定义规范响应，以便在 API 调用时返回统一的格式和错误信息。中间件是一种可以在请求和响应管道中执行逻辑的软件组件，它可以对请求或响应进行修改、拦截或处理。我们将使用一个简单的示例来演示如何创建和使用自定义规范响应的中间件。</p><p>首先，我们需要创建一个类来表示规范响应的格式，这个类可以包含以下属性：</p><ul><li><code>Code</code>：响应的状态码，例如 200 表示成功，400 表示客户端错误，500 表示服务器错误等。</li><li><code>Message</code>：响应的消息，例如 “OK” 表示成功，”Bad Request” 表示客户端错误，”Internal Server Error” 表示服务器错误等。</li><li><code>Data</code>：响应的数据，可以是任意类型的对象，例如用户信息、产品列表、订单详情等。</li></ul><p>这个类的代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiResponse</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> Success &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Message &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> Data &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApiResponse</span>(<span class="params"><span class="built_in">bool</span> success, <span class="built_in">string</span> message, <span class="built_in">object</span> data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Success = success;</span><br><span class="line">        Message = message;</span><br><span class="line">        Data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApiResponse</span>(<span class="params"><span class="built_in">bool</span> success, <span class="built_in">string</span> message</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">this</span>(<span class="params">success, message, <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApiResponse</span>(<span class="params"><span class="built_in">bool</span> success</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">this</span>(<span class="params">success, <span class="literal">null</span>, <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>接下来，我们需要创建一个中间件类来实现自定义规范响应的逻辑，这个类需要有以下特点：</p><ul><li>接收一个 <code>RequestDelegate</code> 类型的参数，表示下一个中间件或终端处理程序。</li><li>实现一个 <code>InvokeAsync</code> 方法，接收一个 <code>HttpContext</code> 类型的参数，表示当前请求的上下文。</li><li>在 <code>InvokeAsync</code> 方法中，使用 <code>await next(context) </code>来调用下一个中间件或终端处理程序，并获取其返回的响应。</li><li>在 <code>InvokeAsync</code> 方法中，根据响应的状态码和内容来构造一个 <code>ApiResponse</code>对象，并将其序列化为 JSON 格式。</li><li>在 <code>InvokeAsync </code>方法中，修改响应的内容类型为 <code>application/json</code>，并将 JSON 格式的 <code>ApiResponse</code>写入到响应体中。</li><li><code>GetStatusCodeMessage()</code>根据响应状态给出信息</li><li><code>GetResponseData()</code>获取其返回的响应</li></ul><h3 id="CustomResponseMiddleware"><a href="#CustomResponseMiddleware" class="headerlink" title="CustomResponseMiddleware"></a>CustomResponseMiddleware</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomResponseMiddleware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> RequestDelegate _next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomResponseMiddleware</span>(<span class="params">RequestDelegate next</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">InvokeAsync</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> originalBodyStream = context.Response.Body;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> responseBody = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            context.Response.Body = responseBody;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">await</span> _next(context);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (context.Response.StatusCode &gt;= <span class="number">400</span> &amp;&amp; context.Response.StatusCode &lt;= <span class="number">599</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                context.Response.ContentType = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> response = <span class="keyword">new</span> ApiResponse</span><br><span class="line">                &#123;</span><br><span class="line">                    Success = <span class="literal">false</span>,</span><br><span class="line">                    Message = GetStatusCodeMessage(context.Response.StatusCode),</span><br><span class="line">                    Data = <span class="keyword">await</span> GetResponseData(context.Response)</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> jsonResponse = JsonConvert.SerializeObject(response);</span><br><span class="line">                <span class="keyword">await</span> context.Response.WriteAsync(jsonResponse, Encoding.UTF8);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                context.Response.ContentType = <span class="string">&quot;application/json&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> response = <span class="keyword">new</span> ApiResponse</span><br><span class="line">                &#123;</span><br><span class="line">                    Success = <span class="literal">true</span>,</span><br><span class="line">                    Message = GetStatusCodeMessage(context.Response.StatusCode),</span><br><span class="line">                    Data = <span class="keyword">await</span> GetResponseData(context.Response)</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> jsonResponse = JsonConvert.SerializeObject(response);</span><br><span class="line">                <span class="keyword">await</span> context.Response.WriteAsync(jsonResponse, Encoding.UTF8);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">await</span> responseBody.CopyToAsync(originalBodyStream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="GetStatusCodeMessage"><a href="#GetStatusCodeMessage" class="headerlink" title="GetStatusCodeMessage()"></a>GetStatusCodeMessage()</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetStatusCodeMessage</span>(<span class="params"><span class="built_in">int</span> statusCode</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">switch</span> (statusCode)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">201</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;Created&quot;</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">204</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;No Content&quot;</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;Bad Request&quot;</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;Unauthorized&quot;</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;Forbidden&quot;</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;Not Found&quot;</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;Internal Server Error&quot;</span>;</span><br><span class="line">           <span class="literal">default</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;Unknown Status Code&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="GetResponseData"><a href="#GetResponseData" class="headerlink" title="GetResponseData()"></a>GetResponseData()</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task&lt;<span class="built_in">object</span>&gt; <span class="title">GetResponseData</span>(<span class="params">HttpResponse response</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> body = <span class="keyword">await</span> <span class="keyword">new</span> StreamReader(response.Body).ReadToEndAsync();</span><br><span class="line">        response.Body.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> JsonConvert.DeserializeObject(body);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (JsonReaderException)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> &#123; Message = body &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们创建了一个名为 CustomResponseMiddleware 的中间件。该中间件拦截每个响应，并根据需要修改响应格式。具体来说，如果响应的状态码为 4xx 或5xx，则中间件将返回一个包含错误消息和数据的 ApiResponse 对象；否则，中间件将返回一个包含成功消息和数据的 ApiResponse 对象。</p><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><p>定义常用的类可以帮助我们标准化 ASP.NET Core 应用程序中的响应格式，提高代码重用性，并使前端更加轻松地处理所有响应。</p><p>除了 ApiResponse 类之外，还可以定义其他常用类，如 ApiError 类、ApiResponse<T> 泛型类等，以满足不同的需求。例如，ApiError 类可以用于标准化应用程序中的错误响应格式，ApiResponse<T> 泛型类可以用于在响应中包含更具体的数据类型。</p><p>下面是 ApiError 类的示例代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApiError</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StatusCode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Message &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> JsonConvert.SerializeObject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ApiError</code> 类包含两个属性：<code>StatusCode</code> 和 <code>Message</code>。<code>StatusCode </code>属性指示错误的状态码，Message 属性包含有关错误的消息。</p><p>使用 ApiError 类可以帮助我们标准化应用程序中的错误响应格式。例如，在某些情况下，我们可能需要返回一个包含单个错误消息的响应，而在其他情况下，我们可能需要返回一个包含多个错误消息的响应。通过使用 ApiError 类，我们可以在应用程序中统一处理这些情况，并返回一个标准的错误响应格式。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过使用 ASP.NET Core 中间件和常用类，我们可以自定义 ASP.NET Core 应用程序中的响应格式，并标准化应用程序中的响应格式。这可以提高代码重用性，并使前端更加轻松地处理所有响应。在开发 ASP.NET Core 应用程序时，我们应该始终考虑使用中间件和常用类来提高代码的可读性、可维护性和可重用性。</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET Core </tag>
            
            <tag> Middleware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串 --- 不可变性与驻留池</title>
      <link href="/posts/37820.html"/>
      <url>/posts/37820.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>面试中，常会问道，在大数据量的字符串拼接情况，为什么 <code>StringBuilder</code> 性能比直接字符串拼接更好？</p><p>主要原因就是 <code>string</code> 是不可变类型，每次操作都会创建新的字符串对象，频繁操作会导致内存频繁的分配和回收，就会降低性能， 而 <code>StringBuilder</code> 是可变类型，它允许对字符串进行原地修改，无需每次都创建新对象，其内部使用一个缓冲区来存储字符，可以高效地执行字符串操作，如添加、插入、删除等。</p><p>面试题就不多说了，既然这里已经提到了字符串性能，那我们来说一说保证字符串的性能、内存效率和安全性的两大门神：</p><ul><li>字符串的不可变性</li><li>字符串驻留池</li></ul><span id="more"></span><h2 id="原理与关系"><a href="#原理与关系" class="headerlink" title="原理与关系"></a>原理与关系</h2><p>C# 中的字符串驻留池（<strong>String Interning Pool</strong>）是一个关键的内存管理概念，旨在提高字符串的性能和内存效率。字符串驻留池是一个特殊的内存区域，用于存储字符串字面值的唯一实例，以减少内存使用和提高性能。</p><h3 id="字符串字面值"><a href="#字符串字面值" class="headerlink" title="字符串字面值"></a>字符串字面值</h3><p>字符串字面值是指由双引号括起来的字符序列，比如：”Hello, World!”。字符串字面值通常用于声明字符串变量或进行字符串操作。这些字符串字面值在编译时被解析，并根据它们的值存储在内存中。</p><p>下面声明了两个字符串字面值：</p><p>“hello”;<br> String s2 &#x3D; “world”;</p><h3 id="字符串不可变性"><a href="#字符串不可变性" class="headerlink" title="字符串不可变性"></a>字符串不可变性</h3><p>字符串不可变，这意味着一旦创建，字符串的内容不能被更改。这种不可变性是为了确保字符串的安全性和可靠性。当你对字符串进行操作时，实际上是创建了新的字符串对象，而原始字符串保持不变。这对于多线程和内存管理非常重要。</p><p>string originalString &#x3D; “Hello, World!”; &#x2F;&#x2F; 创建一个字符串</p><p>Console.WriteLine(“原始字符串：” + originalString);</p><p>&#x2F;&#x2F; 尝试修改字符串内容<br>&#x2F;&#x2F; 下面的行将引发编译错误，因为字符串是不可变的<br>&#x2F;&#x2F; originalString[0] &#x3D; ‘M’;</p><p>&#x2F;&#x2F; 创建新字符串而不是修改原始字符串<br>string newString &#x3D; originalString.Replace(‘H’, ‘M’);<br>Console.WriteLine(“修改后的字符串：” + newString);</p><p>Console.WriteLine(“原始字符串：” + originalString); &#x2F;&#x2F; 原始字符串不受影响</p><p>Console.WriteLine(object.ReferenceEquals(originalString, newString)); &#x2F;&#x2F; 不是同一对象</p><p>上述代码输出：</p><p>string s1 &#x3D; “Hello”;<br>string s2 &#x3D; “Hello”;</p><p>Console.WriteLine(object.ReferenceEquals(s1, s1)); &#x2F;&#x2F;输出True</p><p>然而，如果你需要显式地将一个字符串添加到字符串驻留池中，可以使用<code>string.Intern()</code>方法：</p><p>string s1 &#x3D; “Hello”;<br> string s2 &#x3D; “World”;<br> &#x2F;&#x2F; 手动将字符串s2添加到字符串驻留池<br> string internedString &#x3D; string.Intern(s2);<br> &#x2F;&#x2F; 现在s2和internedString都指向相同的字符串对象<br> Console.WriteLine(object.ReferenceEquals(s2, internedString));   &#x2F;&#x2F;输出True</p><h3 id="两者关系"><a href="#两者关系" class="headerlink" title="两者关系"></a>两者关系</h3><p>字符串的不可变性和字符串驻留池之间存在紧密的关系，它们共同作用于C#中的字符串处理和内存管理。<br>这两个概念之间的关系在以下方面体现：</p><ul><li><p><strong>内存共享</strong>：由于字符串的不可变性，可以安全地在字符串之间共享内存实例。字符串的不可变性确保了多个字符串可以指向相同的内存位置，而不必担心数据被修改。字符串驻留池利用这一点，确保相同值的字符串字面值共享相同的内存。</p></li><li><p><strong>性能和内存优化</strong>：由于字符串不可变且字符串驻留池的存在，比较字符串的相等性变得更加高效，因为可以直接比较引用而不必比较字符串内容。这提高了字符串操作的性能，同时减少了内存使用，因为相同值的字符串只需存储一次。</p></li><li><p><strong>共享和复用</strong>：字符串不可变性和字符串驻留池的结合使得相同的字符串字面值可以被多个部分共享和复用，从而减少了内存开销。这对于具有重复字符串值的大型应用程序和处理大量文本数据的情况尤其有益。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上所述，字符串的不可变性和字符串驻留池共同提高了C#中字符串的性能、内存效率和安全性，使得多个部分可以共享相同值的字符串实例，同时确保字符串的内容不会被无意修改。这些概念在C#中的字符串处理中发挥着关键作用。</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NET 实现JWT登录认证</title>
      <link href="/posts/e2cc15a.html"/>
      <url>/posts/e2cc15a.html</url>
      
        <content type="html"><![CDATA[<h1 id="NET-实现JWT登录认证"><a href="#NET-实现JWT登录认证" class="headerlink" title=".NET 实现JWT登录认证"></a>.NET 实现JWT登录认证</h1><p>在ASP.NET Core应用程序中，使用JWT进行身份验证和授权已成为一种流行的方式。JWT是一种安全的方式，用于在客户端和服务器之间传输用户信息。</p><h2 id="添加NuGet包"><a href="#添加NuGet包" class="headerlink" title="添加NuGet包"></a>添加NuGet包</h2><p>首先，我们需要添加一些NuGet包来支持JWT身份验证。在您的ASP.NET Core项目中，打开<code>Startup.cs</code>文件，并在<code>ConfigureServices</code>方法中添加以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Authentication.JwtBearer;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.IdentityModel.Tokens;</span><br></pre></td></tr></table></figure><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> jwt服务</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;services&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ServicesJwtToken</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> config = configuration.GetSection(<span class="string">&quot;App:JWtSetting&quot;</span>).Get&lt;JwtSettings&gt;(); <span class="comment">// 从appsettings.json读取JwtConfig配置</span></span><br><span class="line">        <span class="comment">// 添加JWT身份验证服务</span></span><br><span class="line">        services.AddAuthentication(options =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            options.RequireAuthenticatedSignIn = <span class="literal">true</span>;</span><br><span class="line">            options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class="line">            options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;</span><br><span class="line">        &#125;).AddCookie(options =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cokkie名称</span></span><br><span class="line">            options.Cookie.Name = <span class="string">&quot;Z.BearerCokkie&quot;</span>;</span><br><span class="line">            <span class="comment">//cokkie过期时间</span></span><br><span class="line">            options.ExpireTimeSpan = TimeSpan.FromMinutes(config!.CokkieExpirationMinutes);</span><br><span class="line">            <span class="comment">//cokkie启用滑动过期时间</span></span><br><span class="line">            options.SlidingExpiration = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            options.LogoutPath = <span class="string">&quot;/Home/Index&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        .AddJwtBearer(options =&gt;</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            options.TokenValidationParameters = <span class="keyword">new</span> TokenValidationParameters()</span><br><span class="line">            &#123;</span><br><span class="line">                ValidateIssuer = <span class="literal">true</span>, <span class="comment">//是否验证Issuer</span></span><br><span class="line">                ValidIssuer = config!.Issuer, <span class="comment">//发行人Issuer</span></span><br><span class="line">                ValidateAudience = <span class="literal">true</span>, <span class="comment">//是否验证Audience</span></span><br><span class="line">                ValidAudience = config.Audience,<span class="comment">//</span></span><br><span class="line">                ValidateIssuerSigningKey = <span class="literal">true</span>, <span class="comment">//是否验证SecurityKey</span></span><br><span class="line">                IssuerSigningKey = <span class="keyword">new</span> SymmetricSecurityKey(Encoding.UTF8.GetBytes(config.SecretKey)), <span class="comment">//SecurityKey</span></span><br><span class="line">                ValidateLifetime = <span class="literal">true</span>, <span class="comment">//是否验证失效时间</span></span><br><span class="line">                ClockSkew = TimeSpan.FromSeconds(<span class="number">30</span>), <span class="comment">//过期时间容错值，解决服务器端时间不同步问题（秒）</span></span><br><span class="line">                RequireExpirationTime = <span class="literal">true</span>,</span><br><span class="line">                SaveSigninToken = <span class="literal">true</span>,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            options.Events = <span class="keyword">new</span> JwtBearerEvents</span><br><span class="line">            &#123;</span><br><span class="line">                OnMessageReceived = <span class="keyword">async</span> context =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> token = context.Request.Cookies[<span class="string">&quot;access_token&quot;</span>]; <span class="comment">// 从Cookie中获取token值</span></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(token))</span><br><span class="line">                    &#123;</span><br><span class="line">                        context.Token = token; <span class="comment">// 将token值设置到JwtBearer上下文中的Token属性</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            options.Events = <span class="keyword">new</span> JwtBearerEvents</span><br><span class="line">            &#123;</span><br><span class="line">                OnMessageReceived = context =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> accessToken = context.Request.Cookies[<span class="string">&quot;x-access-token&quot;</span>];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(accessToken))</span><br><span class="line">                    &#123;</span><br><span class="line">                        context.Token = accessToken;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> Task.CompletedTask;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里我们使用<code>AddAuthentication</code>方法添加了JWT身份验证服务，并设置了默认的认证方案为<code>JwtBearerDefaults.AuthenticationScheme</code>，这是JWT身份验证的默认方案。</p><p>在<code>AddJwtBearer</code>方法中，我们通过<code>GetSection</code>方法从appsettings.json文件中读取了一个名为<code>JWtSetting</code>的配置，其中包含了JWT的一些信息，例如签发者（Issuer）、接收者（Audience）、秘钥（SecretKey）等。这些信息将用于验证和生成JWT令牌。</p><p>在<code>Configure</code>方法中添加JWT认证中间件：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 其他中间件配置...</span></span><br><span class="line"></span><br><span class="line">    app.UseAuthentication();</span><br><span class="line">    app.UseAuthorization();</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置appsettings-json"><a href="#配置appsettings-json" class="headerlink" title="配置appsettings.json"></a>配置appsettings.json</h2><p>接下来，我们需要在appsettings.json文件中配置JWT的相关信息。在您的ASP.NET Core项目中，找到appsettings.json文件，并添加以下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;JWtSetting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Issuer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Z.NetWiki&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Audience&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Z.NetWiki&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;SecretKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;contact@fantasyke.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;AccessTokenExpirationMinutes&quot;</span><span class="punctuation">:</span> <span class="number">60</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;RefreshTokenExpirationMinutes&quot;</span><span class="punctuation">:</span> <span class="number">1440</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;CokkieExpirationMinutes&quot;</span><span class="punctuation">:</span> <span class="number">30</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>您可以根据自己的需求修改配置项的值。这里的<code>AccessTokenExpirationMinutes</code>和<code>RefreshTokenExpirationMinutes</code>分别表示访问令牌和刷新令牌的过期时间，单位为分钟。</p><h2 id="创建-JWT-设置类"><a href="#创建-JWT-设置类" class="headerlink" title="创建 JWT 设置类"></a>创建 JWT 设置类</h2><p>接下来，我们需要创建一个 C# 类来表示 JWT 的配置项，并使用 <code>IOptions</code> 接口将其注入到需要的地方。以下是一个示例的 JwtSettings 类：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JwtSettings</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 发行者</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Issuer &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 受众</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Audience &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> secretKey值</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> SecretKey &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 访问令牌过期时间</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> AccessTokenExpirationMinutes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> cokkie过期时间</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> CokkieExpirationMinutes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 刷新令牌过期时间</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> RefreshTokenExpirationMinutes &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个类定义了与 appsettings.json 文件中的配置项相对应的属性。</p><h2 id="用户模型"><a href="#用户模型" class="headerlink" title="用户模型"></a>用户模型</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserTokenModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span> UserId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span> UserName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span>[]? RoleIds &#123; <span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span>[]? RoleNames &#123; <span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> Claim[] Claims &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实现JWT登录认证"><a href="#实现JWT登录认证" class="headerlink" title="实现JWT登录认证"></a>实现JWT登录认证</h2><p>现在，我们可以开始实现JWT登录认证的逻辑。我们将创建一个<code>JwtService</code>类，用于生成和验证JWT令牌。在您的ASP.NET Core项目中，创建一个名为<code>JwtService.cs</code>的类文件，然后添加以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.IdentityModel.Tokens;</span><br><span class="line"><span class="keyword">using</span> System.IdentityModel.Tokens.Jwt;</span><br><span class="line"><span class="keyword">using</span> System.Security.Claims;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> Z.Ddd.Domain.UserSession;</span><br><span class="line"><span class="keyword">using</span> Z.Module.DependencyInjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Z.Ddd.Domain.Authorization</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JwtTokenProvider</span> : <span class="title">IJwtTokenProvider</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> JwtSettings _jwtConfig;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtTokenProvider</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _jwtConfig = configuration.GetSection(<span class="string">&quot;App:JWtSetting&quot;</span>).Get&lt;JwtSettings&gt;() ?? <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;请先检查appsetting中JWT配置&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GenerateAccessToken</span>(<span class="params">UserTokenModel user</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 设置Token的Claims</span></span><br><span class="line">        List&lt;Claim&gt; claims = <span class="keyword">new</span> List&lt;Claim&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Claim(ZClaimTypes.UserName, user.UserName), <span class="comment">//HttpContext.User.Identity.Name</span></span><br><span class="line">            <span class="keyword">new</span> Claim(ZClaimTypes.UserId, user.UserId.ToString()),</span><br><span class="line">            <span class="keyword">new</span> Claim (JwtRegisteredClaimNames.Exp,<span class="string">$&quot;<span class="subst">&#123;<span class="keyword">new</span> DateTimeOffset(DateTime.Now.AddMinutes(_jwtConfig.AccessTokenExpirationMinutes)).ToUnixTimeSeconds()&#125;</span>&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> Claim(ZClaimTypes.Expiration, DateTime.Now.AddMinutes(_jwtConfig.AccessTokenExpirationMinutes).ToString()),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user.RoleIds != <span class="literal">null</span> &amp;&amp; user.RoleIds.Any())</span><br><span class="line">        &#123;</span><br><span class="line">            claims.AddRange(user.RoleIds.Select(p =&gt; <span class="keyword">new</span> Claim(ZClaimTypes.RoleIds, p.ToString())));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (user.RoleNames != <span class="literal">null</span> &amp;&amp; user.RoleNames.Any())</span><br><span class="line">        &#123;</span><br><span class="line">            claims.AddRange(user.RoleNames.Select(p =&gt; <span class="keyword">new</span> Claim(ZClaimTypes.Role, p)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        user.Claims = claims.ToArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成Token的密钥</span></span><br><span class="line">        SymmetricSecurityKey key = <span class="keyword">new</span> SymmetricSecurityKey(Encoding.UTF8.GetBytes(_jwtConfig.SecretKey));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成Token的签名证书</span></span><br><span class="line">        SigningCredentials creds = <span class="keyword">new</span> SigningCredentials(key, SecurityAlgorithms.Aes128CbcHmacSha256);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Token的过期时间</span></span><br><span class="line">        DateTime expires = DateTime.Now.AddMinutes(_jwtConfig.AccessTokenExpirationMinutes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Token</span></span><br><span class="line">        JwtSecurityToken token = <span class="keyword">new</span> JwtSecurityToken(</span><br><span class="line">            _jwtConfig.Issuer,</span><br><span class="line">            _jwtConfig.Audience,</span><br><span class="line">            claims,</span><br><span class="line">            expires: expires,</span><br><span class="line">            signingCredentials: creds</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成Token字符串</span></span><br><span class="line">        <span class="built_in">string</span> tokenString = <span class="keyword">new</span> JwtSecurityTokenHandler().WriteToken(token);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tokenString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">ValidateAccessToken</span>(<span class="params"><span class="built_in">string</span> token</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> tokenHandler = <span class="keyword">new</span> JwtSecurityTokenHandler();</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            tokenHandler.ValidateToken(token, <span class="keyword">new</span> TokenValidationParameters</span><br><span class="line">            &#123;</span><br><span class="line">                ValidateIssuer = <span class="literal">true</span>,</span><br><span class="line">                ValidateAudience = <span class="literal">true</span>,</span><br><span class="line">                ValidateLifetime = <span class="literal">true</span>,</span><br><span class="line">                ValidateIssuerSigningKey = <span class="literal">true</span>,</span><br><span class="line">                ValidIssuer = _jwtConfig.Issuer,</span><br><span class="line">                ValidAudience = _jwtConfig.Audience,</span><br><span class="line">                IssuerSigningKey = <span class="keyword">new</span> SymmetricSecurityKey(Convert.FromBase64String(_jwtConfig.SecretKey))</span><br><span class="line">            &#125;, <span class="keyword">out</span> <span class="keyword">var</span> validatedToken);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IJwtTokenProvider</span> : <span class="title">ITransientDependency</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GenerateAccessToken</span>(<span class="params">UserTokenModel user</span>)</span>;</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">ValidateAccessToken</span>(<span class="params"><span class="built_in">string</span> token</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们创建了一个<code>JwtTokenProvider</code>类，实现了<code>IJwtTokenProvider </code>接口。该服务类通过依赖注入方式注入了<code>IConfiguration</code>，从而可以在构造函数中读取<code>JWtSetting</code>配置。</p><ul><li><p><code>JwtTokenProvider</code>类中包含了生成访问令牌和验证令牌的方法，以及验证访问令牌和从访问令牌中获取用户主体的方法。其中，</p><ul><li><p><code>GenerateAccessToken</code>方法使用<code>JwtSecurityTokenHandler</code>来生成访问令牌，并设置了过期时间、签名等参数。</p></li><li><p><code>ValidateAccessToken</code>方法验证访问令牌和从访问令牌中获取用户主体，验证是否过期。</p></li></ul></li></ul><h2 id="用户信息加密"><a href="#用户信息加密" class="headerlink" title="用户信息加密"></a>用户信息加密</h2><p>在JWT中，用户信息是以Claims的形式进行传递的，但默认情况下，这些信息是以明文的形式存储在令牌中的。为了保护用户信息的安全性，我们可以选择对用户信息进行加密。下面是一个简单的示例，演示如何在生成访问令牌时对用户信息进行加密。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GenerateAccessToken</span>(<span class="params">UserTokenModel user</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 设置Token的Claims</span></span><br><span class="line">        List&lt;Claim&gt; claims = <span class="keyword">new</span> List&lt;Claim&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Claim(ZClaimTypes.UserName, user.UserName), <span class="comment">//HttpContext.User.Identity.Name</span></span><br><span class="line">            <span class="keyword">new</span> Claim(ZClaimTypes.UserId, user.UserId.ToString()),</span><br><span class="line">            <span class="keyword">new</span> Claim (JwtRegisteredClaimNames.Exp,<span class="string">$&quot;<span class="subst">&#123;<span class="keyword">new</span> DateTimeOffset(DateTime.Now.AddMinutes(_jwtConfig.AccessTokenExpirationMinutes)).ToUnixTimeSeconds()&#125;</span>&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> Claim(ZClaimTypes.Expiration, DateTime.Now.AddMinutes(_jwtConfig.AccessTokenExpirationMinutes).ToString()),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user.RoleIds != <span class="literal">null</span> &amp;&amp; user.RoleIds.Any())</span><br><span class="line">        &#123;</span><br><span class="line">            claims.AddRange(user.RoleIds.Select(p =&gt; <span class="keyword">new</span> Claim(ZClaimTypes.RoleIds, p.ToString())));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (user.RoleNames != <span class="literal">null</span> &amp;&amp; user.RoleNames.Any())</span><br><span class="line">        &#123;</span><br><span class="line">            claims.AddRange(user.RoleNames.Select(p =&gt; <span class="keyword">new</span> Claim(ZClaimTypes.Role, p)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        user.Claims = claims.ToArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成Token的密钥</span></span><br><span class="line">        SymmetricSecurityKey key = <span class="keyword">new</span> SymmetricSecurityKey(Encoding.UTF8.GetBytes(_jwtConfig.SecretKey));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成Token的签名证书</span></span><br><span class="line">        SigningCredentials creds = <span class="keyword">new</span> SigningCredentials(key, SecurityAlgorithms.Aes128CbcHmacSha256);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Token的过期时间</span></span><br><span class="line">        DateTime expires = DateTime.Now.AddMinutes(_jwtConfig.AccessTokenExpirationMinutes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Token</span></span><br><span class="line">        JwtSecurityToken token = <span class="keyword">new</span> JwtSecurityToken(</span><br><span class="line">            _jwtConfig.Issuer,</span><br><span class="line">            _jwtConfig.Audience,</span><br><span class="line">            claims,</span><br><span class="line">            expires: expires,</span><br><span class="line">            signingCredentials: creds</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成Token字符串</span></span><br><span class="line">        <span class="built_in">string</span> tokenString = <span class="keyword">new</span> JwtSecurityTokenHandler().WriteToken(token);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tokenString;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们使用了<code>SigningCredentials</code>类来设置加密的参数，包括加密密钥、加密算法等。这样生成的访问令牌在传递用户信息时会进行加密，增加了用户信息的安全性。</p><h2 id="用户登录验证"><a href="#用户登录验证" class="headerlink" title="用户登录验证"></a>用户登录验证</h2><p>在用户登录时，我们需要对用户提供的用户名和密码进行验证，并生成访问令牌和刷新令牌。下面是一个简单的示例，演示如何在ASP.NET Core中实现用户登录验证，并生成JWT令牌。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">Login</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    UserTokenModel tokenModel = <span class="keyword">new</span> UserTokenModel();</span><br><span class="line">    tokenModel.UserName = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    tokenModel.UserId = Guid.NewGuid().ToString(<span class="string">&quot;N&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> token = _jwtTokenProvider.GenerateAccessToken(tokenModel);</span><br><span class="line"></span><br><span class="line">    Response.Cookies.Append(<span class="string">&quot;x-access-token&quot;</span>, token);</span><br><span class="line">    <span class="keyword">var</span> claimsIdentity = <span class="keyword">new</span> ClaimsIdentity(tokenModel.Claims, <span class="string">&quot;Login&quot;</span>);</span><br><span class="line"></span><br><span class="line">    AuthenticationProperties properties = <span class="keyword">new</span> AuthenticationProperties();</span><br><span class="line">    properties.AllowRefresh = <span class="literal">false</span>;</span><br><span class="line">    properties.IsPersistent = <span class="literal">true</span>;</span><br><span class="line">    properties.IssuedUtc = DateTimeOffset.UtcNow;</span><br><span class="line">    properties.ExpiresUtc = DateTimeOffset.Now.AddMinutes(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">await</span> HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, <span class="keyword">new</span> ClaimsPrincipal(claimsIdentity), properties);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们通过调用<code>_jwtTokenProvider.GenerateAccessToken</code>方法来生成访问令牌，并将访问令牌保存到Cookies中请求使用。</p><h2 id="用户登录简单验证"><a href="#用户登录简单验证" class="headerlink" title="用户登录简单验证"></a>用户登录简单验证</h2><p>在每次请求时，我们需要对访问令牌进行验证，以确保用户的身份和权限。下面是一个简单的示例，演示如何在ASP.NET Core中实现对访问令牌的简单验证。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet(<span class="string">&quot;profile&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">Authorize</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IActionResult <span class="title">GetUserProfile</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 获取当前用户的用户名</span></span><br><span class="line">    <span class="keyword">var</span> username = ....;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据用户名从数据库或其他持久化存储中获取用户信息</span></span><br><span class="line">    <span class="keyword">var</span> userModel = ......;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userModel == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> NotFound(<span class="keyword">new</span> &#123; message = <span class="string">&quot;userModel not found&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回用户信息给客户端</span></span><br><span class="line">    <span class="keyword">return</span> Ok(<span class="keyword">new</span></span><br><span class="line">    &#123;</span><br><span class="line">        username = userModel.Username,</span><br><span class="line">        email = userModel.Email</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们通过添加<code>[Authorize]</code>属性来标记需要验证访问令牌的API端点。当客户端发送请求时，ASP.NET Core会自动验证访问令牌的有效性，并将用户信息存储在<code>UserTokenModel </code>对象中，以便我们在方法内部访问。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇博文通过一个简单的案例，介绍了如何使用 C# .NET 实现 JWT 登录验证，并处理用户信息的加密、刷新 Token、各种验证规则等功能。</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET Core </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NET Core中RabbitMQ初识</title>
      <link href="/posts/e5c315n.html"/>
      <url>/posts/e5c315n.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>前段时间上班无事，上网冲浪看到了消息队列RabbitMQ，就想着学习一下，网上看了点资料在哔哩哔哩上看的到codeman讲的一个rabbitmq的视频，就跟着仔细学习一下，敲一下代码。视频地址： <a href="%E3%80%90%E3%80%902021%E6%9C%80%E6%96%B0.NET/C#%E3%80%91RabbitMQ%E4%BB%8E%E9%9B%B6%E5%88%B0%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E3%80%91https://www.bilibili.com/video/BV1GU4y1w7Yq?p=2&vd_source=a41abea4b949dd1bf9e656c08fefdd9f">rabbitmq视频</a>。</p><h2 id="RabbitMq介绍"><a href="#RabbitMq介绍" class="headerlink" title="RabbitMq介绍"></a>RabbitMq介绍</h2><h3 id="什么是消息队列"><a href="#什么是消息队列" class="headerlink" title="什么是消息队列"></a>什么是消息队列</h3><p>MQ全称为Message Queue，即消息队列。“消息队列”是在消息的传输过程中保存消息的容器。它是典型的：生产者、消费者模型。生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入，这样就实现了生产者和消费者的解耦。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.491aql1sz8.webp" alt="image.png"></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="削峰填谷"><a href="#削峰填谷" class="headerlink" title="削峰填谷"></a>削峰填谷</h4><p>在一个时间段很多用户同时进行请求我们的A系统，我的MQ容器就可以用来存储请求按照每秒多少的请求进行发送，减轻服务器的压力。</p><p>​<img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.32hzhzd8o3.webp" alt="image.png"></p><ul><li><p>使用了MQ之后，限制消息消费的速度为3000，这样一来，高峰就被“削”掉了，但是因为消息积压，在高峰期过后一段时间内，消费消息的速度还是会维持在3000，直到消费完挤压的消息，这就叫做“填谷”。</p></li><li><p>使用MQ后，可以提供系统稳定性。</p></li></ul><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.5c101gy74i.webp" alt="image.png"></p><h4 id="异步提速"><a href="#异步提速" class="headerlink" title="异步提速"></a>异步提速</h4><ul><li><p>在不使用MQ的情况下我们正常用户通过订单系统进行下单，我们需要900多ms，这就会出现用户的体验不好。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.8hgi0estjq.webp" alt="image.png"></p></li><li><p>在使用MQ的情况出现了总耗时只要25ms就给到了用户回应</p><p>这样提升了用户体验感</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.3uuuzpukf3.webp" alt="image.png"></p></li></ul><p>所有的问题当你解决一个问题就会出现另外的问题，外部依赖多系统的稳定性就越差，MQ但凡挂了，系统就会出问题，后面就会使用mq集群来解决这一问题。</p><h3 id="消息模型"><a href="#消息模型" class="headerlink" title="消息模型"></a>消息模型</h3><h4 id="点对点模式"><a href="#点对点模式" class="headerlink" title="点对点模式"></a>点对点模式</h4><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.2rv5otz41x.webp" alt="image.png"></p><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.3uuuzpv44v.webp" alt="image.png"></p><p>在上图的模型中，有以下概念：</p><ul><li>Producer：生产者，也就是要发送消息的程序</li><li>Consumer：消费者：消息的接受者，会一直等待消息到来。</li><li>Queue：消息队列。可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。 </li><li>点对点模式只会有一个消费者进行消费</li></ul><h5 id="代码附上"><a href="#代码附上" class="headerlink" title="代码附上"></a>代码附上</h5><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.pfd0s1k4d.webp" alt="image.png"></p><p>新增两个项目一个生产者 Z.RabbitMq.Producer，一个消费者Z.RabbitMQ.Consumer01</p><ol><li>项目 Z.RabbitMq.Producer新增<code>HelloProducer</code>类</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelloProducer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HelloWorldShow</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">            factory.HostName = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">            factory.Port = <span class="number">5672</span>;</span><br><span class="line">            factory.UserName = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">            factory.Password = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">            factory.VirtualHost = <span class="string">&quot;my_vhost&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取TCP 长连接</span></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> connection = factory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 创建通信“通道”,相当于TCP中的虚拟连接</span></span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * 创建队列，声明并创建一个队列，如果队列已存在，则使用这个队列</span></span><br><span class="line"><span class="comment">                     * 第一个参数：队列名称ID</span></span><br><span class="line"><span class="comment">                     * 第二个参数：是否持久化，false对应不持久化数据，MQ停掉数据就会丢失</span></span><br><span class="line"><span class="comment">                     * 第三个参数：是否队列私有化，false则代表所有的消费者都可以访问，true代表只有第一次拥有它的消费者才能一直使用</span></span><br><span class="line"><span class="comment">                     * 第四个：是否自动删除，false代表连接停掉后不自动删除这个队列</span></span><br><span class="line"><span class="comment">                     * 其他额外参数为null</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    channel.QueueDeclare(RabbitConstant.QUEUE_HELLO_WORLD, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">                    Console.ForegroundColor = ConsoleColor.Red;</span><br><span class="line">                    <span class="built_in">string</span> message = <span class="string">&quot;hello CodeMan 666&quot;</span>;</span><br><span class="line">                    <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * exchange:交换机，暂时用不到，在进行发布订阅时才会用到</span></span><br><span class="line"><span class="comment">                     * 路由key</span></span><br><span class="line"><span class="comment">                     * 额外的设置属性</span></span><br><span class="line"><span class="comment">                     * 最后一个参数是要传递的消息字节数组</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    channel.BasicPublish(<span class="string">&quot;&quot;</span>, RabbitConstant.QUEUE_HELLO_WORLD, <span class="literal">null</span>, body);</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;producer消息：<span class="subst">&#123;message&#125;</span>已发送&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>项目 Z.RabbitMQ.Consumer01新增<code>HelloConsumer</code>类</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelloConsumer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HelloWorldShow</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.HostName = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">        factory.Port = <span class="number">5672</span>;<span class="comment">//5672是RabbitMQ默认的端口号</span></span><br><span class="line">        factory.UserName = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        factory.Password = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        factory.VirtualHost = <span class="string">&quot;my_vhost&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> connection = factory.CreateConnection())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * 创建队列，声明并创建一个队列，如果队列已存在，则使用这个队列</span></span><br><span class="line"><span class="comment">                * 第一个参数：队列名称ID</span></span><br><span class="line"><span class="comment">                * 第二个参数：是否持久化，false对应不持久化数据，MQ停掉数据就会丢失</span></span><br><span class="line"><span class="comment">                * 第三个参数：是否队列私有化，false则代表所有的消费者都可以访问，true代表只有第一次拥有它的消费者才能一直使用</span></span><br><span class="line"><span class="comment">                * 第四个：是否自动删除，false代表连接停掉后不自动删除这个队列</span></span><br><span class="line"><span class="comment">                * 其他额外参数为null</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="comment">//RabbitConstant.QUEUE_HELLO_WORLD 对应的生产者一样名称 &quot;helloworld.queue&quot;</span></span><br><span class="line">                channel.QueueDeclare(RabbitConstant.QUEUE_HELLO_WORLD, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">                Console.ForegroundColor = ConsoleColor.Cyan;</span><br><span class="line"></span><br><span class="line">                EventingBasicConsumer consumers = <span class="keyword">new</span> EventingBasicConsumer(channel);</span><br><span class="line">                <span class="comment">// 触发事件</span></span><br><span class="line">                consumers.Received += (model, ea) =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> body = ea.Body.ToArray();</span><br><span class="line">                    <span class="keyword">var</span> message = Encoding.UTF8.GetString(body);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// false只是确认签收当前的消息，设置为true的时候则代表签收该消费者所有未签收的消息</span></span><br><span class="line">                    channel.BasicAck(ea.DeliveryTag, <span class="literal">false</span>);</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;Consumer01接收消息：<span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * 从MQ服务器中获取数据</span></span><br><span class="line"><span class="comment">                * 创建一个消息消费者</span></span><br><span class="line"><span class="comment">                * 第一个参数：队列名</span></span><br><span class="line"><span class="comment">                * 第二个参数：是否自动确认收到消息，false代表手动确认消息，这是MQ推荐的做法</span></span><br><span class="line"><span class="comment">                * 第三个参数：要传入的IBasicConsumer接口</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="comment">//RabbitConstant.QUEUE_HELLO_WORLD ==  helloworld.queue</span></span><br><span class="line">                channel.BasicConsume(RabbitConstant.QUEUE_HELLO_WORLD, <span class="literal">false</span>, consumers);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Press [Enter] to exit&quot;</span>);</span><br><span class="line">                Console.Read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="work消息模型"><a href="#work消息模型" class="headerlink" title="work消息模型"></a>work消息模型</h4><p>工作队列或者竞争消费者模式</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.8ada4z9ddr.png" alt="image.png"></p><p>work queues与入门程序相比，多了一个消费端，两个消费端共同消费同一个队列中的消息，但是一个消息只能被一个消费者获取。</p><p>接下来我们来模拟这个流程：</p><p>P：生产者：任务的发布者</p><p>C1：消费者1：领取任务并且完成任务，假设完成速度较慢（模拟耗时）</p><p>C2：消费者2：领取任务并且完成任务，假设完成速度较快</p><h5 id="代码附上-1"><a href="#代码附上-1" class="headerlink" title="代码附上"></a>代码附上</h5><p>新增一个工具类用来获取rabbitmq的连接信息</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RabbitUtils</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConnectionFactory <span class="title">GetConnection</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.HostName = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">        factory.Port = <span class="number">5672</span>;<span class="comment">//5672是RabbitMQ默认的端口号</span></span><br><span class="line">        factory.UserName = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        factory.Password = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        factory.VirtualHost = <span class="string">&quot;my_vhost&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>消费者1(C1)在刚刚的 Z.RabbitMQ.Consumer01新增<code>SmsReceive</code>类</p><p>在<code>Program.cs</code>中的main函数中进行调用 <code>SmsReceive.Sender();</code></p><p>消费者1 延迟30ms接受到信息</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SmsReceive</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sender</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//使用工具类创建连接</span></span><br><span class="line">        <span class="keyword">var</span> connection = RabbitUtils.GetConnection().CreateConnection();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> channel = connection.CreateModel();</span><br><span class="line"></span><br><span class="line">        channel.QueueDeclare(RabbitConstant.QUEUE_SMS, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 如果不写basicQos(1)，则自动MQ会将所有请求平均发送给所有消费者</span></span><br><span class="line">        <span class="comment">// basicQos，MQ不再对消费者一次发送多个请求，而是消费者处理完一个消息后(确认后)，在从队列中获取一个新的</span></span><br><span class="line">        channel.BasicQos(<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);</span><br><span class="line"></span><br><span class="line">        consumer.Received += (model, ea) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> body = ea.Body.ToArray();</span><br><span class="line">            <span class="keyword">var</span> message = Encoding.UTF8.GetString(body);</span><br><span class="line">            Thread.Sleep(<span class="number">30</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;SmsSender-发送短信成功：<span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">            channel.BasicAck(ea.DeliveryTag, <span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.BasicConsume(RabbitConstant.QUEUE_SMS, <span class="literal">false</span>, consumer);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Press [Enter] to exit&quot;</span>);</span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者2(C2)在刚刚的 Z.RabbitMQ.Consumer02新增<code>SmsReceive</code>类</p><p>  <img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.83a29jni96.png" alt="image.png"></p><p>  消费者1 延迟60ms接受到信息</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SmsReceive</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sender</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> connection = RabbitUtils.GetConnection().CreateConnection();</span><br><span class="line">        <span class="keyword">var</span> channel = connection.CreateModel();</span><br><span class="line"></span><br><span class="line">        channel.QueueDeclare(RabbitConstant.QUEUE_SMS, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 如果不写basicQos(1)，则自动MQ会将所有请求平均发送给所有消费者</span></span><br><span class="line">        <span class="comment">// basicQos，MQ不再对消费者一次发送多个请求，而是消费者处理完一个消息后(确认后)，在从队列中获取一个新的</span></span><br><span class="line">        channel.BasicQos(<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>);<span class="comment">//处理完一个取一个</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);</span><br><span class="line"></span><br><span class="line">        consumer.Received += (model, ea) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> body = ea.Body.ToArray();</span><br><span class="line">            <span class="keyword">var</span> message = Encoding.UTF8.GetString(body);</span><br><span class="line">            Thread.Sleep(<span class="number">60</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;SmsSender-发送短信成功：<span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">            channel.BasicAck(ea.DeliveryTag, <span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.BasicConsume(RabbitConstant.QUEUE_SMS, <span class="literal">false</span>, consumer);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Press [Enter] to exit&quot;</span>);</span><br><span class="line">        Console.Read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生产者Z.RabbitMq.Producer中创建SmsSender类在main函数进行调用</p><ul><li>发送100条车票订阅的消息</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SmsSender</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sender</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> connection = RabbitUtils.GetConnection().CreateConnection())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">            &#123;</span><br><span class="line">                channel.QueueDeclare(RabbitConstant.QUEUE_SMS, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Sms sms = <span class="keyword">new</span> Sms(<span class="string">&quot;乘客&quot;</span> + i, <span class="string">&quot;139000000&quot;</span> + i, <span class="string">&quot;您的车票已预定成功&quot;</span>);</span><br><span class="line">                    <span class="built_in">string</span> jsonSms = JsonConvert.SerializeObject(sms);</span><br><span class="line">                    <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(jsonSms);</span><br><span class="line">                    channel.BasicPublish(<span class="string">&quot;&quot;</span>, RabbitConstant.QUEUE_SMS, <span class="literal">null</span>, body);</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;正在发送内容：<span class="subst">&#123;jsonSms&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;发送数据成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>运行结构如下</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.8z6jozxf4q.png" alt="image.png"></p><h5 id="能者多劳"><a href="#能者多劳" class="headerlink" title="能者多劳"></a>能者多劳</h5><ul><li>消费者1比消费者2的效率要快，一次任务的耗时较短</li><li>消费者2大量时间处于空闲状态，消费者1一直忙碌</li></ul><p>通过<code>channel.BasicAck(ea.DeliveryTag, false);</code>来完成能者多劳的效果，在完成上一次请求之后再去取下一条消息，这就会出现服务器快的消费的更多，慢的消费的更少。</p><h4 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h4><p>Publish&#x2F;subscribe（交换机类型：Fanout，也称为广播 ）</p><p>  <img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.7zqgbtuw5z.png" alt="image.png"></p><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.2vermjv571.png" alt="image.png"> </p><p>和前面两种模式不同：</p><ul><li>声明Exchange，不再声明Queue</li><li>发送消息到Exchange，不再发送到Queue,通过exchange发送到queue上</li></ul><h5 id="消费者1收到的天气"><a href="#消费者1收到的天气" class="headerlink" title="消费者1收到的天气"></a>消费者1收到的天气</h5><p>项目<code>.RabbitMq.Consumer01</code> 创建<code>WeatherFanout</code>使用exchange(交换机)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherFanout</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Weather</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> connection = RabbitUtils.GetConnection().CreateConnection())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">            &#123;</span><br><span class="line">                channel.ExchangeDeclare(RabbitConstant.EXCHANGE_WEATHER, ExchangeType.Fanout);</span><br><span class="line">                <span class="comment">// 声明队列信息</span></span><br><span class="line">                channel.QueueDeclare(RabbitConstant.QUEUE_BAIDU, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                         * queueBind 用于将队列与交换机绑定</span></span><br><span class="line"><span class="comment">                         * 参数1：队列名</span></span><br><span class="line"><span class="comment">                         * 参数2：交换机名</span></span><br><span class="line"><span class="comment">                         * 参数3：路由Key(暂时用不到)</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                channel.QueueBind(RabbitConstant.QUEUE_BAIDU, RabbitConstant.EXCHANGE_WEATHER, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                channel.BasicQos(<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);</span><br><span class="line"></span><br><span class="line">                consumer.Received += ((model, ea) =&gt;</span><br><span class="line">                                      &#123;</span><br><span class="line">                                          <span class="keyword">var</span> message = Encoding.UTF8.GetString(ea.Body.ToArray());</span><br><span class="line">                                          Console.WriteLine(<span class="string">$&quot;百度收到的气象信息：<span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">                                          channel.BasicAck(ea.DeliveryTag, <span class="literal">false</span>);</span><br><span class="line">                                      &#125;);</span><br><span class="line"></span><br><span class="line">                channel.BasicConsume(RabbitConstant.QUEUE_BAIDU, <span class="literal">false</span>, consumer);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Press [Enter] to exit&quot;</span>);</span><br><span class="line">                Console.Read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="消费者2收到的天气"><a href="#消费者2收到的天气" class="headerlink" title="消费者2收到的天气"></a>消费者2收到的天气</h5><p>项目<code>.RabbitMq.Consumer02</code> 创建<code>WeatherFanout</code>使用exchange(交换机)</p><p>代码与消费者01一样</p><h5 id="生产者发送天气"><a href="#生产者发送天气" class="headerlink" title="生产者发送天气"></a>生产者发送天气</h5><p>生产者把消息推送到交换机上</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherFanout</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Weather</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> connection = RabbitUtils.GetConnection().CreateConnection())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> message = <span class="string">&quot;20度&quot;</span>;</span><br><span class="line">                <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(message);</span><br><span class="line">                channel.BasicPublish(RabbitConstant.EXCHANGE_WEATHER, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>, body);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;天气信息发送成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后得到效果</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.2krxteg6at.png" alt="image.png"></p><h4 id="Routing-路由模型"><a href="#Routing-路由模型" class="headerlink" title="Routing 路由模型"></a>Routing 路由模型</h4><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.1sf2bo02ow.png" alt="image.png"></p><p>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</p><p>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</p><p>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</p><p>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</p><ul><li><p>队列与交换机的绑定，不能是任意绑定，而是要指定一个RoutingKey</p></li><li><p>消息的发送方在向Exchange发送消息时，也必须指定消息的RoutingKey</p></li><li><p>Exchange不再把消息交给每一个绑定的队列，而是根据消息的RoutingKey进行判断，只有队列的RoutingKey与消息的RoutingKey完全一致，才会接收消息</p></li></ul><h5 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherDirect</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Weather</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; area = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">        area.Add(<span class="string">&quot;china.hunan.changsha.20210525&quot;</span>, <span class="string">&quot;中国湖南长沙20210525天气数据&quot;</span>);</span><br><span class="line">        area.Add(<span class="string">&quot;china.hubei.wuhan.20210525&quot;</span>, <span class="string">&quot;中国湖北武汉20210525天气数据&quot;</span>);</span><br><span class="line">        area.Add(<span class="string">&quot;china.hubei.xiangyang.20210525&quot;</span>, <span class="string">&quot;中国湖北襄阳20210525天气数据&quot;</span>);</span><br><span class="line">        area.Add(<span class="string">&quot;us.cal.lsj.20210525&quot;</span>, <span class="string">&quot;美国加州洛杉矶20210525天气数据&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> connection = RabbitUtils.GetConnection().CreateConnection())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> area)</span><br><span class="line">                &#123;</span><br><span class="line">                    channel.BasicPublish(RabbitConstant.EXCHANGE_WEATHER_ROUTING, item.Key,</span><br><span class="line">                                         <span class="literal">null</span>, Encoding.UTF8.GetBytes(item.Value));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;气象信息发送成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="消费者1"><a href="#消费者1" class="headerlink" title="消费者1"></a>消费者1</h5><p>接受百度路由的路由消息</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherDirect</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Weather</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> connection = RabbitUtils.GetConnection().CreateConnection())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">            &#123;</span><br><span class="line">                channel.ExchangeDeclare(RabbitConstant.EXCHANGE_WEATHER_ROUTING, ExchangeType.Direct);</span><br><span class="line">                channel.QueueDeclare(RabbitConstant.QUEUE_BAIDU, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    * queueBind 用于将队列与交换机绑定</span></span><br><span class="line"><span class="comment">                    * 参数1：队列名</span></span><br><span class="line"><span class="comment">                    * 参数2：交换机名</span></span><br><span class="line"><span class="comment">                    * 参数3：路由Key(暂时用不到)</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                channel.QueueBind(RabbitConstant.QUEUE_BAIDU, RabbitConstant.EXCHANGE_WEATHER_ROUTING, <span class="string">&quot;china.hunan.changsha.20210525&quot;</span>);</span><br><span class="line">                channel.QueueBind(RabbitConstant.QUEUE_BAIDU, RabbitConstant.EXCHANGE_WEATHER_ROUTING, <span class="string">&quot;china.hubei.wuhan.20210525&quot;</span>);</span><br><span class="line"></span><br><span class="line">                channel.BasicQos(<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);</span><br><span class="line"></span><br><span class="line">                consumer.Received += ((model, ea) =&gt;</span><br><span class="line">                                      &#123;</span><br><span class="line">                                          <span class="keyword">var</span> message = Encoding.UTF8.GetString(ea.Body.ToArray());</span><br><span class="line">                                          Console.WriteLine(<span class="string">$&quot;百度收到的气象信息：<span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">                                          channel.BasicAck(ea.DeliveryTag, <span class="literal">false</span>);</span><br><span class="line">                                      &#125;);</span><br><span class="line"></span><br><span class="line">                channel.BasicConsume(RabbitConstant.QUEUE_BAIDU, <span class="literal">false</span>, consumer);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Press [Enter] to exit&quot;</span>);</span><br><span class="line">                Console.Read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="消费者2"><a href="#消费者2" class="headerlink" title="消费者2"></a>消费者2</h5><p>接受新浪的路由信息</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherDirect</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Weather</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> connection = RabbitUtils.GetConnection().CreateConnection())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">            &#123;</span><br><span class="line">                channel.ExchangeDeclare(RabbitConstant.EXCHANGE_WEATHER_ROUTING, ExchangeType.Direct);</span><br><span class="line">                <span class="comment">// 声明队列信息</span></span><br><span class="line">                channel.QueueDeclare(RabbitConstant.QUEUE_SINA, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * queueBind 用于将队列与交换机绑定</span></span><br><span class="line"><span class="comment">                     * 参数1：队列名</span></span><br><span class="line"><span class="comment">                     * 参数2：交换机名</span></span><br><span class="line"><span class="comment">                     * 参数3：路由Key</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                channel.QueueBind(RabbitConstant.QUEUE_SINA, RabbitConstant.EXCHANGE_WEATHER_ROUTING, <span class="string">&quot;china.hubei.xiangyang.20210525&quot;</span>);</span><br><span class="line">                channel.QueueBind(RabbitConstant.QUEUE_SINA, RabbitConstant.EXCHANGE_WEATHER_ROUTING, <span class="string">&quot;us.cal.lsj.20210525&quot;</span>);</span><br><span class="line">                channel.QueueBind(RabbitConstant.QUEUE_SINA, RabbitConstant.EXCHANGE_WEATHER_ROUTING, <span class="string">&quot;china.hubei.wuhan.20210525&quot;</span>);</span><br><span class="line"></span><br><span class="line">                channel.BasicQos(<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);</span><br><span class="line"></span><br><span class="line">                consumer.Received += ((model, ea) =&gt;</span><br><span class="line">                                      &#123;</span><br><span class="line">                                          <span class="keyword">var</span> message = Encoding.UTF8.GetString(ea.Body.ToArray());</span><br><span class="line">                                          Console.WriteLine(<span class="string">$&quot;新浪收到的气象信息：<span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">                                          channel.BasicAck(ea.DeliveryTag, <span class="literal">false</span>);</span><br><span class="line">                                      &#125;);</span><br><span class="line"></span><br><span class="line">                channel.BasicConsume(RabbitConstant.QUEUE_SINA, <span class="literal">false</span>, consumer);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Press [Enter] to exit&quot;</span>);</span><br><span class="line">                Console.Read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="最后得到的效果"><a href="#最后得到的效果" class="headerlink" title="最后得到的效果"></a>最后得到的效果</h5><ul><li>新浪接收对应新浪的routingkey的信息</li><li>百度接收对应百度的routingkey的信息</li></ul><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.26li2j8o2i.png" alt="image.png"></p><h4 id="Topics-通配符模式"><a href="#Topics-通配符模式" class="headerlink" title="Topics 通配符模式"></a>Topics 通配符模式</h4><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.8s3btkcx59.png" alt="image.png"></p><h5 id="routingkey支持通配符匹配格式"><a href="#routingkey支持通配符匹配格式" class="headerlink" title="routingkey支持通配符匹配格式"></a>routingkey支持通配符匹配格式</h5><ul><li>通配符格式<ul><li>Topic类型与Direct相比，都是可以根据RoutingKey把消息路由到不同的队列。只不过</li><li>Topic类型Exchange可以让队列在绑定RoutingKey的时候使用通配符</li><li>RoutingKey一般都是由一个或多个单词组成，多个单词之间以“.”分隔，例如:item.insert</li><li>通配符规则:#匹配一个或多个词，*恰好匹配一个词，例如item.#能够匹配item.insert.user或者item.insert，item.只能匹配item.insert或者item.user</li></ul></li></ul><h5 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherTopic</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Weather</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; area = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">        area.Add(<span class="string">&quot;china.hunan.changsha.20210525&quot;</span>, <span class="string">&quot;中国湖南长沙20210525天气数据&quot;</span>);</span><br><span class="line">        area.Add(<span class="string">&quot;china.hubei.wuhan.20210525&quot;</span>, <span class="string">&quot;中国湖北武汉20210525天气数据&quot;</span>);</span><br><span class="line">        area.Add(<span class="string">&quot;china.hubei.xiangyang.20210525&quot;</span>, <span class="string">&quot;中国湖北襄阳20210525天气数据&quot;</span>);</span><br><span class="line">        area.Add(<span class="string">&quot;us.cal.lsj.20210525&quot;</span>, <span class="string">&quot;美国加州洛杉矶20210525天气数据&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> connection = RabbitUtils.GetConnection().CreateConnection())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> area)</span><br><span class="line">                &#123;</span><br><span class="line">                    channel.BasicPublish(RabbitConstant.EXCHANGE_WEATHER_TOPIC, item.Key,</span><br><span class="line">                                         <span class="literal">null</span>, Encoding.UTF8.GetBytes(item.Value));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;气象信息发送成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="消费者1-1"><a href="#消费者1-1" class="headerlink" title="消费者1"></a>消费者1</h5><p>获取交换机中通配符为<code>china.#</code>的信息</p><ul><li>(“china.hunan.changsha.20210525”, “中国湖南长沙20210525天气数据”);</li><li>(“china.hubei.wuhan.20210525”, “中国湖北武汉20210525天气数据”);</li><li>(“china.hubei.xiangyang.20210525”, “中国湖北襄阳20210525天气数据”);</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherTopic</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Weather</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> connection = RabbitUtils.GetConnection().CreateConnection())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">            &#123;</span><br><span class="line">                channel.ExchangeDeclare(RabbitConstant.EXCHANGE_WEATHER_TOPIC, ExchangeType.Topic);</span><br><span class="line">                <span class="comment">// 声明队列信息</span></span><br><span class="line">                channel.QueueDeclare(RabbitConstant.QUEUE_BAIDU, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * queueBind 用于将队列与交换机绑定</span></span><br><span class="line"><span class="comment">                     * 参数1：队列名</span></span><br><span class="line"><span class="comment">                     * 参数2：交换机名</span></span><br><span class="line"><span class="comment">                     * 参数3：路由Key(暂时用不到)</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                channel.QueueBind(RabbitConstant.QUEUE_BAIDU, RabbitConstant.EXCHANGE_WEATHER_TOPIC, <span class="string">&quot;china.#&quot;</span>);</span><br><span class="line"></span><br><span class="line">                channel.BasicQos(<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);</span><br><span class="line"></span><br><span class="line">                consumer.Received += ((model, ea) =&gt;</span><br><span class="line">                                      &#123;</span><br><span class="line">                                          <span class="keyword">var</span> message = Encoding.UTF8.GetString(ea.Body.ToArray());</span><br><span class="line">                                          Console.WriteLine(<span class="string">$&quot;百度收到的气象信息：<span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">                                          channel.BasicAck(ea.DeliveryTag, <span class="literal">false</span>);</span><br><span class="line">                                      &#125;);</span><br><span class="line"></span><br><span class="line">                channel.BasicConsume(RabbitConstant.QUEUE_BAIDU, <span class="literal">false</span>, consumer);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Press [Enter] to exit&quot;</span>);</span><br><span class="line">                Console.Read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="消费者2-1"><a href="#消费者2-1" class="headerlink" title="消费者2"></a>消费者2</h5><p>获取交换机中通配符为<code>china.hubei.*.20210525</code>的信息</p><ul><li>(“china.hubei.wuhan.20210525”, “中国湖北武汉20210525天气数据”)</li><li>(“china.hubei.xiangyang.20210525”, “中国湖北襄阳20210525天气数据”)</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherTopic</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Weather</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> connection = RabbitUtils.GetConnection().CreateConnection())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * 生产者发送消息</span></span><br><span class="line"><span class="comment">                     * 队列名称</span></span><br><span class="line"><span class="comment">                     * 交换机名称</span></span><br><span class="line"><span class="comment">                     * 路由key</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                channel.ExchangeDeclare(RabbitConstant.EXCHANGE_WEATHER_TOPIC, ExchangeType.Topic);</span><br><span class="line">                <span class="comment">// 声明队列信息</span></span><br><span class="line">                channel.QueueDeclare(RabbitConstant.QUEUE_SINA, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * queueBind 用于将队列与交换机绑定</span></span><br><span class="line"><span class="comment">                     * 参数1：队列名</span></span><br><span class="line"><span class="comment">                     * 参数2：交换机名</span></span><br><span class="line"><span class="comment">                     * 参数3：路由Key(暂时用不到)</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                channel.QueueBind(RabbitConstant.QUEUE_SINA, RabbitConstant.EXCHANGE_WEATHER_TOPIC, <span class="string">&quot;china.hubei.*.20210525&quot;</span>);</span><br><span class="line"></span><br><span class="line">                channel.BasicQos(<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);</span><br><span class="line"></span><br><span class="line">                consumer.Received += ((model, ea) =&gt;</span><br><span class="line">                                      &#123;</span><br><span class="line">                                          <span class="keyword">var</span> message = Encoding.UTF8.GetString(ea.Body.ToArray());</span><br><span class="line">                                          Console.WriteLine(<span class="string">$&quot;新浪收到的气象信息：<span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">                                          channel.BasicAck(ea.DeliveryTag, <span class="literal">false</span>);</span><br><span class="line">                                      &#125;);</span><br><span class="line"></span><br><span class="line">                channel.BasicConsume(RabbitConstant.QUEUE_SINA, <span class="literal">false</span>, consumer);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Press [Enter] to exit&quot;</span>);</span><br><span class="line">                Console.Read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="最后得到的效果-1"><a href="#最后得到的效果-1" class="headerlink" title="最后得到的效果"></a>最后得到的效果</h5><ul><li>百度获取<code>china.#</code>的信息</li><li>新浪获取<code>china.hubei.*.20210525</code>的信息</li></ul><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.4n7qhgg4iw.png" alt="image.png"></p><h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h4><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.6ikba2srll.png" alt="image.png"></p><h5 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h5><ul><li><p>Callback queue 回调队列，客户端向服务器发送请求，服务器端处理请求后，将其处理结果保存在一个存储体中。而客户端为了获得处理结果，那么客户在向服务器发送请求时，同时发送一个回调队列地址reply_to。</p></li><li><p>Correlation id 关联标识，客户端可能会发送多个请求给服务器，当服务器处理完后，客户端无法辨别在回调队列中的响应具体和那个请求时对应的。为了处理这种情况，客户端在发送每个请求时，同时会附带一个独有correlation_id属性，这样客户端在回调队列中根据correlation_id字段的值就可以分辨此响应属于哪个请求。</p></li></ul><h5 id="流程说明："><a href="#流程说明：" class="headerlink" title="流程说明："></a>流程说明：</h5><ul><li>当客户端启动的时候，它创建一个匿名独享的回调队列。</li><li>在 RPC 请求中，客户端发送带有两个属性的消息：一个是设置回调队列的 reply_to 属性，另一个是设置唯一值的 correlation_id 属性。</li><li>将请求发送到一个 rpc_queue 队列中。</li><li>服务器等待请求发送到这个队列中来。当请求出现的时候，它执行他的工作并且将带有执行结果的消息发送给 reply_to 字段指定的队列。</li><li>客户端等待回调队列里的数据。当有消息出现的时候，它会检查 correlation_id 属性。如果此属性的值与请求匹配，将它返回给应用</li></ul><h3 id="分享几题面试题"><a href="#分享几题面试题" class="headerlink" title="分享几题面试题"></a>分享几题面试题</h3><h4 id="RabbitMQ中消息可能有的几种状态"><a href="#RabbitMQ中消息可能有的几种状态" class="headerlink" title="RabbitMQ中消息可能有的几种状态?"></a>RabbitMQ中消息可能有的几种状态?</h4><ol><li><p>alpha: 消息内容(包括消息体、属性和 headers) 和消息索引都存储在内存中 。 </p><ol><li>beta: 消息内容保存在磁盘中，消息索引保存在内存中。</li><li>gamma: 消息内容保存在磁盘中，消息索引在磁盘和内存中都有 。</li><li>delta: 消息内容和索引都在磁盘中 。</li></ol></li><li><p>死信队列？ </p><p>DLX，全称为 Dead-Letter-Exchange，死信交换器，死信邮箱。当消息在一个队列中变成死信 (dead  message) 之后，它能被重新被发送到另一个交换器中，这个交换器就是 DLX，绑定 DLX 的队列就称之 为死信队列。 </p></li><li><p>导致的死信的几种原因？ </p><ol><li>消息被拒（Basic.Reject &#x2F;Basic.Nack) 且 requeue &#x3D; false。 </li><li>消息TTL过期。</li><li>队列满了</li></ol></li></ol><blockquote><p>到这里就结束，大家如果需要看视频学习就是点最上面的链接就行了</p><p>源码：<a href="https://github.com/Fantasy-Ke/Z.RabbitMQ-Demo">github</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> RabbitMQ </tag>
            
            <tag> .NET Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻量通讯协议 --- MQTT</title>
      <link href="/posts/36912.html"/>
      <url>/posts/36912.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><span id="more"></span><h3 id="一、MQTT简介"><a href="#一、MQTT简介" class="headerlink" title="一、MQTT简介"></a>一、MQTT简介</h3><p><strong>MQTT（Message Queuing Telemetry Transport）</strong> 是一种轻量级的消息传输协议，通常用于在物联网（IoT）和传感器网络中进行通信。它设计用于在低带宽、不稳定或高延迟的网络环境下传输数据，因此非常适用于连接设备之间的通信，尤其是在资源有限的环境中。</p><p>MQTT 的主要特点包括以下几点：</p><ol><li><p>轻量级：MQTT 协议本身非常简洁，消息头部占用较少的带宽，使其在低带宽网络中运行效率高。</p></li><li><p>发布&#x2F;订阅模型：MQTT 使用发布&#x2F;订阅模型，其中客户端可以订阅特定的主题（Topic），并接收与该主题相关的消息。发布者发布消息到特定主题，然后所有订阅了该主题的客户端都将收到该消息。</p></li><li><p>可靠性：MQTT 支持三种不同级别的消息传输质量，包括最多一次、至少一次和仅一次传输，可根据应用需求选择合适的级别。</p></li><li><p>持久会话：MQTT 允许客户端建立持久会话，以便在连接丢失后重新连接时能够恢复之前的订阅和消息传递状态。</p></li><li><p>QoS（Quality of Service）：MQTT 提供不同的 QoS 级别，以确保消息的可靠传递。这包括 QoS 0（最多一次传输）、QoS 1（至少一次传输）和 QoS 2（仅一次传输）。</p></li><li><p>适应性：MQTT 可以在多种网络协议上运行，包括 TCP&#x2F;IP、WebSocket 和其他协议。</p></li></ol><p>总之，MQTT 是一种非常适合物联网和传感器网络的通信协议，因其轻量级和高效的特性而受到广泛应用。它允许设备之间实时地交换信息，从而支持各种应用，包括智能家居、工业自动化、农业监测等。</p><h3 id="二、MQTT-的-QoS-机制"><a href="#二、MQTT-的-QoS-机制" class="headerlink" title="二、MQTT 的 QoS 机制"></a>二、MQTT 的 QoS 机制</h3><p>什么是 QoS 机制？（<a href="https://www.emqx.com/zh/blog/introduction-to-mqtt-qos%EF%BC%89">https://www.emqx.com/zh/blog/introduction-to-mqtt-qos）</a></p><p>很多时候，使用 MQTT 协议的设备都运行在网络受限的环境下，而只依靠底层的 TCP 传输协议，并不能完全保证消息的可靠到达。因此，MQTT 提供了 QoS 机制，其核心是设计了多种消息交互机制来提供不同的服务质量，来满足用户在各种场景下对消息可靠性的要求。</p><p>MQTT 定义了三个 QoS 等级，分别为：</p><ul><li>QoS 0，最多交付一次。</li><li>QoS 1，至少交付一次。</li><li>QoS 2，只交付一次。</li></ul><p>其中，使用 QoS 0 可能丢失消息，使用 QoS 1 可以保证收到消息，但消息可能重复，使用 QoS 2 可以保证消息既不丢失也不重复。QoS 等级从低到高，不仅意味着消息可靠性的提升，也意味着传输复杂程度的提升。</p><h2 id="MQTT-的-Net-库-—-MQTTnet"><a href="#MQTT-的-Net-库-—-MQTTnet" class="headerlink" title="MQTT 的.Net 库 — MQTTnet"></a>MQTT 的.Net 库 — MQTTnet</h2><p>MQTTnet是一个开源的用于基于MQTT的通信的高性能.NET库。它提供了一个MQTT客户端和一个MQTT服务器（代理），并支持MQTT协议，直到版本5。它与大多数受支持的.NET兼容框架版本和CPU体系结构。</p><p>Guthub地址： <a href="https://github.com/dotnet/MQTTnet">https://github.com/dotnet/MQTTnet</a></p><p>MQTTnet通过NuGet软件包管理器交付。可以在这里找到软件包：<a href="https://www.nuget.org/packages/MQTTnet/">https://www.nuget.org/packages/MQTTnet/</a></p><p>在Visual Studio中，在Package Manager控制台中使用以下命令手动安装MQTTnet:</p><h2 id="Windows下MQTT消息服务器的安装使用"><a href="#Windows下MQTT消息服务器的安装使用" class="headerlink" title="Windows下MQTT消息服务器的安装使用"></a>Windows下MQTT消息服务器的安装使用</h2><p>一般，常见的MQTT服务器软件有：</p><ul><li><p><strong>Mosquitto</strong> - 流行的开源MQTT服务器，但是没有可视化界面，需要借助其他工具才可以可视化。</p></li><li><p><strong>EMQX</strong> - 强大的开源MQTT服务器，有可视化界面。</p></li><li><p><strong>HiveMQ</strong>  - HiveMQ 是一个商业的MQTT服务器，提供免费的开发者版。</p></li></ul><p>这里推荐使用EMQX ，它提供了可视化界面，以便更容易地配置、管理和监控MQTT服务器。</p><h3 id="一、下载EMQX"><a href="#一、下载EMQX" class="headerlink" title="一、下载EMQX"></a>一、下载EMQX</h3><p>EMQX 官网提供了丰富的文档，Quick Start 地址：<a href="https://www.emqx.io/docs/zh/v5.2/">https://www.emqx.io/docs/zh/v5.2/</a></p><p>这里不建议安装最新版本，建议降低版本，若安装最新版本 emqx-5.3.0-windows-amdx64，则会启动异常，如下所示：</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/942aabe7d0f36e4de5fdc40513b5283d.image.png" alt="image.png"><br>本次测试使用 <a href="https://www.emqx.com/en/downloads/broker/4.4.19/emqx-4.4.19-otp24.3.4.6-windows-amd64.zip">emqx-4.4.19-otp24.3.4.6-windows-amd64</a> 版本，如下：</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/c3e927d346b91526e900a15fdee6f230.image.png" alt="image.png"></p><p>按照官网教程，进入到安装目录&#x2F;emqx&#x2F;bin 下，使用以下指令启动EMQX ：</p><p><a href="http://127.0.0.1:18083/">http://127.0.0.1:18083</a> ，输入默认用户名 <code>admin</code> 与默认密码 <code>public</code> ，登录进入 Dashboard，如下图：</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/161d2c912bf44eca16619dbea6c0405f.image.png" alt="image.png"></p><p>如果忘记了 Dashboard 登录密码，可以通过 cli 的 <code>admins</code> 命令进行重置，详情请参考 <a href="https://www.emqx.io/docs/zh/v5.2/admin/cli.html#admins">命令行 - admins</a>：</p><p>MQTTX 客户端是一款跨平台的 MQTT 桌面客户端工具。它提供用户友好的图形界面，让用户可以快速创建、测试 MQTT 连接，并进行MQTT 消息的发布和订阅。下载地址：<a href="https://mqttx.app/zh/downloads">https://mqttx.app/zh/downloads</a> 界面如下图：</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/dca88db90c49aa3861f011c8873f9f43.image.png" alt="image.png"></p><h2 id="客户端代码编写"><a href="#客户端代码编写" class="headerlink" title="客户端代码编写"></a>客户端代码编写</h2><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><p>接下来 我们使用MQTTnet，编写服务端和客户端测试一下：</p><ol><li><p>新建控制台项目，添加MQTTnet库。</p></li><li><p>按照上文中命令启动EMQX服务</p></li><li><p>使用MQTTX Desktop，设置 <strong>host</strong> 为<code>localhost</code> ，<strong>prot</strong> 为 <code>1883</code> ，连接服务，如下图：</p></li></ol><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/7900ba06c1349217b26ce475ff4e8588.image.png" alt="image.png"></p><h3 id="二、代码编写"><a href="#二、代码编写" class="headerlink" title="二、代码编写"></a>二、代码编写</h3><p>这样准备工作就做好了，编写创建发布客户端代码，如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">CreatePublishMQTTClient</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        MqttFactory mqttFactory = <span class="keyword">new</span> MqttFactory();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> mqttClient = mqttFactory.CreateMqttClient();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> mqttClientOptions = <span class="keyword">new</span> MqttClientOptionsBuilder()</span><br><span class="line">            .WithTcpServer(<span class="string">&quot;localhost&quot;</span>, <span class="number">1883</span>)</span><br><span class="line">            .WithClientId(<span class="string">&quot;Client1&quot;</span>)</span><br><span class="line">            .Build();</span><br><span class="line">        <span class="keyword">var</span> connectResult = <span class="keyword">await</span> mqttClient.ConnectAsync(mqttClientOptions, CancellationToken.None);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;mqttClient connectResult: &quot;</span> + connectResult.ResultCode.ToString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> msg = Console.ReadLine();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> topic = <span class="string">&quot;testtopic/publish&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> payload = <span class="string">$&quot;<span class="subst">&#123;msg&#125;</span> <span class="subst">&#123;DateTime.Now:yyyy-MM-dd HH:mm:ss:fff&#125;</span>&quot;</span>; <span class="comment">// 消息内容</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> message = <span class="keyword">new</span> MqttApplicationMessageBuilder()</span><br><span class="line">                .WithTopic(topic)</span><br><span class="line">                .WithPayload(payload)</span><br><span class="line">                .WithQualityOfServiceLevel(MqttQualityOfServiceLevel.AtLeastOnce) <span class="comment">// 设置消息质量</span></span><br><span class="line">                .WithRetainFlag(<span class="literal">false</span>) <span class="comment">// 是否保留消息</span></span><br><span class="line">                .Build();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">await</span> mqttClient.PublishAsync(message, CancellationToken.None);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(ex.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来再编写一个订阅客户端代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">CreateSubscribeMQTTClient</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        MqttFactory mqttFactory = <span class="keyword">new</span> MqttFactory();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> mqttClient = mqttFactory.CreateMqttClient();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> mqttClientOptions = <span class="keyword">new</span> MqttClientOptionsBuilder()</span><br><span class="line">            .WithTcpServer(<span class="string">&quot;localhost&quot;</span>, <span class="number">1883</span>)</span><br><span class="line">            .WithClientId(<span class="string">&quot;Client1&quot;</span>)</span><br><span class="line">            .Build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        mqttClient.ApplicationMessageReceivedAsync += (e) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Task task = Task.Factory.StartNew(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> msgArray = e.ApplicationMessage.Payload;</span><br><span class="line">                <span class="built_in">string</span> result = Encoding.UTF8.GetString(msgArray);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Received: &quot;</span> + result);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> task;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> connectResult = <span class="keyword">await</span> mqttClient.ConnectAsync(mqttClientOptions, CancellationToken.None);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;mqttClient connectResult: &quot;</span> + connectResult.ResultCode.ToString());</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> topic = <span class="string">&quot;testtopic/subscribe&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> subscribeOptions = <span class="keyword">new</span> MqttClientSubscribeOptionsBuilder()</span><br><span class="line">            .WithTopicFilter(topic)</span><br><span class="line">            .Build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> mqttClient.SubscribeAsync(subscribeOptions);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(ex.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来编写控制台Main方法，由于MQTT Client方法是异步的，所以为了避免控制台退出，在调用方法后，增加了一个<code>While</code> 死循环保证控制台程序是激活状态，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Choose a creation type: \r\n 1: PublishClient\r\n 2: SubscribeClient&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> type = Console.ReadLine();</span><br><span class="line">    <span class="keyword">switch</span> (type)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">            _ = CreatePublishMQTTClient();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">            _ = CreateSubscribeMQTTClient();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h3><p>先测试发布客户端，在控制台选择PublishClient，然后等待连接，可以看到连接结果为Success，发送两条测试消息，可以看到MQTTX Desktop 均收到。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/7c3a7884b0732e2aae5e871c2ae6f480.image.png" alt="image.png"></p><p>接下来测试订阅客户端，在控制台选择SubscribeClient，然后等待连接，可以看到连接结果为Success，在MQTTX Desktop 发布一条消息给订阅客户端，可以看到控制台程序中，接收到了测试消息。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/4536c15b406035365da3c60e88cff917.image.png" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说， 使用C#编写 MQTT相关代码的资料还是比较少的，但好在官方文档足够详细，今天试玩一下还是花费不少功夫的。本篇文章作抛砖引玉，浅浅了解MQTT这个轻量级的通讯协议，在辅以Demo加深理解，熟悉如何使用，文章末尾也提供诸多参考文章，方便大家借鉴学习。</p><blockquote><p>参考链接</p><p>MQTTnet Guthub地址： <a href="https://github.com/dotnet/MQTTnet">https://github.com/dotnet/MQTTnet</a></p><p>MQTT 入门指南：<a href="https://www.emqx.com/zh/mqtt-guide">https://www.emqx.com/zh/mqtt-guide</a></p><p>EMQX 官方文档：<a href="https://www.emqx.io/docs/zh/v5.2/">https://www.emqx.io/docs/zh/v5.2/</a></p><p>EMQX 命令行文档：<a href="https://www.emqx.io/docs/zh/v5.2/admin/cli.html">https://www.emqx.io/docs/zh/v5.2/admin/cli.html</a></p><p>EMQX 配置手册：<a href="https://www.emqx.io/docs/zh/v5.2/configuration/configuration-manual.html">https://www.emqx.io/docs/zh/v5.2/configuration/configuration-manual.html</a></p><p>EMQX基础功能： <a href="https://juejin.cn/post/7081629128650129416">https://juejin.cn/post/7081629128650129416</a></p><p>MQTTX 客户端下载：<a href="https://mqttx.app/zh/downloads">https://mqttx.app/zh/downloads</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 解读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NET面试题</title>
      <link href="/posts/63016.html"/>
      <url>/posts/63016.html</url>
      
        <content type="html"><![CDATA[<h2 id="NET-基础"><a href="#NET-基础" class="headerlink" title=".NET 基础"></a>.NET 基础</h2><h3 id="简述常用的委托及区别"><a href="#简述常用的委托及区别" class="headerlink" title="简述常用的委托及区别"></a>简述常用的委托及区别</h3><p>Delegate 委托 委托声明关键字 有返回值</p><p>Func 委托 有参有返回值 最多16个参数</p><p>Action 委托 有参无返回值 最多16个参数</p><p>委托可以作为参数在方法中传递</p><h3 id="事件与为委托的区别"><a href="#事件与为委托的区别" class="headerlink" title="事件与为委托的区别"></a>事件与为委托的区别</h3><p>委托：委托是一种数据类型，用于持有对一个或多个方法的引用。通过委托，你可以将方法作为参数传递给其他方法，实现回调机制，实现方法的动态调用</p><p>事件：事件是委托的一种特殊应用，用于实现发布-订阅模型。使用event关键字可以声明事件，并指定事件委托的类型。事件允许对象通知其他对象在特定情况下执行操作，实现松耦合的通信机制</p><h3 id="abstract-和-interface-的区别、"><a href="#abstract-和-interface-的区别、" class="headerlink" title="abstract 和 interface 的区别、"></a>abstract 和 interface 的区别、</h3><p>abstract:抽象类</p><p>intetface:接口</p><p>抽象类与接口的相同点是都可以继承</p><p>抽象类的抽象方法与接口的方法只能声明不能有具体的实现，并且继承的·子类必须实现继承的抽象方法、和虚方法</p><p>抽象类的虚方法子类可以继承并且子类可以重写抽象类的虚方法</p><p>const 与 readonly 都可以声明常量</p><h3 id="readonly-与-const-关键子的区别"><a href="#readonly-与-const-关键子的区别" class="headerlink" title="readonly 与 const 关键子的区别"></a>readonly 与 const 关键子的区别</h3><p>const 通常用于已知的常量 关键字在编译编译时确认值，通常需要在声明时赋值</p><p>readonly 通常用于运行时在程序运行时被访问 关键字可以在声明时赋值也可以在运行时赋值（在构造函数中初始化赋值）</p><h3 id="Linq-原理"><a href="#Linq-原理" class="headerlink" title="Linq 原理"></a>Linq 原理</h3><p>LINQ（Language Integrated Query）是一种在编程语言中集成查询功能的技术，它允许开发者通过类似于 SQL 的查询语法来查询和操作各种数据源，如集合、数据库、XML 等。LINQ 的核心原理涉及以下几个主要组件：</p><ol><li><strong>表达式树（Expression Tree）：</strong> LINQ 查询被表示为表达式树。表达式树是一种数据结构，它以树形的方式表示代码逻辑。在 LINQ 中，查询操作和条件会被转换为表达式树，这使得查询的逻辑可以在运行时进行解析和操作。</li><li><strong>查询提供程序（Query Providers）：</strong> 每个数据源（如 LINQ to SQL、LINQ to Entities）都有相应的查询提供程序，用于将表达式树转换为底层查询语言（如 SQL）以实际执行查询。查询提供程序充当了 LINQ 查询与实际数据源之间的桥梁。</li><li><strong>扩展方法（Extension Methods）：</strong> LINQ 查询操作通常是通过扩展方法实现的。扩展方法是一种特殊的静态方法，它可以为现有类型添加新的方法。这些方法的名称通常与查询操作（如 Where、Select、OrderBy 等）相对应。</li><li><strong>延迟执行（Deferred Execution）：</strong> LINQ 查询在默认情况下是延迟执行的。这意味着查询不会立即执行，而是在实际需要结果时才会执行。这可以提高性能，因为只有在需要时才会从数据源中获取数据。</li><li><strong>匿名类型（Anonymous Types）：</strong> LINQ 查询可以返回匿名类型的集合，这使得在查询结果中返回特定字段的子集成为可能。</li><li><strong>查询语法和方法语法：</strong> LINQ 提供了两种主要的查询语法：查询表达式和方法链。查询表达式使用类似于 SQL 的语法来编写查询，而方法链使用一系列扩展方法来编写查询。两种语法最终都会被翻译成表达式树。</li><li><strong>查询优化：</strong> 查询提供程序负责将表达式树转换为实际的查询语言。这包括将查询进行优化，以提高查询性能。</li></ol><h3 id="简述-net-core-生命周期的区别"><a href="#简述-net-core-生命周期的区别" class="headerlink" title="简述.net core 生命周期的区别"></a><a href="http://简述.net/">简述.net</a> core 生命周期的区别</h3><p>在ASP.NET Core中，依赖注入（DI）是一种设计模式，用于将组件的依赖关系从它们的实现中解耦，从而提高代码的可维护性和可测试性。ASP.NET Core通过内置的依赖注入容器来管理和解析服务的生命周期。以下是ASP.NET Core中支持的三种主要服务生命周期：</p><ol><li><strong>瞬时（Transient）生命周期：</strong><ul><li>对于瞬时生命周期的服务，每次调用**<code>IServiceProvider.GetService&lt;T&gt;</code>**都会创建一个新的实例。</li><li>这种生命周期适用于轻量级、无状态的服务，每次调用需要获得一个全新的实例。</li><li>在依赖注入容器中，可以使用**<code>services.AddTransient&lt;TService, TImplementation&gt;()</code>**方法注册瞬时生命周期的服务。</li></ul></li><li><strong>作用域（Scoped）生命周期：</strong><ul><li>对于作用域生命周期的服务，容器会为每个HTTP请求创建一个单独的实例，并在整个请求周期内重用这个实例。</li><li>这种生命周期适用于需要在一个HTTP请求范围内共享状态的服务，例如数据库上下文。</li><li>在依赖注入容器中，可以使用**<code>services.AddScoped&lt;TService, TImplementation&gt;()</code>**方法注册作用域生命周期的服务。</li></ul></li><li><strong>单例（Singleton）生命周期：</strong><ul><li>对于单例生命周期的服务，容器会创建一个单一的实例，并在整个应用程序的生命周期内重用这个实例。</li><li>这种生命周期适用于全局唯一的、可共享的状态，例如配置信息、日志记录器等。</li><li>在依赖注入容器中，可以使用**<code>services.AddSingleton&lt;TService, TImplementation&gt;()</code>**方法注册单例生命周期的服务。</li></ul></li></ol><p>ASP.NET Core的依赖注入容器负责创建、管理和释放这些不同生命周期的服务，确保按需创建、重用和销毁实例，以满足应用程序的需求。你可以根据每个服务的特性和需求来选择适当的生命周期。</p><h3 id="如何设计一个高并发接口（10k面试都被问到了）"><a href="#如何设计一个高并发接口（10k面试都被问到了）" class="headerlink" title="如何设计一个高并发接口（10k面试都被问到了）"></a>如何设计一个高并发接口（10k面试都被问到了）</h3><ol><li><strong>分布式架构：</strong> 采用分布式架构，将系统拆分为多个服务，每个服务负责特定的功能。这有助于将负载分散到多个服务器上，提高系统的扩展性和容错性。</li><li><strong>负载均衡：</strong> 使用负载均衡器将请求均匀分发给多个服务器，防止单个服务器过载。常见的负载均衡算法包括轮询、最少连接等。</li><li><strong>数据库优化：</strong> 使用数据库连接池、索引、分区、缓存等手段来优化数据库性能。避免频繁的数据库查询，可以采用缓存技术来减轻数据库的压力。</li><li><strong>缓存策略：</strong> 使用缓存来存储热门数据，减少对数据库的访问。选择适当的缓存策略，如内存缓存、分布式缓存（如 Redis）等。</li><li><strong>异步处理：</strong> 对于耗时的操作，可以采用异步处理来释放请求线程，提高系统的并发能力。使用异步编程模型，如 async&#x2F;await。</li><li><strong>限流和熔断：</strong> 实现请求的限流和熔断机制，防止因为高并发而导致系统崩溃。可以使用开源工具，如 Hystrix。</li><li><strong>优化数据库事务：</strong> 缩短数据库事务的时间，避免长时间持有数据库锁。考虑将事务拆分成更小的操作，减少锁的竞争。</li><li><strong>无状态设计：</strong> 尽量设计无状态的接口，将状态保存在客户端或共享缓存中，这有助于水平扩展和负载均衡。</li><li><strong>资源池：</strong> 使用资源池来管理资源，如数据库连接、线程等。资源池可以有效地分配和复用资源，减少资源的创建和销毁开销。</li><li><strong>监控和调优：</strong> 使用监控工具来实时监测系统性能，并根据监控数据进行调优。及时发现性能瓶颈并进行优化。</li><li><strong>并发测试：</strong> 在开发阶段进行并发测试，模拟多用户同时访问系统，发现并解决潜在的并发问题。</li><li><strong>水平扩展：</strong> 使用水平扩展来增加服务器数量，从而提高系统的并发能力。可以采用容器技术，如 Docker，来快速扩展。</li></ol><h3 id="讲述Grpc-和-Http-服务调用的区别"><a href="#讲述Grpc-和-Http-服务调用的区别" class="headerlink" title="讲述Grpc 和 Http 服务调用的区别"></a>讲述Grpc 和 Http 服务调用的区别</h3><p><strong>1. 通信协议：</strong></p><ul><li>gRPC：基于HTTP&#x2F;2协议的开源RPC框架，使用二进制流进行数据传输。HTTP&#x2F;2的多路复用和头部压缩特性使得 gRPC 在网络性能方面具有优势。</li><li>HTTP：传统的HTTP协议，通常使用文本格式传输数据，HTTP&#x2F;1.1和HTTP&#x2F;2都被广泛使用。</li></ul><p><strong>2. 数据格式：</strong></p><ul><li>gRPC：支持多种序列化格式，如Protocol Buffers（protobuf）、JSON等。Protocol Buffers 是 gRPC 默认的序列化格式，其二进制编码使得数据更小、传输更快。</li><li>HTTP：通常使用JSON、XML等文本格式进行数据传输，相对于二进制格式，数据量较大，传输速度较慢。</li></ul><p><strong>3. 接口定义：</strong></p><ul><li>gRPC：使用Protocol Buffers语言定义服务和消息的接口，然后通过gRPC工具生成对应的客户端和服务器端代码。</li><li>HTTP：通常使用REST（Representational State Transfer）风格定义接口，使用HTTP动词（GET、POST、PUT、DELETE等）进行操作。</li></ul><p><strong>4. 序列化与反序列化：</strong></p><ul><li>gRPC：使用高效的二进制序列化和反序列化，效率较高。</li><li>HTTP：使用文本格式进行序列化和反序列化，效率相对较低。</li></ul><p><strong>5. 性能：</strong></p><ul><li>gRPC：由于基于HTTP&#x2F;2和二进制传输，具有较低的延迟和更高的吞吐量，适用于高性能的场景。</li><li>HTTP：性能较 gRPC 差一些，但适用于各种类型的应用。</li></ul><p><strong>6. 安全性：</strong></p><ul><li>gRPC：支持TLS加密，可以保障通信的安全性。</li><li>HTTP：也支持TLS加密，确保数据在传输过程中的安全。</li></ul><p><strong>7. 支持的语言：</strong></p><ul><li>gRPC：提供多种编程语言的支持，包括C++、Java、Python、Go等。</li><li>HTTP：几乎所有编程语言都支持对HTTP的调用。</li></ul><p><strong>8. 适用场景：</strong></p><ul><li>gRPC：适用于高性能、大规模并发、低延迟的场景，如微服务架构中的服务间通信。</li><li>HTTP：适用于广泛的Web应用程序、浏览器和服务器之间的通信。</li></ul><h3 id="ElstaticSearch基本语法以及-NetCore中的使用"><a href="#ElstaticSearch基本语法以及-NetCore中的使用" class="headerlink" title="ElstaticSearch基本语法以及.NetCore中的使用"></a>ElstaticSearch基本语法以及.NetCore中的使用</h3><h3 id="死锁的原因、如何解决死锁"><a href="#死锁的原因、如何解决死锁" class="headerlink" title="死锁的原因、如何解决死锁"></a>死锁的原因、如何解决死锁</h3><p>死锁是多线程或并发程序中的一种常见问题，它发生在两个或多个线程相互等待对方释放资源，从而导致所有线程都无法继续执行的情况。死锁通常涉及以下四个必要条件：</p><ol><li><strong>互斥条件（Mutual Exclusion）：</strong> 指资源只能同时被一个线程占用，即资源不能被多个线程同时访问。</li><li><strong>请求与保持条件（Hold and Wait）：</strong> 指线程在持有一些资源的同时还在请求其他资源，而且不会释放已持有的资源。</li><li><strong>不可剥夺条件（No Preemption）：</strong> 指已被一个线程获得的资源不能被其他线程强制性地剥夺，只能由持有者线程释放。</li><li><strong>循环等待条件（Circular Wait）：</strong> 指多个线程之间形成了一种循环等待资源的关系，每个线程都在等待下一个线程释放资源。</li></ol><p>为了解决死锁问题，可以考虑以下方法：</p><ol><li><strong>破坏死锁必要条件：</strong> 针对四个死锁必要条件，可以采取措施来破坏其中一个或多个条件。例如，通过引入超时机制（不可剥夺条件），限制线程持有资源的数量（循环等待条件）等。</li><li><strong>使用资源分级策略：</strong> 将资源进行分类和分级，确保线程只能按照一定的顺序申请资源，从而避免循环等待条件。</li><li><strong>使用事务和锁定顺序：</strong> 在获取多个资源时，始终按照相同的顺序获取，这有助于避免不同线程之间发生死锁。</li><li><strong>使用超时和重试：</strong> 对于获取锁的操作，可以设置超时时间，如果超过一定时间仍无法获取锁，就放弃或重新尝试。</li><li><strong>死锁检测和恢复：</strong> 在一些情况下，可以使用算法检测死锁的发生，一旦检测到，可以采取一些策略来中断其中一个或多个线程，以解除死锁。</li><li><strong>资源剥夺和回退：</strong> 当检测到死锁时，可以中断一些线程并释放其占用的资源，然后重新开始这些线程。</li><li><strong>合理设计并发：</strong> 设计良好的并发架构，避免不必要的资源占用，合理规划资源的使用，可以减少死锁的发生。</li></ol><h3 id="讲述工作中常用的设计模式及实现"><a href="#讲述工作中常用的设计模式及实现" class="headerlink" title="讲述工作中常用的设计模式及实现"></a>讲述工作中常用的设计模式及实现</h3><p>单例模式(单例的实现方式)</p><p>单例的实现方式一般是使用lock锁、私有化无参构造函数</p><ol><li><p><strong>经典懒汉式</strong>（Lazy Initialization）：</p><p> 这是最常见的单例模式实现，它在需要的时候才创建实例。可以使用 <strong><code>Lazy&lt;T&gt;</code></strong> 类来实现延迟初始化。</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy code</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Lazy&lt;Singleton&gt; instance = <span class="keyword">new</span> Lazy&lt;Singleton&gt;(() =&gt; <span class="keyword">new</span> Singleton());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton Instance =&gt; instance.Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>线程安全懒汉式</strong>：</p><p> 这是懒汉式的线程安全版本，通过加锁来确保在多线程环境下只有一个实例被创建。</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy code</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> lockObject = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (lockObject)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>饿汉式</strong>：</p><p> 在类加载的时候就创建实例，保证在任何线程访问之前都已经存在实例。这可能会导致性能问题，因为即使不需要实例，也会被创建出来。</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy code</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton Instance =&gt; instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>双重检查锁定</strong>：</p><p> 这是一种优化过的懒汉式，使用了双重检查来减少加锁的频率，提高性能。</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy code</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> lockObject = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">lock</span> (lockObject)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>工厂模式</p><ol><li><p><strong>简单工厂模式</strong>（Simple Factory Pattern）：</p><p> 这是工厂模式的最简单形式，由一个工厂类负责创建多个产品类的实例。</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SimpleFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProduct <span class="title">CreateProduct</span>(<span class="params"><span class="built_in">string</span> type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Invalid product type&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IProduct</span> &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductA</span> : <span class="title">IProduct</span> &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductB</span> : <span class="title">IProduct</span> &#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>工厂方法模式</strong>（Factory Method Pattern）：</p><p> 工厂方法模式将每个具体产品的创建逻辑都封装在对应的工厂类中，每个产品都对应一个工厂类。</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IProduct <span class="title">CreateProduct</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteFactoryA</span> : <span class="title">IFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProduct <span class="title">CreateProduct</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteFactoryB</span> : <span class="title">IFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProduct <span class="title">CreateProduct</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IProduct</span> &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductA</span> : <span class="title">IProduct</span> &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductB</span> : <span class="title">IProduct</span> &#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>抽象工厂模式</strong>（Abstract Factory Pattern）：</p><p> 抽象工厂模式用于创建一系列相关或依赖的对象，将产品的创建逻辑抽象成一个接口，然后具体工厂实现这个接口来创建一组产品。</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy code</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IProductA <span class="title">CreateProductA</span>()</span>;</span><br><span class="line">    <span class="function">IProductB <span class="title">CreateProductB</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteFactory1</span> : <span class="title">IAbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProductA <span class="title">CreateProductA</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProductB <span class="title">CreateProductB</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteFactory2</span> : <span class="title">IAbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProductA <span class="title">CreateProductA</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProductB <span class="title">CreateProductB</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IProductA</span> &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductA1</span> : <span class="title">IProductA</span> &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductA2</span> : <span class="title">IProductA</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IProductB</span> &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductB1</span> : <span class="title">IProductB</span> &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductB2</span> : <span class="title">IProductB</span> &#123; &#125;</span><br></pre></td></tr></table></figure></li></ol><p>这些是工厂模式在 C# 中的几种常见实现方式。每种方式都有不同的适用场景，可以根据项目的需求和复杂度来选择合适的工厂模式实现。</p><h3 id="简述异步与多线程的区别"><a href="#简述异步与多线程的区别" class="headerlink" title="简述异步与多线程的区别"></a>简述异步与多线程的区别</h3><p><strong>异步编程</strong>：</p><ol><li><strong>执行流程控制</strong>：异步编程旨在改善程序的执行流程控制，以便在等待耗时的操作（如 I&#x2F;O 操作）完成时，能够释放主线程，不会阻塞其它任务的执行。</li><li><strong>单线程</strong>：异步编程在 .NET 中通常基于单线程的事件循环模型。异步操作可能会创建新的线程这个取决于线程池是否会给当前异步分配新的线程，而是通过异步等待（如 <strong><code>async/await</code></strong>）来挂起执行，并在操作完成后返回主线程。</li><li><strong>适用场景</strong>：适用于需要等待 I&#x2F;O 操作、网络请求等耗时操作完成的情况，以避免阻塞主线程，提高应用的响应性。</li></ol><p><strong>多线程编程</strong>：</p><ol><li><strong>执行流程控制</strong>：多线程编程旨在实现真正的并行执行，可以在多个线程上同时执行不同的任务。</li><li><strong>多线程</strong>：多线程编程创建多个线程来并发执行任务，每个线程有自己的执行流程，可以在不同的核心上并行执行。</li><li><strong>线程管理</strong>：多线程编程需要考虑线程的创建、销毁、同步、互斥等问题，涉及到了更多的线程管理细节。</li><li><strong>并发性与并行性</strong>：多线程编程可以实现并行性，即在多个线程上同时执行任务。但要注意，多线程也可以导致竞态条件、死锁等问题，需要合适的同步机制。</li><li><strong>适用场景</strong>：适用于需要高性能计算和处理的情况，例如多核处理器上的并行计算任务。</li></ol><p>在 .NET 中，可以使用以下技术来实现异步编程和多线程编程：</p><ul><li>异步编程：使用 <strong><code>async</code></strong> 和 <strong><code>await</code></strong> 关键字来定义异步方法，并利用异步等待来实现非阻塞的操作。</li><li>多线程编程：使用 <strong><code>Thread</code></strong> 类、<strong><code>Task</code></strong> 类、<strong><code>ThreadPool</code></strong> 等来创建和管理线程，并利用线程同步机制（如 <strong><code>Monitor</code></strong>、<strong><code>Mutex</code></strong>、<strong><code>Semaphore</code></strong> 等）来避免竞态条件等问题。</li></ul><h3 id="为什么使用异步"><a href="#为什么使用异步" class="headerlink" title="为什么使用异步"></a>为什么使用异步</h3><p>异步编程旨在改善程序的执行流程控制，以便在等待耗时的操作（如 I&#x2F;O 操作）完成时，能够释放主线程，不会阻塞其它任务的执行。使用异步能够充分使用计算机的cpu资源，提高运行性能并且异步操作的线程是由线程池操作的，在使用异步的时候我们通常不用在意线程的创建、销毁、同步、互斥等问题，同时还能充分的使用线程创建的线程（一个异步操作可能会创建一个新的线程 ）。</p><h3 id="简述DDD"><a href="#简述DDD" class="headerlink" title="简述DDD"></a>简述DDD</h3><p>领域驱动设计（Domain-Driven Design，简称 DDD）是一种软件设计方法论，强调在软件开发中将领域（Domain）作为核心，以解决复杂业务逻辑和领域模型的建立为重点。DDD 关注于将业务需求和软件设计紧密联系起来，以实现更清晰、可维护、可扩展的软件系统。</p><p>以下是 DDD 的一些关键概念和原则：</p><ol><li><strong>领域</strong>（Domain）：领域是指软件系统所解决的业务问题领域，包括业务规则、流程、概念等。</li><li><strong>领域模型</strong>（Domain Model）：领域模型是将业务领域的核心概念、规则和流程抽象成软件对象的模型。它在 DDD 中扮演着核心角色，帮助开发者更好地理解和表达业务逻辑。</li><li><strong>战术设计</strong>（Tactical Design）：战术设计涉及如何将领域模型映射到实际的代码实现。这包括实体（Entities）、值对象（Value Objects）、聚合（Aggregates）、仓储（Repositories）等设计模式的应用。</li><li><strong>战略设计</strong>（Strategic Design）：战略设计关注整体系统架构，如如何组织领域模型、模块划分、领域服务、上下文映射等。</li><li><strong>限界上下文</strong>（Bounded Context）：领域驱动设计中，不同的部分可能使用不同的术语、规则和模型，为了解决不同领域模型之间的冲突，将领域模型划分为不同的限界上下文。</li><li><strong>聚合</strong>（Aggregate）：聚合是一组关联对象的根，用于保证对象的一致性和完整性。聚合内部的对象之间可以被外部对象访问，但外部对象不能直接访问聚合内部的对象。</li><li><strong>领域事件</strong>（Domain Events）：领域事件是表示领域中发生的事情的对象。它可以用于在不同的限界上下文之间传递信息，触发其他操作。</li></ol><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p><strong>参考答案：</strong></p><ol><li><strong>读未提交（Read Uncommitted）</strong></li></ol><ul><li><p>允许读取未提交的数据变更（脏读）。</p></li><li><p>解决问题：无。</p></li></ul><ol start="2"><li><strong>读已提交（Read Committed）</strong></li></ol><ul><li><p>只能读取已提交的数据（避免脏读）。</p></li><li><p>解决问题：脏读。</p></li></ul><ol start="3"><li><strong>可重复读（Repeatable Read）</strong></li></ol><ul><li><p>确保同一事务中多次读取同一数据的结果相同（避免脏读、不可重复读）。</p></li><li><p>解决问题：脏读、不可重复读。</p></li></ul><ol start="4"><li><strong>可串行化（Serializable）</strong></li></ol><ul><li><p>完全隔离事务，避免脏读、不可重复读、幻读。</p></li><li><p>解决问题：脏读、不可重复读、幻读。</p></li></ul><ol start="5"><li><strong>快照（Snapshot）</strong></li></ol><ul><li>使用版本控制实现一致性读，避免阻塞。</li></ul><h3 id="简述常用的锁以及区别"><a href="#简述常用的锁以及区别" class="headerlink" title="简述常用的锁以及区别"></a>简述常用的锁以及区别</h3><ol><li><strong>互斥锁（Mutex）</strong>：<ul><li>互斥锁是一种最基本的锁，它用于确保在同一时间只有一个线程能够进入临界区。</li><li>互斥锁可以被单独的线程锁定和解锁，这意味着只有锁定了互斥锁的线程可以访问临界区。</li><li>只能由锁定线程释放，不适合在同一线程中多次加锁。</li></ul></li><li><strong>信号量（Semaphore）</strong>：<ul><li>信号量是一种允许多个线程同时访问共享资源的锁，但是可以限制并发访问的线程数量。</li><li>信号量维护一个可用许可数量，线程可以通过获取许可来进入临界区，访问完后释放许可。</li><li>适用于限制同时访问某个资源的线程数量，例如线程池中的线程数控制。</li></ul></li><li><strong>读写锁（Read-Write Lock）</strong>：<ul><li>读写锁允许多个线程同时读取共享资源，但只允许一个线程写入资源。</li><li>当没有写入线程时，多个读取线程可以同时持有读锁。</li><li>适用于读多写少的场景，可以提高并发性能。</li></ul></li><li><strong>自旋锁（Spin Lock）</strong>：<ul><li>自旋锁是一种忙等待的锁，它会一直尝试获取锁，直到成功为止，不会让线程进入睡眠状态。</li><li>自旋锁适用于临界区非常短小、线程等待时间很短的情况，避免线程切换带来的开销。</li></ul></li></ol><h2 id="乐观锁-vs-悲观锁"><a href="#乐观锁-vs-悲观锁" class="headerlink" title="乐观锁 vs 悲观锁"></a>乐观锁 vs 悲观锁</h2><h3 id="核心对比表"><a href="#核心对比表" class="headerlink" title="核心对比表"></a><strong>核心对比表</strong></h3><table><thead><tr><th><strong>对比维度</strong></th><th><strong>乐观锁（Optimistic Locking）</strong></th><th><strong>悲观锁（Pessimistic Locking）</strong></th></tr></thead><tbody><tr><td><strong>核心思想</strong></td><td>假设冲突发生概率低，只在提交时检查冲突</td><td>假设冲突频繁发生，提前加锁防止并发修改</td></tr><tr><td><strong>实现方式</strong></td><td>版本号（Version）、时间戳（Timestamp）、CAS（Compare and Set）</td><td>数据库锁（行锁、表锁）、<code>SELECT ... FOR UPDATE</code></td></tr><tr><td><strong>适用场景</strong></td><td>读多写少（如电商库存、文档协作编辑）</td><td>写多读少（如银行转账、高并发库存扣减）</td></tr><tr><td><strong>性能开销</strong></td><td>冲突少时性能高，冲突多时可能频繁回滚</td><td>锁竞争可能导致阻塞，影响并发性能</td></tr><tr><td><strong>一致性保证</strong></td><td>最终一致性（提交时检测冲突）</td><td>强一致性（通过锁直接阻塞并发操作）</td></tr><tr><td><strong>典型实现</strong></td><td>EF Core 的 <code>ConcurrencyCheck</code>、HTTP 的 <code>If-Match</code></td><td>SQL Server 的 <code>UPDLOCK</code>、MySQL 的 <code>FOR UPDATE</code></td></tr></tbody></table><hr><h3 id="1-乐观锁（Optimistic-Locking）"><a href="#1-乐观锁（Optimistic-Locking）" class="headerlink" title="1. 乐观锁（Optimistic Locking）"></a><strong>1. 乐观锁（Optimistic Locking）</strong></h3><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a><strong>工作原理</strong></h3><ol><li>读取数据时获取版本号（如 <code>Version=1</code>）。</li><li>修改数据前检查版本号是否变化：<ul><li>若版本号一致，提交修改并更新版本号（如 <code>Version=2</code>）。</li><li>若版本号不一致，抛出异常或重试。</li></ul></li></ol><h3 id="代码示例（EF-Core）"><a href="#代码示例（EF-Core）" class="headerlink" title="代码示例（EF Core）"></a><strong>代码示例（EF Core）</strong></h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line">&#123;   <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;    </span><br><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;   </span><br><span class="line">[<span class="meta">ConcurrencyCheck</span>] <span class="comment">// 标记为并发令牌    </span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> Version &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;&#125;</span><br><span class="line"><span class="comment">// 修改数据时自动检查版本号</span></span><br><span class="line"><span class="keyword">var</span> product = context.Products.Find(<span class="number">1</span>);</span><br><span class="line">product.Name = <span class="string">&quot;New Name&quot;</span>;</span><br><span class="line">context.SaveChanges(); <span class="comment">// 若版本号冲突，抛出 DbUpdateConcurrencyException</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简述认证授权流程（工作中常用的认证授权策略）"><a href="#简述认证授权流程（工作中常用的认证授权策略）" class="headerlink" title="简述认证授权流程（工作中常用的认证授权策略）"></a>简述认证授权流程（工作中常用的认证授权策略）</h3><p>看我这篇文章就够了</p><p><a href="https://www.cnblogs.com/wygbjd/p/17247847.html">.net core 自定义授权策略提供程序进行权限验证 - 布吉岛1c - 博客园 (cnblogs.com)</a></p><h3 id="简述常用的信号量"><a href="#简述常用的信号量" class="headerlink" title="简述常用的信号量"></a>简述常用的信号量</h3><p>看我这篇文章就够了（文章涉及的demo已更新）</p><p><a href="https://www.cnblogs.com/wygbjd/p/16325316.html">关于c#多线程中的几个信号量 - 布吉岛1c - 博客园 (cnblogs.com)</a></p><h3 id="RabbitMq"><a href="#RabbitMq" class="headerlink" title="RabbitMq"></a>RabbitMq</h3><p>看马先生这篇文章就够了</p><p><a href="https://www.cnblogs.com/fantasy-ke/p/17555153.html">https://www.cnblogs.com/fantasy-ke/p/17555153.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu配置Clash代理服务</title>
      <link href="/posts/82baa522.html"/>
      <url>/posts/82baa522.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>下载配置文件或者导入订阅连接配置</p><ol><li><p>下载连接</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wget</span> <span class="literal">-O</span> clash.gz </span><br><span class="line">https://github.com/Dreamacro/clash/releases/download/v1.<span class="number">17.0</span>/clash<span class="literal">-linux-amd64-v1</span>.<span class="number">17.0</span>.gz</span><br></pre></td></tr></table></figure></li><li><p>解压</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip <span class="literal">-d</span> clash.gz</span><br></pre></td></tr></table></figure></li><li><p>赋值权限</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +<span class="number">777</span> clash</span><br></pre></td></tr></table></figure></li><li><p>第一次执行创建必要文件：.&#x2F;clash</p><ol><li><p>安装过程可能会出现网络问题下载不了，可以直接复制下载链接到外部现在再传进去是一样的。</p><p> <img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/ca93e4ecabc413daa0293cd168d0d9f0.png" alt="Untitled.png"></p></li></ol></li><li><p>去代理软件复制节点订阅地址</p><ol><li>这里可以复制所有节点地址也可以自己配置节点然后生成地址</li></ol><p> <img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/6965f4889f6da058b6b06981bf077a26.png" alt="Untitled.png"></p></li><li><p>配置文件获取。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre><code> 命令行获取 <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wget</span> <span class="literal">-U</span> <span class="string">&quot;Mozilla/6.0&quot;</span> <span class="literal">-O</span> ~/.config/clash/config.yaml 你的Clash订阅链接网址</span><br></pre></td></tr></table></figure></code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><pre><code> 用windows的clash软件获取配置文件 ![Untitled.png](https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/e82aa3080cae65d53b1e2fe3403b579c.png)</code></pre></li><li><p>将获取的config文件替换到&#x2F;root&#x2F;.config&#x2F;clash&#x2F;config.yaml</p></li><li><p>最后的文件结构应该是这样</p><p> <img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/5d6b68d06439985be4805b940da19f1e.png" alt="Untitled.png"></p></li></ol></li><li><p>代理改成手动并配置端口</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑环境变量</span></span><br><span class="line">sudo nano /etc/environment</span><br><span class="line"><span class="comment"># 配置手动代理</span></span><br><span class="line">http_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line">https_proxy=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line">socks_proxy=<span class="string">&quot;socks5h://127.0.0.1:7891&quot;</span></span><br><span class="line">no_proxy=<span class="string">&quot;localhost,127.0.0.1,::1&quot;</span></span><br><span class="line"><span class="comment"># CTRL+X 保存</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用环境变量 </span></span><br><span class="line">source /etc/environment</span><br><span class="line"><span class="comment"># 查看代理服务配置</span></span><br><span class="line">env | grep <span class="literal">-i</span> proxy</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure></li><li><p>启动clash</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启clash服务</span></span><br><span class="line">sudo systemctl restart clash</span><br><span class="line"><span class="comment"># 查看clash服务状态</span></span><br><span class="line">sudo systemctl status clash</span><br><span class="line"><span class="comment"># 启动clash服务</span></span><br><span class="line">sudo systemctl <span class="built_in">start</span> clash</span><br><span class="line"><span class="comment"># 停止clash服务</span></span><br><span class="line">sudo systemctl stop clash</span><br><span class="line"><span class="comment"># 设为开机启动</span></span><br><span class="line">systemctl enable clash</span><br></pre></td></tr></table></figure></li><li><p>在官方提供的配置链接里指定节点</p><ol><li><p>打开链接</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://clash.razord.top/</span><br></pre></td></tr></table></figure></li><li><p>配置</p><p> <img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/c6b561766ed350dd630d38a7bcc083f2.png" alt="Untitled.png"></p><p> <img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/4031b0506600bfc2f6c918f519e9fa12.png" alt="Untitled.png"></p></li></ol></li><li><p>测试 goolge.com 访问，不要用ping</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl google.com</span></span><br><span class="line">&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http<span class="literal">-equiv</span>=<span class="string">&quot;content-type&quot;</span> content=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;TITLE&gt;<span class="number">301</span> Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;</span><br><span class="line">&lt;H1&gt;<span class="number">301</span> Moved&lt;/H1&gt;</span><br><span class="line">The document has moved</span><br><span class="line">&lt;A HREF=<span class="string">&quot;http://www.google.com/&quot;</span>&gt;here&lt;/A&gt;.</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br></pre></td></tr></table></figure></li><li><p>clash成功截图</p><p> <img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/ce49b00b216f8f4f8fea213e42516aab.png" alt="Untitled.png"></p></li><li><p>想恢复正常上网把配置的端口删除然后重启即可。</p></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/647531549">Ubuntu系统安装Clash代理 - 知乎 (zhihu.com)</a></p><p><a href="http://www.icodebang.com/article/356283">Ubuntu 安装配置代理（Linux for clash + proxychains） - 爱码帮™分享编程知识和开发经验 (icodebang.com)</a></p><h2 id="docker-compose安装clash"><a href="#docker-compose安装clash" class="headerlink" title="docker compose安装clash"></a>docker compose安装clash</h2><p>参考链接：<a href="https://www.frank9.com/ubuntu-server-clash-setup.html">ubuntu-server20.04安装clash，并快速配置到可用 - linux学习记录 (frank9.com)</a></p><p><a href="https://prod-files-secure.s3.us-west-2.amazonaws.com/aea13b6e-c8d5-4828-b9ab-d4227cf6275a/70d8dcd7-130e-44c2-9b45-7e4695b40cd2/docker-compose.yml?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466U5VSUYZ4/20250222/us-west-2/s3/aws4_request&X-Amz-Date=20250222T073611Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEL7//////////wEaCXVzLXdlc3QtMiJHMEUCIQC1o24UVLhwO7gOwqItwP0oOFntc6c6aupJvI+I0b2PUAIgJeQrQuBb8lKbaU6Hc09HYSKGy8Py3UR6a0AVNcdv6kcqiAQI5///////////ARAAGgw2Mzc0MjMxODM4MDUiDHMH0eVoVDp6wA8nuCrcA8ht/1mkrWMMLd0FZ1s8C9xOnhZVYjj95JZdrQvfojGoIxZfxnqqWa/yA+movPZfBJseHHkukCBMSR1xi//y/l33B9e0x0IT3AMQ1M/S7IGBybwp65Uj011Nbel0PEM5ql9MtF6uUcLegDhcZ9RJ998LA9J5+guvi9Pf3zrUgqDRBBAVBNcGrHSxcGan+7B/9hlP0o6mxERB1S8P71jrRrwvyiylDff6W3/8SgfYGJD4xvR6ZmSpLBanpIbVzaazx/CAKVj+6uL+leYi2VpsfVQgyd72BeyVj1aqgO0SLRLgiagvTv1Q86TPFgSgbTNYmBx4hUJjthTvSJZxpVWRBbBsPV8x/HXcTaIf5RS6p7iC6UM6uJqWbsxgDb9Lmp+56d4A7WSY2KzArfD9+FH8eDM/18wiT12+gLco4tD/poApzSPqBhJ8xAHH28UiCgMHHXd+LgQztnsFGm1qmVQ/traqBsBVaQuaP9E5RI9JZDeaVG1ClZqqGC5dyauJyWmVIhGasrIlt392aulPkvVVgOKuWpWx+QKhOI9rnLRUqybx4q7+gZYMd5vzRBc52ovLTxl57hOQuNitlQEnwhwggw6pv5MViolZgEfcGurGEucD+4xZWiFsQs32ZAvtMKvI5b0GOqUB7SymtQlmpB7Q85lCwRdmYoQ9/1pcUkcIJdVJNCYQOCegDVkXDgpxvFn7Imf87/jucqtR4wCtP5ku6uzTu4FMnRe691pmGYpahdhCdDoB+yXQcDgZq35uLi0Wb0w5lQCaDEhwLy4RtjkY5NWpNBdBhsEChmAdn93k5TaGiniCVwhd/FqJxexayUuRD2zKce5VGfG/LrEiKnGU7J+KKduFSGlJWJUE&X-Amz-Signature=4a6c4cd1a525519e08c670a5d4715c468266fa52c26f8bcfba60756e3f560636&X-Amz-SignedHeaders=host&x-id=GetObject">docker-compose.yml</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net测试卷题一</title>
      <link href="/posts/59377.html"/>
      <url>/posts/59377.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、什么是面向对象语言中的多态-给我一个例子。"><a href="#1、什么是面向对象语言中的多态-给我一个例子。" class="headerlink" title="1、什么是面向对象语言中的多态?给我一个例子。"></a><strong>1、什么是面向对象语言中的多态?给我一个例子。</strong></h2><ul><li>有多态之前必须要有继承，只有多个类同时继承了同一个类，才有多态这样的说法。在继承关系的前提下，实例化出不同的对象，这些对象调用相同的方法，但是却表现出不同的行为，这就叫做多态。</li><li>在 C#语言中体现多态有三种方式：虚方法，抽象类， 接口。</li></ul><h2 id="2、抽象类和接口的区别有哪些，在使用的时候如何选择"><a href="#2、抽象类和接口的区别有哪些，在使用的时候如何选择" class="headerlink" title="2、抽象类和接口的区别有哪些，在使用的时候如何选择?"></a><strong>2、抽象类和接口的区别有哪些，在使用的时候如何选择?</strong></h2><ul><li>相同点<ul><li>两者都是抽象类，都不能实例化。</li><li>interface实现类及abstrct class的子类都必须要实现已经声明的抽象方法</li></ul></li><li>不同点<ul><li>接口基本上不具备继承的任何具体特点,它仅仅承诺了能够调用的方法;</li><li>一个类一次可以实现若干个接口,但是只能扩展一个父类</li><li>接口可以用于支持回调,而继承并不具备这个特点.</li><li>抽象类不能被密封。</li><li>抽象类实现的具体方法默认为虚的，但实现接口的类中的接口方法却默认为非虚的，当然您也可以声明为虚的.</li><li>（接口）与非抽象类类似，抽象类也必须为在该类的基类列表中列出的接口的所有成员提供它自己的实现。但是，允许抽象类将接口方法映射到抽象方法上。</li><li>抽象类实现了oop中的一个原则，把可变的与不可变的分离。抽象类和接口就是定义为不可变的，而把可变的座位子类去实现。</li><li>好的接口定义应该是具有专一功能性的，而不是多功能的，否则造成接口污染。如果一个类只是实现了这个接口的中一个功能，而不得不去实现接口中的其他方法，就叫接口污染。</li></ul></li><li>使用<ul><li>如果预计要创建组件的多个版本，则创建抽象类。抽象类提供简单的方法来控制组件版本。</li><li>如果创建的功能将在大范围的全异对象间使用，则使用接口。如果要设计小而简练的功能块，则使用接口。</li><li>如果要设计大的功能单元，则使用抽象类.如果要在组件的所有实现间提供通用的已实现功能，则使用抽象类。</li><li>抽象类主要用于关系密切的对象；而接口适合为不相关的类提供通用功能。</li></ul></li><li>以下是我在网上看到的几个形象比喻,真的非常不错:<ul><li>飞机会飞，鸟会飞，他们都继承了同一个接口“飞”；但是F22属于飞机抽象类，鸽子属于鸟抽象类。</li><li>就像铁门木门都是门（抽象类），你想要个门我给不了（不能实例化），但我可以给你个具体的铁门或木门（多态）；而且只能是门，你不能说它是窗（单继承）；一个门可以有锁（接口）也可以有门铃（多实现）。门（抽象类）定义了你是什么，接口（锁）规定了你能做什么（一个接口最好只能做一件事，你不能要求锁也能发出声音吧（接口污染）。</li></ul></li></ul><h2 id="3、Action和Func有什么区别"><a href="#3、Action和Func有什么区别" class="headerlink" title="3、Action&lt;&gt;和Func&lt;&gt;有什么区别"></a><strong>3、Action&lt;&gt;和Func&lt;&gt;有什么区别</strong></h2><ul><li><strong>Action：表示不带返回值，可传递0到16个泛型参数的委托</strong></li><li><strong>Func：表示带泛型返回值，可传递0到16个泛型参数的委托</strong></li></ul><h2 id="4、线程池中的线程在完成任务后的行为是什么"><a href="#4、线程池中的线程在完成任务后的行为是什么" class="headerlink" title="4、线程池中的线程在完成任务后的行为是什么"></a><strong>4、线程池中的线程在完成任务后的行为是什么</strong></h2><ul><li>线程不会被销毁，而是重新回到池子里等待下一个任务</li></ul><h2 id="5、什么是泛型，以及它的好处"><a href="#5、什么是泛型，以及它的好处" class="headerlink" title="5、什么是泛型，以及它的好处?"></a><strong>5、什么是泛型，以及它的好处?</strong></h2><ul><li>通过泛型可以定义类型安全类，而不会损害类型安全、性能或工作效率。您只须一次性地将服务器实现为一般服务器，同时可以用任何类型来声明和使用它。</li></ul><h2 id="6、C-中的对象被序列化时，它被转换成什么"><a href="#6、C-中的对象被序列化时，它被转换成什么" class="headerlink" title="6、C#中的对象被序列化时，它被转换成什么"></a><strong>6、C#中的对象被序列化时，它被转换成什么</strong></h2><ul><li>json字符串</li></ul><h2 id="7、break-和-continue-关键字的区别"><a href="#7、break-和-continue-关键字的区别" class="headerlink" title="7、break 和 continue 关键字的区别"></a><strong>7、break 和 continue 关键字的区别</strong></h2><ul><li>break：跳出循环</li><li>continue：跳出本次循环</li></ul><h2 id="8、什么是队列"><a href="#8、什么是队列" class="headerlink" title="8、什么是队列"></a><strong>8、什么是队列</strong></h2><ul><li>“先进先出” 的原则</li><li>队列存储结构的实现有以下两种方式：<ul><li><a href="http://data.biancheng.net/view/301.html">顺序队列</a>：在<a href="http://data.biancheng.net/view/296.html">顺序表</a>的基础上实现的队列结构；</li><li><a href="http://data.biancheng.net/view/174.html">链队列</a>：在<a href="http://data.biancheng.net/view/298.html">链表</a>的基础上实现的队列结构；</li></ul></li></ul><h2 id="9、简述你理解的-Linq"><a href="#9、简述你理解的-Linq" class="headerlink" title="9、简述你理解的 Linq"></a><strong>9、简述你理解的 Linq</strong></h2><ul><li>LINQ（发音：Link）是语言级集成查询（Language INtegrated Query）</li><li>LINQ是一种用来进行数据访问的编程模型，使得.NET语言可以直接支持数据查询</li><li>LINQ的目标是降低访问数据的复杂度</li><li>LINQ可以用统一的方法访问不同类型的数据，可以将数据作为对象使用</li><li>能够更好地与编程模型集成</li></ul><h2 id="10、简述-C-的反射"><a href="#10、简述-C-的反射" class="headerlink" title="10、简述 C#的反射"></a><strong>10、简述 C#的反射</strong></h2><ul><li>反射指的是提供封装程序集、模块和类型的对象（Type类型）。可以使用反射动态创建类型的实例，将类型绑定到现有的对象，或从现有对象获取类型并调用其方法或访问其字段和属性。如果代码中使用了特性，可以利用反射对它们进行访问。</li></ul><h2 id="11、简述-yield-关键字的作用"><a href="#11、简述-yield-关键字的作用" class="headerlink" title="11、简述 yield 关键字的作用"></a><strong>11、简述 yield 关键字的作用</strong></h2><ul><li>是一个迭代器</li><li>是语法糖</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> item <span class="keyword">in</span> <span class="title">GetNumsYield</span>())</span></span><br><span class="line">         &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">$&quot; common return:<span class="subst">&#123;item&#125;</span>&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 通过yield return 返回集合</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;<span class="built_in">int</span>&gt; <span class="title">GetNumsYield</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             Console.WriteLine(<span class="string">$&quot;yield return:<span class="subst">&#123;i&#125;</span>&quot;</span>);</span><br><span class="line">             <span class="keyword">yield</span> <span class="keyword">return</span> i;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/fantasy-ke/picx-images-hosting/master/notion/f03e9b431f77a63bf74b0ee669e9983f.png" alt="Untitled.png"></p><h2 id="12、C-能否直接操作内存，为什么"><a href="#12、C-能否直接操作内存，为什么" class="headerlink" title="12、C#能否直接操作内存，为什么"></a><strong>12、C#能否直接操作内存，为什么</strong></h2><ul><li>不能,C#有<a href="https://so.csdn.net/so/search?q=%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6&spm=1001.2101.3001.7020">垃圾回收</a>机制,不能直接操作内存,但是可以调用基类的Finalize()方法。</li></ul><h2 id="13、简述控制反转-IOC-与依赖注入-DI-的关系"><a href="#13、简述控制反转-IOC-与依赖注入-DI-的关系" class="headerlink" title="13、简述控制反转 (IOC) 与依赖注入 (DI) 的关系"></a><strong>13、简述控制反转 (IOC) 与依赖注入 (DI) 的关系</strong></h2><ul><li>依赖注入<ul><li>程序运行过程中，如果需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部的注入。通俗来讲，就是把有依赖关系的类放到容器中，然后在我们需要这些类时，容器自动解析出这些类的实例。依赖注入最大的好处时实现类的解耦，利于程序拓展、单元测试、自动化模拟测试等</li></ul></li><li>控制反转<ul><li>控制反转只是一个概念，也就是将创建对象实例的控制权（原本是程序员）从代码控制权剥离到 <code>IOC 容器</code> 中控制。</li></ul></li><li>IOC&#x2F;DI的优缺点：<ul><li>优点<ul><li>依赖注入把对象的创造交给外部去管理,很好的解决了代码紧耦合（tight couple）的问题，是一种让代码实现松耦合（loose couple）的机制</li><li>松耦合让代码更具灵活性，能更好地应对需求变动，以及方便单元测试</li></ul></li><li>缺点<ul><li>目前主流的 <code>IOC/DI</code> 基本采用反射的方式来实现依赖注入，在一定程度会影响性能</li></ul></li></ul></li></ul><h2 id="14、有几种依赖注入方式"><a href="#14、有几种依赖注入方式" class="headerlink" title="14、有几种依赖注入方式"></a><strong>14、有几种依赖注入方式</strong></h2><ul><li>构造函数注入<ul><li>目前构造方法注入是依赖注入推荐使用方式。<ul><li>优点<ul><li>在构造方法中体现出对其他类的依赖，一眼就能看出这个类需要依赖哪些类才能工作</li><li>脱离了 IOC 框架，这个类仍然可以工作，POJO 的概念</li><li>一旦对象初始化成功了，这个对象的状态肯定是正确的</li></ul></li><li>缺点<ul><li>构造函数会有很多参数（Bad smell）</li><li>有些类是需要默认构造函数的，比如 MVC 框架的 Controller 类，一旦使用构造函数注入，就无法使用默认构造函数</li><li>这个类里面的有些方法并不需要用到这些依赖（Bad smell）</li></ul></li></ul></li><li><code>public class FurionService&#123; private readonly IRepository _repository; public FurionService(IRepository repository) &#123; _repository = repository; &#125;&#125;</code></li></ul></li><li>属性注入<ul><li>通过属性方式注入容易和类的实例属性混淆，不建议使用。<ul><li>优点<ul><li>在对象的整个生命周期内，可以随时动态的改变依赖</li><li>非常灵活</li></ul></li><li>缺点<ul><li>对象在创建后，被设置依赖对象之前这段时间状态是不对的</li><li>不直观，无法清晰地表示哪些属性是必须的</li></ul></li></ul></li><li><code>public class FurionService&#123; public IRepository Repository &#123; get; set; &#125;&#125;</code></li></ul></li><li>方法参数注入<ul><li>方法参数注入的意思是在创建对象后，通过自动调用某个方法来注入依赖。<ul><li>优点：<ul><li>比较灵活</li></ul></li><li>缺点：<ul><li>新加入依赖时会破坏原有的方法签名，如果这个方法已经被其他很多模块用到就很麻烦</li><li>与构造方法注入一样，会有很多参数</li></ul></li></ul></li><li><code>public class FurionService&#123; public Person GetById([FromServices]IRepository repository, int id) &#123; return repository.Find(id); &#125;&#125;</code></li></ul></li></ul><h2 id="15、ASPNET-Core-项目中常见的工程文件和目录有那些"><a href="#15、ASPNET-Core-项目中常见的工程文件和目录有那些" class="headerlink" title="15、ASPNET Core 项目中常见的工程文件和目录有那些?"></a><strong>15、ASPNET Core 项目中常见的工程文件和目录有那些?</strong></h2><table><thead><tr><th><strong>目录文件</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>依赖项</td><td><a href="http://asp.net/">ASP.NET</a> Core 开发、构建和运行过程中的依赖项，一般都是 NuGet 包和一些 SDK</td></tr><tr><td>Properties</td><td>配置，存放了一些 .json 文件用于配置 <a href="http://asp.net/">ASP.NET</a> Core 项目</td></tr><tr><td>Properties</td><td>配置，存放了一些 .json 文件用于配置 <a href="http://asp.net/">ASP.NET</a> Core 项目</td></tr><tr><td>Propertics&#x2F;launchSettings.json</td><td>启动配置文件，为一个 <a href="http://asp.net/">ASP.NET</a> Core 应用保存特有的配置标准，用于应用的启动准备工作，包括环境变量，开发端口等</td></tr><tr><td>wwwroot</td><td>网站根目录，存放类似于 CSS、JS 和图片、还有 HTML 文件等静态资源文件的目录</td></tr><tr><td>Program.cs</td><td>这个文件包含了 <a href="http://asp.net/">ASP.NET</a> Core 应用的 Main 方法，负责配置和启动应用程序</td></tr><tr><td>Startup.cs</td><td>Startup.cs 文件是 <a href="http://asp.net/">ASP.NET</a> Core 的项目的入口启动文件</td></tr></tbody></table><h2 id="16、简述ASPNET-Core中的依赖注入对象的生命周期"><a href="#16、简述ASPNET-Core中的依赖注入对象的生命周期" class="headerlink" title="16、简述ASPNET Core中的依赖注入对象的生命周期"></a><strong>16、简述ASPNET Core中的依赖注入对象的生命周期</strong></h2><ul><li><p><strong>瞬时（Transient）、作用域（Scoped）、单例（Singleton）</strong></p></li><li><p><strong>「瞬时，就是没有生存期。」</strong></p><p>  也就是说，每次从依赖注入系统中获取瞬时的服务实例时，都会创建一个全新的对象。</p><p>  依赖注入系统中的服务容器不会保存它，也就是没有生存权的普通对象。</p></li><li><p><strong>「单例，就是会一直存在，与应用同寿。」</strong></p></li></ul><p>也就是说，第一次从依赖注入系统中获取单例的服务实例时，才会创建一个全新的对象。</p><p>依赖注入系统中的服务容器会保存它，之后的每次使用都是直接从容器中获取它，也就是高贵的单例对象。</p><ul><li><strong>「作用域，理解起来没有那么直观，需要结合场景来说明。」</strong></li></ul><p>比如，在 ASP.NET 的应用中，每一个来自外部的请求，都可以理解为是一个请求作用域。不同的请求，就是不同的请求作用域。</p><p>在同一个请求作用域中，获取作用域模式的服务实例与单例模式的服务实例，具有同样的表现。</p><p>也就是说，第一次从依赖注入系统中获取服务实例时，才会创建一个全新的对象。</p><p>依赖注入系统会在服务容器中为该作用域开个单间，单独保存该对象。</p><h2 id="17、请列举常见的ASPNET-Core-中间件"><a href="#17、请列举常见的ASPNET-Core-中间件" class="headerlink" title="17、请列举常见的ASPNET Core 中间件"></a><strong>17、请列举常见的ASPNET Core 中间件</strong></h2><ul><li>Log4Net、NLog（日志记录）</li><li>Unity、Ninject（IOC容器）</li><li>EF框架、NHibernate（ORM框架）</li><li>Quartz.NET（开源的作业调度框架）</li><li>Socket（通讯）、Redis（缓存）</li></ul><h2 id="18、ASPNET-Core如何配置监听的IP-和端口"><a href="#18、ASPNET-Core如何配置监听的IP-和端口" class="headerlink" title="18、ASPNET Core如何配置监听的IP 和端口"></a><strong>18、ASPNET Core如何配置监听的IP 和端口</strong></h2><ul><li>参考第15题</li></ul><h2 id="19、什么是JWT-SON-Web-Token-，有什么优缺点"><a href="#19、什么是JWT-SON-Web-Token-，有什么优缺点" class="headerlink" title="19、什么是JWT SON Web Token)，有什么优缺点"></a><strong>19、什么是JWT SON Web Token)，有什么优缺点</strong></h2><ul><li><strong>JWT的优点：</strong><ul><li>可扩展性好 应用程序分布式部署的情况下，session需要做多机数据共享，通常可以存在数据库或者redis里面。而jwt不需要。</li><li>无状态 jwt不在服务端存储任何状态。RESTful API的原则之一是无状态，发出请求时，总会返回带有参数的响应，不会产生附加影响。用户的认证状态引入这种附加影响，这破坏了这一原则。另外jwt的载荷中可以存储一些常用信息，用于交换信息，有效地使用 JWT，可以降低服务器查询数据库的次数。</li></ul></li><li><strong>JWT的缺点：</strong><ul><li>安全性<ul><li>由于jwt的payload是使用base64编码的，并没有加密，因此jwt中不能存储敏感数据。而session的信息是存在服务端的，相对来说更安全。</li></ul></li><li>性能<ul><li>jwt太长。由于是无状态使用JWT，所有的数据都被放到JWT里，如果还要进行一些数据交换，那载荷会更大，经过编码之后导致jwt非常长，cookie的限制大小一般是4k，cookie很可能放不下，所以jwt一般放在local storage里面。并且用户在系统中的每一次http请求都会把jwt携带在Header里面，http请求的Header可能比Body还要大。而sessionId只是很短的一个字符串，因此使用jwt的http请求比使用session的开销大得多。</li></ul></li><li>一次性<ul><li>无状态是jwt的特点，但也导致了这个问题，jwt是一次性的。想修改里面的内容，就必须签发一个新的jwt。</li></ul></li></ul></li></ul><h2 id="20、什么是-Refresh-Token"><a href="#20、什么是-Refresh-Token" class="headerlink" title="20、什么是 Refresh Token"></a><strong>20、什么是 Refresh Token</strong></h2><ul><li>Refresh Token 用于获取新的 AccessToken。这样可以缩短 AccessToken 的过期时间保证安全，同时又不会因为频繁过期重新要求用户登录。</li><li>用户在初次认证时，Refresh Token 会和 AccessToken、IdToken 一起返回。你的应用必须安全地存储 Refresh Token，它的重要性和密码是一样的，因为 Refresh Token 能够一直让用户保持登录。</li></ul><h2 id="21、官方提供的GC模式有几种，ASPNET-Core-默认是什么模式"><a href="#21、官方提供的GC模式有几种，ASPNET-Core-默认是什么模式" class="headerlink" title="21、官方提供的GC模式有几种，ASPNET Core 默认是什么模式"></a><strong>21、官方提供的GC模式有几种，ASPNET Core 默认是什么模式</strong></h2><ul><li>.NET Core 两种GC模式: Server GC &#x2F; Workstation GC</li><li>GC（garbage collection）是对内存管理中回收已经不用的内存的一种机制，java 和 .net 都有自己的 GC 机制，是内存管理的一部分。</li><li>Server GC : 主要应用于多处理器系统，并且作为ASP.NET Core宿主的默认配置。 它会为每个处理器都创建一个GC Heap,并且会并行执行回收操作。 该模式的GC可以最大化吞吐量和较好的收缩性。 …</li><li>Workstation GC : 主要应用于单处理器系统，Workstation GC尽可能地通过减少垃圾回收过程中程序的暂停次数来提高性能。</li><li>默认模式<ul><li>Server GC</li></ul></li></ul><h2 id="22、简述Abp-的多租户实现逻辑"><a href="#22、简述Abp-的多租户实现逻辑" class="headerlink" title="22、简述Abp 的多租户实现逻辑"></a><strong>22、简述Abp 的多租户实现逻辑</strong></h2><ul><li>ABP vNext 实现多租户的思路也非常简单，通过一个 <code>TenantId</code> 来分割各个租户的数据，并且在查询的时候使用统一的全局过滤器(<strong>类似于软删除</strong>)来筛选数据。</li></ul><h2 id="23、简述Abp的权限认证实现逻辑"><a href="#23、简述Abp的权限认证实现逻辑" class="headerlink" title="23、简述Abp的权限认证实现逻辑"></a><strong>23、简述Abp的权限认证实现逻辑</strong></h2><ul><li>Abp 本身集成了一套权限验证体系，通过 ASP.NET Core 的过滤器与 Castle 的拦截器进行拦截请求，并进行权限验证。在 Abp 框架内部，权限分为两块，一个是功能(Feature)，一个是权限项(Permission)，在更多的时候两者仅仅是概念不同而已，大体处理流程还是一样的。</li></ul><h2 id="24、简述Abp的工作单元实现逻辑"><a href="#24、简述Abp的工作单元实现逻辑" class="headerlink" title="24、简述Abp的工作单元实现逻辑"></a><strong>24、简述Abp的工作单元实现逻辑</strong></h2><ul><li>而在 Abp 的内部则是结合 Castle 的 Dynamic Proxy 拦截 UnitOfwork Attribute 来进行动态代理注入，实现了当执行标注了 <code>[UnitOfwork]</code> 方法时能够通过 <code>UnitOfworkManager</code> 来进行事务控制。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.Net测试卷题二</title>
      <link href="/posts/33520.html"/>
      <url>/posts/33520.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、NetCore中，介绍一下-ConfigureServices-和-Configure-职责有何不同"><a href="#1、NetCore中，介绍一下-ConfigureServices-和-Configure-职责有何不同" class="headerlink" title="1、NetCore中，介绍一下**ConfigureServices** 和 **Configure**职责有何不同"></a>1、NetCore中，介绍一下**<code>ConfigureServices</code>** 和 **<code>Configure</code>**职责有何不同</h2><p><strong><code>ConfigureServices</code></strong> 和 <strong><code>Configure</code></strong> 是在ASP.NET Core应用程序的启动过程中用于配置服务和应用程序管道的两个重要方法。</p><ol><li><strong>ConfigureServices:</strong><ul><li><strong><code>ConfigureServices</code></strong> 方法用于配置应用程序的服务容器，即依赖注入容器。在这个方法中，你可以注册应用程序所需的各种服务，例如数据库上下文、存储库、日志记录器等。</li><li>这个方法在应用程序启动时执行一次，它是在依赖注入容器创建之后、应用程序处理请求之前调用的。</li><li><strong><code>ConfigureServices</code></strong> 方法的主要职责是设置应用程序所需的依赖注入服务，以便它们可以在应用程序的其他部分中使用。</li></ul></li><li><strong>Configure:</strong><ul><li><strong><code>Configure</code></strong> 方法用于配置应用程序的HTTP请求处理管道，它定义了请求的处理顺序和中间件的使用。</li><li>在这个方法中，你可以添加中间件（Middleware）到管道中，以实现不同的功能，例如身份验证、路由、异常处理等。</li><li><strong><code>Configure</code></strong> 方法在每次收到HTTP请求时都会被调用，用于构建请求处理管道，每个请求都会经过该管道以执行必要的处理和操作。</li></ul></li></ol><p>总结：</p><ul><li><strong><code>ConfigureServices</code></strong> 方法用于配置应用程序的依赖注入容器，注册所需的服务。</li><li><strong><code>Configure</code></strong> 方法用于配置应用程序的HTTP请求处理管道，定义请求的处理顺序和中间件的使用。</li></ul><p>请注意，这些方法通常在 <strong><code>Startup.cs</code></strong> 文件中被重写，以实现自定义的应用程序配置和行为。</p><h2 id="2、NetCore中，如何配置多环境（例开发环境，测试环境，生产环境的不同链接字符串"><a href="#2、NetCore中，如何配置多环境（例开发环境，测试环境，生产环境的不同链接字符串" class="headerlink" title="2、NetCore中，如何配置多环境（例开发环境，测试环境，生产环境的不同链接字符串)"></a>2、NetCore中，如何配置多环境（例开发环境，测试环境，生产环境的不同链接字符串)</h2><p>在ASP.NET Core中，你可以使用配置系统来管理不同环境下的配置信息，包括数据库连接字符串等。以下是配置多环境的一般步骤：</p><ol><li><p><strong>创建不同环境的配置文件：</strong><br>在你的项目根目录下，创建不同环境的配置文件，例如 <strong><code>appsettings.Development.json</code></strong>（开发环境）、<strong><code>appsettings.Staging.json</code></strong>（测试环境）、<strong><code>appsettings.Production.json</code></strong>（生产环境）等。每个文件中可以包含相应环境下的配置信息，例如数据库连接字符串。</p></li><li><p><strong>设置环境变量：</strong><br>在你的应用程序中设置环境变量来指定当前运行的环境。在开发阶段，你可以通过 Visual Studio 或其他方式设置环境变量为 “Development”。在实际部署到测试和生产环境时，确保设置正确的环境变量值。</p></li><li><p><strong>配置文件加载：</strong><br>在 <strong><code>Startup.cs</code></strong> 文件的 <strong><code>ConfigureServices</code></strong> 方法中，使用 <strong><code>Configuration</code></strong> 对象来加载不同环境的配置文件。ASP.NET Core会自动根据当前环境加载相应的配置文件。</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">csharpCopy code</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 加载不同环境的配置文件</span></span><br><span class="line">    <span class="keyword">var</span> env = HostingEnvironment.EnvironmentName; <span class="comment">// 获取当前环境名称</span></span><br><span class="line">    <span class="keyword">var</span> configBuilder = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">        .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class="line">        .AddJsonFile(<span class="string">$&quot;appsettings.<span class="subst">&#123;env&#125;</span>.json&quot;</span>, optional: <span class="literal">false</span>, reloadOnChange: <span class="literal">true</span>)</span><br><span class="line">        .AddEnvironmentVariables();</span><br><span class="line"></span><br><span class="line">    Configuration = configBuilder.Build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册配置对象</span></span><br><span class="line">    services.AddSingleton(Configuration);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...其他服务配置...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在应用程序中使用配置：</strong><br>在需要使用配置的地方，可以通过依赖注入来获取配置对象，并获取相应的值，例如数据库连接字符串。</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy code</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IConfiguration _configuration;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> connectionString = _configuration.GetConnectionString(<span class="string">&quot;DefaultConnection&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用连接字符串进行操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过这种方式，你可以在不同环境下使用不同的配置信息，例如数据库连接字符串，而无需修改应用程序的代码。这有助于简化配置管理和部署过程。</p><h2 id="3、NetCore中，描述一下依赖注入后的服务生命周期"><a href="#3、NetCore中，描述一下依赖注入后的服务生命周期" class="headerlink" title="3、NetCore中，描述一下依赖注入后的服务生命周期"></a>3、NetCore中，描述一下依赖注入后的服务生命周期</h2><p>在ASP.NET Core中，依赖注入（DI）是一种设计模式，用于将组件的依赖关系从它们的实现中解耦，从而提高代码的可维护性和可测试性。ASP.NET Core通过内置的依赖注入容器来管理和解析服务的生命周期。以下是ASP.NET Core中支持的三种主要服务生命周期：</p><ol><li><strong>瞬时（Transient）生命周期：</strong><ul><li>对于瞬时生命周期的服务，每次调用**<code>IServiceProvider.GetService&lt;T&gt;</code>**都会创建一个新的实例。</li><li>这种生命周期适用于轻量级、无状态的服务，每次调用需要获得一个全新的实例。</li><li>在依赖注入容器中，可以使用**<code>services.AddTransient&lt;TService, TImplementation&gt;()</code>**方法注册瞬时生命周期的服务。</li></ul></li><li><strong>作用域（Scoped）生命周期：</strong><ul><li>对于作用域生命周期的服务，容器会为每个HTTP请求创建一个单独的实例，并在整个请求周期内重用这个实例。</li><li>这种生命周期适用于需要在一个HTTP请求范围内共享状态的服务，例如数据库上下文。</li><li>在依赖注入容器中，可以使用**<code>services.AddScoped&lt;TService, TImplementation&gt;()</code>**方法注册作用域生命周期的服务。</li></ul></li><li><strong>单例（Singleton）生命周期：</strong><ul><li>对于单例生命周期的服务，容器会创建一个单一的实例，并在整个应用程序的生命周期内重用这个实例。</li><li>这种生命周期适用于全局唯一的、可共享的状态，例如配置信息、日志记录器等。</li><li>在依赖注入容器中，可以使用**<code>services.AddSingleton&lt;TService, TImplementation&gt;()</code>**方法注册单例生命周期的服务。</li></ul></li></ol><p>ASP.NET Core的依赖注入容器负责创建、管理和释放这些不同生命周期的服务，确保按需创建、重用和销毁实例，以满足应用程序的需求。你可以根据每个服务的特性和需求来选择适当的生命周期。</p><h2 id="4、NetCore中，什么是中间件-如何造成管道短路-什么情况下需要造成管道短路"><a href="#4、NetCore中，什么是中间件-如何造成管道短路-什么情况下需要造成管道短路" class="headerlink" title="4、NetCore中，什么是中间件?如何造成管道短路?什么情况下需要造成管道短路?"></a>4、NetCore中，什么是中间件?如何造成管道短路?什么情况下需要造成管道短路?</h2><blockquote><p>🎇 中间件（Middleware）是一种用于处理HTTP请求和响应的组件。中间件在应用程序的请求处理管道中起到中介的作用，它可以在请求到达最终目标之前或响应发送到客户端之前执行各种操作。中间件可以执行日志记录、身份验证、授权、异常处理等任务，以及修改请求和响应的内容。</p></blockquote><blockquote><p>🏘️ 每个中间件都可以执行一些操作，然后将请求传递给下一个中间件，或者中间件可以决定中断管道的流程，从而造成管道短路。管道短路意味着在某个中间件中处理了请求并生成了响应，不再将请求传递给下一个中间件。</p></blockquote><p>造成管道短路的情况可能包括：</p><ol><li><strong>身份验证和授权失败：</strong> 如果中间件负责身份验证或授权，当请求的身份验证失败或授权不通过时，可以生成一个适当的响应并中断管道。</li><li><strong>异常处理：</strong> 如果在中间件中捕获到异常，并且你希望返回一个错误响应而不是将请求继续传递给后续中间件，你可以造成管道短路。</li><li><strong>请求预处理：</strong> 有时，某些中间件可能会在处理请求之前执行某些预处理操作，如果预处理操作确定请求无效或不需要进一步处理，可以造成管道短路。</li><li><strong>静态文件处理：</strong> 当中间件处理静态文件请求时，如果找到匹配的静态文件并生成了响应，可以造成管道短路，避免进一步处理。</li></ol><h2 id="5、如何保证接口安全性"><a href="#5、如何保证接口安全性" class="headerlink" title="5、如何保证接口安全性?"></a>5、如何保证接口安全性?</h2><ol><li><strong>身份验证（Authentication）和授权（Authorization）：</strong><ul><li>使用适当的身份验证机制，如JWT（JSON Web Token）或OAuth，来验证用户的身份。</li><li>基于用户的身份和角色，进行授权，确保只有具有足够权限的用户可以访问特定的接口和资源。</li></ul></li><li><strong>HTTPS加密：</strong><ul><li>使用HTTPS协议来加密数据传输，确保数据在传输过程中不会被篡改或窃取。</li></ul></li><li><strong>防止跨站请求伪造（CSRF）：</strong><ul><li>使用CSRF令牌来防止恶意站点利用用户的身份执行未经授权的操作。</li></ul></li><li><strong>输入验证和数据校验：</strong><ul><li>对于从用户输入获得的数据，进行有效性验证和数据校验，以防止恶意数据或不良输入引发安全问题。</li></ul></li><li><strong>防止SQL注入：</strong><ul><li>使用参数化查询或ORM（对象关系映射）工具来构建数据库查询，以防止SQL注入攻击。</li></ul></li><li><strong>日志记录和监控：</strong><ul><li>在接口中实现详细的日志记录，以便在出现异常或安全问题时进行追踪和分析。</li><li>使用监控工具来检测和响应潜在的安全事件。</li></ul></li><li><strong>安全头部设置：</strong><ul><li>在HTTP响应中设置适当的安全头部，如CSP（内容安全策略）、X-XSS-Protection（跨站脚本保护）等，以增加浏览器端的安全性。</li></ul></li><li><strong>输入过滤和输出编码：</strong><ul><li>对于从用户获取的输入数据，进行输入过滤，以过滤掉恶意或不合法的内容。</li><li>在将数据返回给用户时，进行输出编码，以防止跨站脚本攻击（XSS）。</li></ul></li></ol><h2 id="6、如何保证接口幂等性"><a href="#6、如何保证接口幂等性" class="headerlink" title="6、如何保证接口幂等性?"></a>6、如何保证接口幂等性?</h2><ol><li><strong>HTTP方法选择：</strong><ul><li>使用合适的HTTP方法来表示操作的性质。GET请求应该是安全且幂等的，而不应该用于具有副作用的操作。推荐使用POST、PUT或DELETE方法来执行有状态的、可能引起副作用的操作。</li></ul></li><li><strong>唯一标识符和标记：</strong><ul><li>在每次请求中使用唯一的标识符或标记来区分不同的请求。可以使用UUID、请求ID等唯一值来区分请求，确保相同的请求不会重复执行。</li></ul></li><li><strong>使用幂等性操作：</strong><ul><li>设计接口操作以支持幂等性。例如，重复执行同一个请求应该产生相同的结果，不会产生重复的资源或状态变化。</li></ul></li><li><strong>幂等性检查：</strong><ul><li>在处理请求之前，检查请求是否已经被处理过。可以在数据库中存储请求的唯一标识符或哈希值，并在处理请求时进行检查，避免重复操作。</li></ul></li><li><strong>乐观并发控制：</strong><ul><li>使用乐观并发控制来处理并发请求。在更新操作中，使用版本号或时间戳来确保只有最新版本的数据被更新。</li></ul></li><li><strong>幂等性令牌：</strong><ul><li>为每个请求生成并返回一个幂等性令牌，在下次请求中将该令牌作为参数或头部发送。服务器验证令牌，确保重复请求不会重复执行。</li></ul></li><li><strong>不会引起状态变化的查询操作：</strong><ul><li>对于读取数据的查询操作，如GET请求，应该是幂等的，因为它们不会引起系统状态的变化。</li></ul></li></ol><h2 id="7、使用过哪些0rm框架，简要介绍下异同及优缺点"><a href="#7、使用过哪些0rm框架，简要介绍下异同及优缺点" class="headerlink" title="7、使用过哪些0rm框架，简要介绍下异同及优缺点"></a>7、使用过哪些0rm框架，简要介绍下异同及优缺点</h2><p><strong>Entity Framework（EF）：</strong></p><ul><li>异同：<ul><li>EF是由Microsoft开发的，集成度高，与.NET生态系统深度整合。</li><li>支持多种开发模式，如Code First、Database First和Model First。</li><li>提供了强大的LINQ查询功能，能够将数据库查询转化为C#代码。</li><li>提供了多种数据库提供程序，如SQL Server、MySQL、SQLite等。</li></ul></li><li>优点：<ul><li>良好的开发体验，简化了数据库映射和查询。</li><li>集成度高，与Visual Studio无缝集成。</li><li>丰富的文档和社区支持。</li></ul></li><li>缺点：<ul><li>性能相对较慢，特别是在复杂查询或大规模数据处理中。</li><li>部分高级特性需要更多配置和调整。</li></ul></li></ul><p><strong>SqlSugar：</strong></p><ul><li>异同：<ul><li>SqlSugar是一个轻量级的ORM框架，专注于高性能。</li><li>提供了丰富的特性，支持Lambda表达式和原生SQL。</li><li>可以工作在多个数据库后端，如SQL Server、MySQL、Oracle等。</li><li>功能相对精简，主要关注数据库访问和操作。</li></ul></li><li>优点：<ul><li>高性能，与原生SQL查询接近，适合需要高性能的应用。</li><li>易于学习和使用，不需要复杂的映射配置。</li><li>支持批量操作和存储过程。</li></ul></li><li>缺点：<ul><li>功能相对较少，不如EF提供的功能丰富。</li><li>不太适合复杂的领域模型映射。</li></ul></li></ul><h2 id="8、分布式事务中，如何保证事务的最终一致性。可简要介绍下思路或者用过的相关框架"><a href="#8、分布式事务中，如何保证事务的最终一致性。可简要介绍下思路或者用过的相关框架" class="headerlink" title="8、分布式事务中，如何保证事务的最终一致性。可简要介绍下思路或者用过的相关框架"></a>8、分布式事务中，如何保证事务的最终一致性。可简要介绍下思路或者用过的相关框架</h2><p>🤑在分布式系统中，保证事务的最终一致性是一个复杂而重要的问题。</p><p>🤑最终一致性指的是尽管分布式系统中的数据可能在某一时刻不一致，但在一段时间后，系统会达到一致的状态。</p><p>以下是一些常见的思路和相关框架来实现分布式事务的最终一致性：</p><ol><li><strong>两阶段提交（Two-Phase Commit，2PC）：</strong><ul><li>2PC是一种协调分布式事务的协议，它涉及一个协调者和多个参与者。在这个协议中，协调者询问所有参与者是否可以提交事务，然后协调者根据收到的参与者回复来决定是否执行提交操作。</li><li>优点：简单易懂，可以保证事务的最终一致性。</li><li>缺点：性能较差，可能存在阻塞问题，参与者故障会导致协议阻塞。</li></ul></li><li><strong>补偿事务（Compensating Transaction）：</strong><ul><li>补偿事务是一种通过执行一系列补偿操作来回滚或纠正事务的策略。当某个分布式事务失败时，可以通过执行一些特定的操作来修复系统状态，使其恢复到一致的状态。</li><li>优点：灵活性高，能够应对各种复杂情况，如网络故障、部分节点故障等。</li><li>缺点：实现和维护成本较高，需要额外的编码和逻辑。</li></ul></li></ol><p>分布式框架:</p><ul><li>阿里的</li><li>华为的</li></ul><h2 id="9、索引的优缺点。索引的类型。事务的级别和默认级别"><a href="#9、索引的优缺点。索引的类型。事务的级别和默认级别" class="headerlink" title="9、索引的优缺点。索引的类型。事务的级别和默认级别"></a>9、索引的优缺点。索引的类型。事务的级别和默认级别</h2><p><strong>索引的优缺点：</strong></p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a><strong>优点：</strong></h3><pre><code>1. **提高检索性能：** 索引可以加速数据库查询操作，降低查询的时间复杂度。2. **加速排序和分组：** 对于包含索引的列进行排序或分组操作时，索引可以显著提高性能。3. **加速连接操作：** 在表之间进行连接操作时，索引可以减少连接的复杂度，提高查询效率。4. **唯一性约束：** 唯一索引可以确保某一列的值在表中唯一，保证数据的完整性。5. **加速外键关联：** 对于外键关联的列，创建索引可以加速关联操作的效率。</code></pre><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a><strong>缺点：</strong></h3><pre><code>1. **占用存储空间：** 索引需要占用额外的存储空间，特别是对于大型表，可能会显著增加存储需求。2. **降低写操作性能：** 更新、插入和删除操作会涉及索引的维护，可能导致写操作性能下降。3. **增加维护成本：** 随着数据的变化，索引需要不断地维护，可能导致数据库性能下降。4. **可能导致查询性能下降：** 当索引选择不当或过多时，查询优化器可能选择错误的索引，导致查询性能下降。</code></pre><h3 id="索引的类型："><a href="#索引的类型：" class="headerlink" title="索引的类型："></a><strong>索引的类型：</strong></h3><pre><code>1. **唯一索引（Unique Index）：** 确保索引列的值在表中唯一。2. **主键索引（Primary Key Index）：** 一种特殊的唯一索引，用于标识表中的唯一记录。3. **聚集索引（Clustered Index）：** 确定表的物理存储顺序，每个表只能有一个聚集索引。4. **非聚集索引（Non-clustered Index）：** 不影响表的物理存储顺序，可以有多个非聚集索引。5. **复合索引（Composite Index）：** 包含多个列的索引，用于优化多列条件的查询。6. **全文索引（Full-Text Index）：** 用于全文搜索，支持关键词和文本搜索</code></pre><h3 id="事务的级别和默认级别："><a href="#事务的级别和默认级别：" class="headerlink" title="事务的级别和默认级别："></a><strong>事务的级别和默认级别：</strong></h3><pre><code>事务的级别是指事务在数据库中的隔离程度。常见的事务级别包括：1. **Read Uncommitted（读未提交）：** 最低级别，一个事务可以读取另一个未提交事务的数据。2. **Read Committed（读已提交）：** 默认级别，一个事务只能读取已提交事务的数据。3. **Repeatable Read（可重复读）：** 保证在同一事务内多次读取同一数据时，数据保持一致，但允许幻读问题。</code></pre><h2 id="10、单表数据量过大，造成插入及读取性能问题，你会如何优化"><a href="#10、单表数据量过大，造成插入及读取性能问题，你会如何优化" class="headerlink" title="10、单表数据量过大，造成插入及读取性能问题，你会如何优化?"></a>10、单表数据量过大，造成插入及读取性能问题，你会如何优化?</h2><ol><li><strong>分区（Partitioning）：</strong> 将大表分割成多个较小的子表，每个子表存储一定范围的数据。可以根据时间、地理位置等进行分区，减轻单表数据量压力。</li><li><strong>索引优化：</strong> 确保表上的索引使用合理，避免过多或不必要的索引。优化索引可以提高查询性能。</li><li><strong>缓存：</strong> 使用缓存来存储热门数据，减少频繁的数据库查询。缓存可以是内存数据库（如Redis）或分布式缓存。</li><li><strong>归档：</strong> 将历史数据归档到独立的表中，保留最新和最活跃的数据在主表中。这可以减少主表的数据量，提高查询性能。</li><li><strong>分库分表（Sharding）：</strong> 将数据拆分到多个数据库实例或表中，每个数据库实例或表负责一部分数据。这可以提高并发性和扩展性。</li><li><strong>批量操作：</strong> 在插入和更新操作中使用批量操作，而不是逐条操作。批量操作可以减少事务和日志开销。</li><li><strong>定时清理：</strong> 定期清理不再需要的数据，如过期数据或历史数据。这可以保持表的数据量在可管理的范围内。</li><li><strong>使用分布式数据库：</strong> 考虑使用分布式数据库系统，可以通过分布式架构来分散数据负载。</li><li><strong>垂直拆分：</strong> 将表按功能或业务逻辑进行拆分，每个表只包含相关的字段和数据，从而降低单表数据量。</li><li><strong>数据压缩：</strong> 对表中的数据进行压缩，减小存储空间，提高数据的读取性能。</li></ol><h2 id="11、说下自己对Restful框架的了解-Http动作，响应状态码，路由等"><a href="#11、说下自己对Restful框架的了解-Http动作，响应状态码，路由等" class="headerlink" title="11、说下自己对Restful框架的了解(Http动作，响应状态码，路由等)"></a>11、说下自己对Restful框架的了解(Http动作，响应状态码，路由等)</h2><p>RESTful框架是一种用于构建Web服务的架构风格，它强调资源的概念和基于HTTP协议的设计原则。以下是我对RESTful框架的一些基本了解：</p><ol><li><strong>HTTP动作（HTTP Methods）：</strong><br>RESTful框架通过HTTP方法来表示对资源的操作。常用的HTTP动作包括：<ul><li><strong>GET：</strong> 用于获取资源的信息。</li><li><strong>POST：</strong> 用于创建新资源。</li><li><strong>PUT：</strong> 用于更新或替换资源。</li><li><strong>DELETE：</strong> 用于删除资源。</li><li><strong>PATCH：</strong> 用于部分更新资源。</li></ul></li><li><strong>响应状态码（HTTP Status Codes）：</strong><br>RESTful框架使用HTTP状态码来表示请求的处理结果。一些常见的HTTP状态码及其含义包括：<ul><li><strong>200 OK：</strong> 请求成功。</li><li><strong>201 Created：</strong> 资源创建成功。</li><li><strong>204 No Content：</strong> 没有内容返回。</li><li><strong>400 Bad Request：</strong> 请求格式错误或参数错误。</li><li><strong>401 Unauthorized：</strong> 没有认证或认证失败。</li><li><strong>403 Forbidden：</strong> 没有权限访问资源。</li><li><strong>404 Not Found：</strong> 资源不存在。</li><li><strong>405 Method Not Allowed：</strong> 不允许使用该HTTP方法。</li><li><strong>500 Internal Server Error：</strong> 服务器内部错误。</li></ul></li><li><strong>路由（Routing）：</strong><br>在RESTful框架中，URL用于表示资源，路由机制将URL映射到相应的资源和操作。通常，URL的结构反映了资源的层次结构。例如，**<code>/users</code><strong>表示用户资源，</strong><code>/users/&#123;id&#125;</code>**表示特定用户的详细信息。</li></ol><h2 id="12-是否了解Docker，简单介绍下。写一下列出本机所有镜像，列出本机所有容器的命令"><a href="#12-是否了解Docker，简单介绍下。写一下列出本机所有镜像，列出本机所有容器的命令" class="headerlink" title="12.是否了解Docker，简单介绍下。写一下列出本机所有镜像，列出本机所有容器的命令"></a>12.是否了解Docker，简单介绍下。写一下列出本机所有镜像，列出本机所有容器的命令</h2><ul><li><code>docker images</code></li><li><code>docker ps -a</code></li></ul><h2 id="13、编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符串数组char-的形式给出不要给另外的数据分配额外的空间，必须原地修改输入数组，使用0-1-的额外空间解决这一问题"><a href="#13、编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符串数组char-的形式给出不要给另外的数据分配额外的空间，必须原地修改输入数组，使用0-1-的额外空间解决这一问题" class="headerlink" title="13、编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符串数组char[]的形式给出不要给另外的数据分配额外的空间，必须原地修改输入数组，使用0(1)的额外空间解决这一问题"></a>13、编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符串数组<code>char[]</code>的形式给出不要给另外的数据分配额外的空间，必须原地修改输入数组，使用0(1)的额外空间解决这一问题</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReverseString</span>(<span class="params"><span class="built_in">char</span>[] s</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">int</span> right = s.Length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="comment">// 交换左右指针指向的字符</span></span><br><span class="line">            <span class="built_in">char</span> temp = s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = temp;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 移动指针向中间移动</span></span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">char</span>[] inputStr = &#123; <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span> &#125;;</span><br><span class="line">        Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">        solution.ReverseString(inputStr);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(inputStr);  <span class="comment">// 输出 &quot;olleh&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础进阶 --- 垃圾回收的基本运作方式</title>
      <link href="/posts/8000.html"/>
      <url>/posts/8000.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>随着高性能系统越来越普遍地采用.NET环境，垃圾回收器的决策过程正在变得越来越优雅。</p><p>本篇介绍一下垃圾回收的基本运作方式。</p><span id="more"></span><h2 id="小对象堆和大对象堆"><a href="#小对象堆和大对象堆" class="headerlink" title="小对象堆和大对象堆"></a>小对象堆和大对象堆</h2><p>在托管进程中存在两种内存堆（本机堆和托管堆）。本机内存堆(<code>Native Heap</code>)是由 <code>VirtualAlloc</code> 这个 <code>Windows API</code> 分配的，是由操作系统和CLR使用的，用于非托管代码所需的内存，比如 <code>Windows API</code> 、操作系统数据结构、很多CLR数据等。</p><p>CLR在托管堆(<code>Managed Heap</code>)上为所有.NET托管对象分配内存，也被成为GC堆，因为其中的对象均要受到垃圾回收机制的控制。</p><p>托管堆又分为两种一<strong>小对象堆</strong>和<strong>大对象堆</strong>（<code>LOH</code>),两者各自拥有自己的内存段(<code>Segment</code>)。每个内存段的大小视配置和硬件环境而定，对于大型程序可以是几百MB或更大。</p><p>小对象堆和 <code>LOH</code> 都可拥有多个内存段。小对象堆的内存段进一步划分为3代，分别是0、1、2代。第0代和第1代总是位于同一个内存段中，而第2代可能跨越多个内存段，<code>LOH</code> 也可以跨越多个内存段。包含第0代和第1代堆的内存段被称为暂时段(<code>Ephemeral Segment</code>)。</p><p>一开始内存堆就如下所示，两个内存段分别被标为 A 和 B，内存地址从左到右由小变大。小对象堆由 A 段内存构成，<code>LOH</code> 拥有 B 段内存。第 2 代和第 1 代堆只占有开头的一点内存，因为它们还都是空的。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/a55557e8db006684f1590728bfae653d.image.png" alt="image.png"></p><h3 id="小对象堆中分配内存的对象的生存期"><a href="#小对象堆中分配内存的对象的生存期" class="headerlink" title="小对象堆中分配内存的对象的生存期"></a>小对象堆中分配内存的对象的生存期</h3><p>如果对象小于 85 000 字节，CLR 都会把它分配在小对象堆中的第 0 代，通常紧挨着当前已用内存空间往后分配。因<br>此，正如本章开头所示，.NET 的内存分配过程非常迅速。如果快速分配失败，对象就可能会被放入第 0 代内存堆中的任意地方，只要能容纳得下就行。</p><p>如果没有合适的空闲空间，那么分配器就会扩大第 0 代内存堆，以便能存入新对象。如果扩大内存堆时超越了内存段的边界，则会触发垃圾回收过程。</p><p>对象总是诞生于第 0 代内存堆。只要对象保持存活，每当发生垃圾回收时，GC 都会把它提升一代。第 0 代和第 1 代内存堆的垃圾回收有时候被称为瞬时回收（<code>Ephemeral Collection</code>）。</p><p>在发生垃圾回收时，可能会进行碎片整理（<code>Compaction</code>），也就是 GC 把对象物理迁移到新的位置中去，以便让内存段中的空闲空间能够连续起来以备使用。如果未发生碎片整理，那就只需要重新调整各块内存的边界即可。在经历了几次未做碎片整理的垃圾回收之后，内存堆的分布可能会如下所示。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/3bd0d658896ba3ebf6de77c2de048f76.image.png" alt="image.png"></p><p>对象的位置没有移动过，但各代内存堆的边界已经发生了变化。</p><p>每一代内存堆都有可能发生碎片整理。因为 GC 必须修正所有对象的引用，使它们指向新的位置，所以碎片整理的开销相对较大，还有可能需要暂停所有托管线程。正因如此，垃圾回收器只在划算（<code>Productive</code>）时才会进行碎片整理，判断的依据是一些内部指标。</p><p>如果对象到达了第 2 代内存堆，它就会一直留在那里直至终结。这并不意味着第 2 代内存堆只会一直变大。</p><p>如果第 2 代内存堆中的对象都终结了，整个内存段也没有存活的对象了，垃圾回收器会把整个内存段交还给操作系统，或者作为其他几代内存堆的附加段。</p><p>在进行完全垃圾回收（<code>Full Garbage Collection</code>）时，就可能发生这种第 2 代内存堆的回收。</p><p>那么“存活”是什么意思呢？如果 GC 能够通过任一已知的 GC 根对象（Root），沿着层层引用访问到某个对象，那它就是存活的。</p><p>GC 根对象可以是程序中的静态变量，或者某个线程的堆栈被正在运行的方法占用（用于局部变量），或者是 GC 句柄（比如固定对象的句柄，<code>Pinned Handle</code>），或是终结器队列（<code>Finalizer Queue</code>）。</p><p>请注意，有些对象可能没有受GC 根对象的引用，但如果是位于第 2 代内存堆中，那么第 0 代回收是不会清理这些对象的，必须等到完全垃圾回收才会被清理到。</p><p>如果第 0 代堆即将占满一个内存段，而且垃圾回收也无法通过碎片整理获取足够的空闲内存，那么 GC 会分配一个新的内存段。新的内存段会用于容纳第 1 代和第 0 代堆，老的内存段将会变为第 2 代堆。老的第 0 代堆中的所有对象都会被放入新的第 1 代堆中，老的第 1代堆同理将提升为第 2 代堆（提升很方便，不必复制数据）。现在的内存段将如下所示。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/d4813532971f1b8cfb91254a339a9f7a.image.png" alt="image.png"></p><p>如果第 2 代堆继续变大，就可能会跨越多个内存段。LOH 堆同样也可能跨越多个内存段。无论存在多少个内存段，第 0 代和第 1 代总是位于同一个段中。以后我们想找出内存堆中有哪些对象存活时，这些知识将会派上用场。</p><h3 id="大对象堆中分配内存的对象的生存期"><a href="#大对象堆中分配内存的对象的生存期" class="headerlink" title="大对象堆中分配内存的对象的生存期"></a>大对象堆中分配内存的对象的生存期</h3><p>LOH 则遵从另一套回收规则。大于 85 000 字节的对象将自动在 LOH 中分配内存，且没有什么“代”的模式。超过这个尺寸的对象通常也就是数组和字符串了。</p><p>出于性能考虑，在垃圾回收期间 LOH 不会自动进行碎片整理，但从.NET 4.5.1 开始，必要时你也可以人为发起碎片整理。</p><p>与第 2 代内存堆类似，如果 LOH 的内存不再有用了，就可能会被用于其他内存堆。不过我们以后将会看到，理想状态下你根本就不会愿意让 LOH 的内存被回收掉。在 LOH 中，垃圾回收器用一张空闲内存列表来确定对象的存放位置。</p><p>:::tip{title&#x3D;”提示”}<br>如果是在调试器中查看位于 LOH 的对象，你会发现有可能整个 LOH 都小于 85 000 字节，而且可能还有对象的大小是小于已分配值的。这些对象通常都是 CLR 分配出去的，可以不予理睬。<br>:::</p><p>垃圾回收是针对某一代及其以下几代内存堆进行的。如果回收了第 1 代，则也会同时回收第 0 代。</p><p>如果回收了第 2 代，则所有内存堆都会回收，包括 LOH。如果发生了第 0 代或第1 代垃圾回收，那么程序在回收期间就会暂停运行。对于第 2 代垃圾回收而言，有部分回收是在后台线程中进行的，这要根据配置参数而定。</p><h2 id="垃圾回收的四个阶段"><a href="#垃圾回收的四个阶段" class="headerlink" title="垃圾回收的四个阶段"></a>垃圾回收的四个阶段</h2><p>垃圾回收包含 4 个阶段。</p><ol><li>挂起（Suspension）—— 在垃圾回收发生之前，所有托管线程都被强行中止。</li><li>标记（Mark）—— 从 GC 根对象开始，垃圾回收器沿着所有对象引用进行遍历并把所见对象记录下来。</li><li>碎片整理（Compact）—— 将对象重新紧挨着存放并更新所有引用，以便减少内存碎片。在小对象堆中，碎片整理会按需进行，无法控制。在 LOH 中，碎片整理不会自动进行，但你可以在必要时通知垃圾回收器来上一次。</li><li>恢复（Resume）——托管线程恢复运行。</li></ol><p>在标记阶段并不需要遍历内存堆中的所有对象，只要访问那些需要回收的部分即可。</p><p>比如第 0 代回收只涉及到第 0 代内存堆中的对象，第 1 代回收将会标记第 0 代和第 1 代内存堆中的对象。</p><p>而第 2 代回收和完全回收，则需遍历内存堆中所有存活的对象，这一过程的开销有可能非常大。</p><p>这里有个小问题需要注意，高代内存堆中的对象有可能是低代内存堆对象的根对象。这样就会导致垃圾回收器遍历到一部分高代内存堆的对象，但这样的回收开销还是小于高代内存堆的完全垃圾回收。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>由上述讨论可以形成以下几点重要结论。</p><p>第一，垃圾回收过程的耗时几乎完全取决于所涉及“代”内存堆中的对象数量，而不是你分配到的对象数量。这就是说，即使你分配了 1 棵包含 100 万个对象的树，只要在下一次垃圾回收之前把根对象的引用解除掉，这 100 万个对象就不会增加垃圾回收的耗时。</p><p>第二，垃圾回收的频率取决于所涉及“代”内存堆中已被占用的内存大小。只要已分配内存超过了某个内部阈值，就会发生该“代”垃圾回收。</p><p>这个阈值是持续变化的，GC 会根据进程的执行情况进行调整。如果某“代”回收足够划算（提升了很多对象所处的“代”），那垃圾回收就会发生得频繁一些，反之亦然。</p><p>另一个触发垃圾回收的因素是所有可用内存，与你的应用程序无关。如果可用内存少于某个阈值，为了减少整个内存堆的大小，垃圾回收可能会更为频繁地发生。</p><p>由上所述，貌似垃圾回收是难以控制的，但事实不是这样。通过控制内存分配模式来控制垃圾回收的统计指标，就是一种最容易实现的优化方法。这需要理解垃圾回收的工作机制、可用的配置参数、你的内存分配率，还需要对对象的生存期有很好的控制能力。</p><blockquote><p>上述文章引用自</p><p>编写高性能的.NET代码&#x2F;（美）沃森(Ben Watson)著；戴旭译. –北京：人民邮电出版社，2017.8</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NET Core使用Cap</title>
      <link href="/posts/6c86af72.html"/>
      <url>/posts/6c86af72.html</url>
      
        <content type="html"><![CDATA[<!-- *   [准备工作](#%e5%87%86%e5%a4%87%e5%b7%a5%e4%bd%9c)*   [项目设定](#%e9%a1%b9%e7%9b%ae%e8%ae%be%e5%ae%9a)*   [创建ServiceA](#%e5%88%9b%e5%bb%baservicea)*   [创建ServiceB](#%e5%88%9b%e5%bb%baserviceb) --><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><code>CAP</code>需要依赖消息队列和数据存储，支持情况如下：<br>消息队列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Kafka  </span><br><span class="line">RabbitMQ  </span><br><span class="line">AzureServiceBus  </span><br></pre></td></tr></table></figure><p>数据存储</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SqlServer  </span><br><span class="line">MySql  </span><br><span class="line">PostgreSql  </span><br><span class="line">MongoDB  </span><br></pre></td></tr></table></figure><p>两者自行搭配选择即可，其中<code>SqlServer</code>和<code>RabbitMQ</code>在docker中的安装可参照我另一篇备忘<a href="https://xiejiamiao.github.io/2020/03/27/chang-yong-docker/">开发常用的docker镜像</a></p><h2 id="项目设定"><a href="#项目设定" class="headerlink" title="项目设定"></a>项目设定</h2><ul><li>两个服务，分别为<code>ServiceA</code>,<code>ServiceB</code></li><li><code>SqlServer</code>使用<code>CapDemo</code>数据库，默认<code>sa</code>账号，密码为<code>Today_is_20200328</code>，端口为默认的<code>1433</code>端口</li><li><code>RabbitMQ</code>安装地址为本机，默认端口，账号密码为<code>admin/admin</code></li></ul><h2 id="创建ServiceA"><a href="#创建ServiceA" class="headerlink" title="创建ServiceA"></a>创建ServiceA</h2><ol><li><p>在<code>Visual Studio 2019</code>中创建空白解决方案，取名为<code>Fantasy.CapDemo</code></p></li><li><p>在解决方案中新建<code>Asp.net core</code>项目，名字为<code>Fantasy.CapDemo.ServiceA</code>，<code>.net core</code>版本为<code>3.1</code></p></li><li><p><code>nuget</code>安装以下4个包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DotNetCore.CAP  </span><br><span class="line">DotNetCore.CAP.Dashboard  </span><br><span class="line">DotNetCore.CAP.RabbitMQ  </span><br><span class="line">DotNetCore.CAP.SqlServer  </span><br></pre></td></tr></table></figure></li><li><p>在<code>Startup.cs</code>的<code>ConfigureServices</code>方法中加入以下代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">services.AddCap(options =&gt;  </span><br><span class="line">&#123;  </span><br><span class="line">    options.UseSqlServer(<span class="string">&quot;Password=Today_is_20200328;Persist Security Info=True;User ID=sa;Initial Catalog=CapDemo;Data Source=127.0.0.1&quot;</span>);  </span><br><span class="line">    options.UseRabbitMQ(r =&gt;  </span><br><span class="line">    &#123;  </span><br><span class="line">        r.HostName = <span class="string">&quot;127.0.0.1&quot;</span>;  </span><br><span class="line">        r.UserName = <span class="string">&quot;admin&quot;</span>;  </span><br><span class="line">        r.Password = <span class="string">&quot;admin&quot;</span>;  </span><br><span class="line">    &#125;);  </span><br><span class="line">    options.UseDashboard();  </span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure></li><li><p>此时直接运行项目，如果数据库与消息队列均能正常连接，则会在数据库中生成以下两张表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cap.Published  </span><br><span class="line">cap.Received  </span><br></pre></td></tr></table></figure></li><li><p>在<code>Controllers/WeatherForecastController.cs</code>中编写消息发布代码<br>6.1 通过构造函数依赖注入<code>ICapPublisher</code>对象<br>6.2 发布消息只需要调用<code>ICapPublisher</code>对象的<code>PublishAsync</code>或<code>Publish</code>方法，传入参数为队列名和消息值，全部代码如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> System.Linq;  </span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;  </span><br><span class="line"><span class="keyword">using</span> DotNetCore.CAP;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Fantasy.CapDemo.ServiceA.Controllers</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    [<span class="meta">ApiController</span>]  </span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;[controller]&quot;</span>)</span>]  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecastController</span> : <span class="title">ControllerBase</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span>[] Summaries = <span class="keyword">new</span>[]  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="string">&quot;Freezing&quot;</span>, <span class="string">&quot;Bracing&quot;</span>, <span class="string">&quot;Chilly&quot;</span>, <span class="string">&quot;Cool&quot;</span>, <span class="string">&quot;Mild&quot;</span>, <span class="string">&quot;Warm&quot;</span>, <span class="string">&quot;Balmy&quot;</span>, <span class="string">&quot;Hot&quot;</span>, <span class="string">&quot;Sweltering&quot;</span>, <span class="string">&quot;Scorching&quot;</span>  </span><br><span class="line">        &#125;;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;WeatherForecastController&gt; _logger;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ICapPublisher _capPublisher;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WeatherForecastController</span>(<span class="params">ILogger&lt;WeatherForecastController&gt; logger,ICapPublisher capPublisher</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            _logger = logger;  </span><br><span class="line">            _capPublisher = capPublisher;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        [<span class="meta">HttpGet</span>]  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;WeatherForecast&gt;&gt; Get()  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">await</span> _capPublisher.PublishAsync(<span class="string">&quot;Fantasy.cap.demo.show.time&quot;</span>, DateTime.Now);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> rng = <span class="keyword">new</span> Random();  </span><br><span class="line">            <span class="keyword">return</span> Enumerable.Range(<span class="number">1</span>, <span class="number">5</span>).Select(index =&gt; <span class="keyword">new</span> WeatherForecast  </span><br><span class="line">            &#123;  </span><br><span class="line">                Date = DateTime.Now.AddDays(index),  </span><br><span class="line">                TemperatureC = rng.Next(\<span class="number">-20</span>, <span class="number">55</span>),  </span><br><span class="line">                Summary = Summaries[rng.Next(Summaries.Length)]  </span><br><span class="line">            &#125;)  </span><br><span class="line">            .ToArray();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p>编写接收消息代码，接收消息有两种方式，一种在控制器中，即代码写在<code>***Controller.cs</code>中，另一种是在非控制器中，一般为<code>***Service.cs</code>中，以下分两步执行，因为<code>CAP</code>在默认情况下一个服务多个地方进行订阅，只会进行一次接收，除非进行分组(后面介绍)，所以<code>8/9</code>两个步骤在测试时需要注释其中一个，只保留另一个</p></li><li><p>编写在控制器中接收消息的代码，直接在控制器中写对应方法，方法参数为发送消息时传入的消息值类型，方法无返回值，再加上方法标签<code>CapSubscribe</code>即可，具体代码如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> System.Linq;  </span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;  </span><br><span class="line"><span class="keyword">using</span> DotNetCore.CAP;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Fantasy.CapDemo.ServiceA.Controllers</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SubController</span> : <span class="title">Controller</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        [<span class="meta">CapSubscribe(<span class="string">&quot;Fantasy.cap.demo.show.time&quot;</span>)</span>]  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowTime</span>(<span class="params">DateTime <span class="keyword">value</span></span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;接受方：SubController.ShowTime   接收到值：<span class="subst">&#123;<span class="keyword">value</span>&#125;</span>&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><strong>做到这步可以进行一次测试，就可以发现访问<code>/WeatherForecast</code>这个接口，会发送一条当前时间的消息出去，同时接收方也会在控制台打印出接收到的消息</strong></p></li><li><p>编写服务中接收消息的代码，需要注意接收消息的类需要继承<code>ICapSubscribe</code>接口，同时这里为了方便进行依赖注入，这里我们也自己定义了一个<code>ISubscriberService</code>接口，同时服务需要在<code>Startup.cs</code>的<code>ConfigureServices</code>方法中进行注册<br>9.1 <code>ISubscriberService.cs</code>代码如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> System.Linq;  </span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Fantasy.CapDemo.ServiceA.Services</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISubscriberService</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ReceivedShowTimeMessage</span>(<span class="params">DateTime <span class="keyword">value</span></span>)</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>9.2 <code>SubscriberService.cs</code>代码如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> System.Linq;  </span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;  </span><br><span class="line"><span class="keyword">using</span> DotNetCore.CAP;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Fantasy.CapDemo.ServiceA.Services</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SubscriberService</span>: <span class="title">ISubscriberService</span>, <span class="title">ICapSubscribe</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        [<span class="meta">CapSubscribe(<span class="string">&quot;Fantasy.cap.demo.show.time&quot;</span>)</span>]  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReceivedShowTimeMessage</span>(<span class="params">DateTime <span class="keyword">value</span></span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;接受方：SubscriberService.ReceivedShowTimeMessage   接收到值：<span class="subst">&#123;<span class="keyword">value</span>&#125;</span>&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>9.3 服务注册代码如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddScoped&lt;ISubscriberService, SubscriberService&gt;();  </span><br></pre></td></tr></table></figure><p><strong>注意：这行服务注册代码需要在<code>services.AddCap</code>这个方法之前注册，否则<code>CAP</code>在进行接口扫描的时候找不到对应已经实现了<code>ICapSubscribe</code>接口的实现类，则无法进行订阅者注册</strong><br><strong>注释掉第8步，进行第9步的测试，效果应该与第8步一致</strong></p></li><li><p>有时候一个消息需要多个消费者同时消费，则可以使用<code>Group</code>概念，消息发送代码不变，在标记<code>CapSubscribe</code>的时候，使用<code>Group</code>参数，多个Group订阅同个消息Id，消息则会对应分发到多个Group中，同个Group只能消费一次，即一个Group对一个消息Id订阅多次，也会只接收一次，具体代码如下<br>SubscriberService.cs中新增Group参数</p></li></ol><pre><code><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">CapSubscribe(<span class="string">&quot;Fantasy.cap.demo.show.time&quot;</span>,Group = <span class="string">&quot;SubscriberService&quot;</span>)</span>]  </span><br></pre></td></tr></table></figure>SubController.cs中新增Group参数<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">CapSubscribe(<span class="string">&quot;Fantasy.cap.demo.show.time&quot;</span>,Group = <span class="string">&quot;SubController&quot;</span>)</span>]  </span><br></pre></td></tr></table></figure></code></pre><ol start="11"><li>测试Group功能，将项目跑起来，此时再访问发送消息的api，会在控制台中打印出两条消息接收记录</li></ol><h2 id="创建ServiceB"><a href="#创建ServiceB" class="headerlink" title="创建ServiceB"></a>创建ServiceB</h2><p>ServiceB使用<code>EFCore</code>来进行配置，找<code>ServiceA</code>步骤2创建<code>Fantasy.CapDemo.ServiceB</code>项目，因为<code>.Net Core 3.1</code>没有自带<code>EFCore</code>，所以这里除了<code>CAP</code>的4个包之外，还需要nuget安装<code>EFCore</code>的两个包，汇总起来需要nuget安装的包如下：  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DotNetCore.CAP  </span><br><span class="line">DotNetCore.CAP.Dashboard  </span><br><span class="line">DotNetCore.CAP.RabbitMQ  </span><br><span class="line">DotNetCore.CAP.SqlServer  </span><br><span class="line">Microsoft.EntityFrameworkCore  </span><br><span class="line">Microsoft.EntityFrameworkCore.SqlServer  </span><br></pre></td></tr></table></figure><p>创建<code>ServiceDbContext.cs</code>文件，代码如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> System.Linq;  </span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Fantasy.CapDemo.ServiceB.Infrastructure</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ServiceDbContext</span>: <span class="title">DbContext</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServiceDbContext</span>(<span class="params">DbContextOptions&lt;ServiceDbContext&gt; options</span>):<span class="title">base</span>(<span class="params">options</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>在<code>Startup.cs</code>中配置<code>EFCore</code>和<code>CAP</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">services.AddDbContext&lt;ServiceDbContext&gt;(options =&gt;  </span><br><span class="line">&#123;  </span><br><span class="line">    options.UseSqlServer(  </span><br><span class="line">        <span class="string">&quot;Password=Today_is_20200328;Persist Security Info=True;User ID=sa;Initial Catalog=CapDemo;Data Source=127.0.0.1&quot;</span>);  </span><br><span class="line">&#125;);  </span><br><span class="line">  </span><br><span class="line">services.AddCap(options =&gt;  </span><br><span class="line">&#123;  </span><br><span class="line">    options.UseEntityFramework&lt;ServiceDbContext&gt;();  </span><br><span class="line">    options.UseRabbitMQ(r =&gt;  </span><br><span class="line">    &#123;  </span><br><span class="line">        r.HostName = <span class="string">&quot;127.0.0.1&quot;</span>;  </span><br><span class="line">        r.UserName = <span class="string">&quot;admin&quot;</span>;  </span><br><span class="line">        r.Password = <span class="string">&quot;admin&quot;</span>;  </span><br><span class="line">    &#125;);  </span><br><span class="line">    options.UseDashboard();  </span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure><p>后续操作与<code>ServiceA</code>类似，需要注意：<strong>多个站点订阅同个消息Id，消息会往多个站点进行发送</strong></p><blockquote><p>附上CAP的Github地址:<a href="https://github.com/dotnetcore/CAP">https://github.com/dotnetcore/CAP</a></p></blockquote><p><em>还有一些配合EF的操作还没来得及写，有空再说吧</em></p><!-- [![](https://xiejiamiao.github.io/images/avatar.jpg)](https://github.com/xiejiamiao) -->]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> CAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EntityFramework Core的并发处理</title>
      <link href="/posts/c2a085fc.html"/>
      <url>/posts/c2a085fc.html</url>
      
        <content type="html"><![CDATA[<!-- *   [什么叫并发](#%e4%bb%80%e4%b9%88%e5%8f%ab%e5%b9%b6%e5%8f%91)*   [怎么解决](#%e6%80%8e%e4%b9%88%e8%a7%a3%e5%86%b3)*   [EFCore是怎么做的](#efcore%e6%98%af%e6%80%8e%e4%b9%88%e5%81%9a%e7%9a%84)*   [Talk is cheap. Show me the code](#talk-is-cheap-show-me-the-code)    *   [创建项目](#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae)    *   [创建数据库实体](#%e5%88%9b%e5%bb%ba%e6%95%b0%e6%8d%ae%e5%ba%93%e5%ae%9e%e4%bd%93)    *   [配置实体映射规则(这里指定锁)](#%e9%85%8d%e7%bd%ae%e5%ae%9e%e4%bd%93%e6%98%a0%e5%b0%84%e8%a7%84%e5%88%99%e8%bf%99%e9%87%8c%e6%8c%87%e5%ae%9a%e9%94%81)    *   [创建`DbContext`](#%e5%88%9b%e5%bb%badbcontext)    *   [修改`Startup`](#%e4%bf%ae%e6%94%b9startup)    *   [添加数据库连接字符串](#%e6%b7%bb%e5%8a%a0%e6%95%b0%e6%8d%ae%e5%ba%93%e8%bf%9e%e6%8e%a5%e5%ad%97%e7%ac%a6%e4%b8%b2)    *   [添加测试控制器](#%e6%b7%bb%e5%8a%a0%e6%b5%8b%e8%af%95%e6%8e%a7%e5%88%b6%e5%99%a8)    *   [迁移数据库](#%e8%bf%81%e7%a7%bb%e6%95%b0%e6%8d%ae%e5%ba%93)    *   [测试](#%e6%b5%8b%e8%af%95)*   [官方文档](#%e5%ae%98%e6%96%b9%e6%96%87%e6%a1%a3) --><h1 id="什么叫并发"><a href="#什么叫并发" class="headerlink" title="什么叫并发"></a>什么叫并发</h1><p>假设一个场景：</p><ol><li>用户下了一个单，数据库的<code>Order</code>表存放这个订单数据，其中<code>订单状态=待发货</code></li><li>仓库从数据库中<code>查询出</code>这个<code>代发货</code>订单，进行发货逻辑处理，比如：<ol><li>判断订单状态</li><li>判断地址是否能到达</li><li>查询商品库存</li><li>获取快递单号</li><li>调用打印快递单服务</li><li>更新订单状态&#x2F;商品库存等等</li></ol></li><li>可以看出做发货逻辑处理耗时会比较长，正在这时候，顾客进行了退货申请，一个按钮点击申请退款，注意：业务逻辑要求已发货的订单不能申请退款，但是在顾客点击申请退款那一瞬间，发货流程还没走完，发货系统还在屁颠屁颠的处理发货逻辑，数据库里的订单状态还是<code>待发货</code>，这时候顾客申请退款，接口一下数据库，发现是<code>待发货</code>，就直接将数据库里的订单状态更新为<code>申请退款</code>，并反馈给用户操作成功</li><li>这时候苦逼的发货系统终于把所有发货逻辑全部计算完，兴高采烈得将数据库里得订单状态修改为<code>已发货</code></li><li>那么请问，最终这个订单的状态应该是什么呢？<code>待发货</code>？<code>申请退款</code>？<code>已发货</code>？</li></ol><p>上面那个场景就是所谓的并发，多个地方在对同一条数据进行操作的时候，时常会出现这种情况</p><h1 id="怎么解决"><a href="#怎么解决" class="headerlink" title="怎么解决"></a>怎么解决</h1><p>锁！</p><ul><li>悲观锁：是的，相当悲观，对整个世界都不信任的那种！就是假设我读取的数据一定会被修改，所以读数据之前我先把这些数据锁起来，外界拿不到，等我对数据操作完，再把锁释放掉，外界才可以继续用这些数据；</li><li>乐观锁：相对来说乐观一些，读取数据的时候不对数据上锁，相信没人会来修改这些数据，但是在处理完数据要重新更新数据库的时候，不能盲目信任，要查一下这些数据有没有发生变化，如果变化了，则说明被别人修改了，于是悲伤的抛出个异常表示对这个世界的不满，如果没有变化，则正常的将数据更新进去；</li></ul><h1 id="EFCore是怎么做的"><a href="#EFCore是怎么做的" class="headerlink" title="EFCore是怎么做的"></a>EFCore是怎么做的</h1><p><code>EFCore</code>使用的是<code>乐观锁</code>，它选择相信这个世界！</p><p><code>EFCore</code>的<code>乐观锁</code>分两种粒度：<code>ConcurrencyToken</code>和<code>RowVersion</code></p><ul><li><code>ConcurrencyToken</code>：这个针对表中的某个字段，为表中的某个字段指定为<code>ConcurrencyToken</code>，则当这个字段被并发修改了，则无法进行<code>SaveChange</code>，如果不是这个字段，而是这一行的其他字段被修改了，则可以正常进行<code>SaveChange</code>。以上面订单例子为例，如果将<code>订单状态</code>这个字段设置为<code>ConcurrencyToken</code>，那个在顾客申请退款之后，发货系统去更新订单状态则会失败，但是如果这个时候不是更新<code>订单状态</code>这个字段，而是更新<code>发货员</code>这个字段，则不会有任何影响，照样可以更新进去</li><li><code>RowVersion</code>：这个针对表中的所有字段，指定表中某个字段为<code>RowVersion</code>，每一次更新都会修改<code>RowVersion</code>这个字段的值，在取出数据重新更新的时候，会查询<code>RowVersion</code>这个字段的值是否与刚刚取出来的值一致，如果不一致说明这个表中可能某个或多个字段被修改过，则无法进行<code>SaveChange</code></li></ul><h1 id="Talk-is-cheap-Show-me-the-code"><a href="#Talk-is-cheap-Show-me-the-code" class="headerlink" title="Talk is cheap. Show me the code"></a>Talk is cheap. Show me the code</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>EFCoreConcurrencyDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code>，这里使用的是<code>Sql Server</code>数据库，所有需要引入以下3个包：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.EntityFrameworkCore.SqlServer  </span><br><span class="line">Microsoft.EntityFrameworkCore.Design  </span><br><span class="line">Microsoft.EntityFrameworkCore.Tools  </span><br></pre></td></tr></table></figure><h2 id="创建数据库实体"><a href="#创建数据库实体" class="headerlink" title="创建数据库实体"></a>创建数据库实体</h2><p>在项目根目录创建以下路径和文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|--EFCoreConcurrencyDemo  </span><br><span class="line">    |-- DbModel  </span><br><span class="line">        |-- ConcurrencyCheckDemo  </span><br><span class="line">            |-- ConcurrencyCheckDemo.cs  </span><br><span class="line">        |-- RowVersionDemo  </span><br><span class="line">            |-- RowVersionDemo.cs  </span><br></pre></td></tr></table></figure><p><code>ConcurrencyCheckDemo.cs</code>的内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreConcurrencyDemo.DbModel.ConcurrencyCheckDemo</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcurrencyCheckDemo</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><code>RowVersionDemo.cs</code>的内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreConcurrencyDemo.DbModel.RowVersionDemo</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RowVersionDemo</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">byte</span>[] RowVersion &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="配置实体映射规则-这里指定锁"><a href="#配置实体映射规则-这里指定锁" class="headerlink" title="配置实体映射规则(这里指定锁)"></a>配置实体映射规则(这里指定锁)</h2><p>在项目根目录创建以下路径和文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|--EFCoreConcurrencyDemo  </span><br><span class="line">    |-- DbModelConfiguration  </span><br><span class="line">        |-- ConcurrencyCheckDemoConfiguration.cs  </span><br><span class="line">        |-- RowVersionDemoConfiguration.cs  </span><br></pre></td></tr></table></figure><p><code>ConcurrencyCheckDemoConfiguration.cs</code>的内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbModel.ConcurrencyCheckDemo;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore.Metadata.Builders;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreConcurrencyDemo.DbModelConfiguration</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcurrencyCheckDemoConfiguration</span> : <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">ConcurrencyCheckDemo</span>&gt;  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;ConcurrencyCheckDemo&gt; builder</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            builder.ToTable(<span class="string">&quot;ConcurrencyCheckDemo&quot;</span>);  </span><br><span class="line">            builder.Property(x =&gt; x.Name).IsConcurrencyToken();   </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><code>RowVersionDemoConfiguration.cs</code>的内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbModel.RowVersionDemo;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore.Metadata.Builders;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreConcurrencyDemo.DbModelConfiguration</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RowVersionDemoConfiguration</span>: <span class="title">IEntityTypeConfiguration</span>&lt;<span class="title">RowVersionDemo</span>&gt;  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;RowVersionDemo&gt; builder</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            builder.ToTable(<span class="string">&quot;RowVersionDemo&quot;</span>);  </span><br><span class="line">            builder.Property(x =&gt; x.RowVersion).IsRowVersion();   </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="创建DbContext"><a href="#创建DbContext" class="headerlink" title="创建DbContext"></a>创建<code>DbContext</code></h2><p>在项目根目录创建以下路径和文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|--EFCoreConcurrencyDemo  </span><br><span class="line">    |-- DbContext  </span><br><span class="line">        |-- MyDbContext.cs  </span><br></pre></td></tr></table></figure><p><code>MyDbContext.cs</code>的内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbModel.ConcurrencyCheckDemo;  </span><br><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbModel.RowVersionDemo;  </span><br><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbModelConfiguration;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreConcurrencyDemo.DbContext</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDbContext</span>:<span class="title">Microsoft.EntityFrameworkCore.DbContext</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyDbContext</span>(<span class="params">DbContextOptions&lt;MyDbContext&gt; options</span>):<span class="title">base</span>(<span class="params">options</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;ConcurrencyCheckDemo&gt; ConcurrencyCheckDemos &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;RowVersionDemo&gt; RowVersionDemos &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder modelBuilder</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            modelBuilder.ApplyConfiguration(<span class="keyword">new</span> ConcurrencyCheckDemoConfiguration());  </span><br><span class="line">            modelBuilder.ApplyConfiguration(<span class="keyword">new</span> RowVersionDemoConfiguration());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="修改Startup"><a href="#修改Startup" class="headerlink" title="修改Startup"></a>修改<code>Startup</code></h2><p>修改<code>Startup.ConfigureServices</code>方法，具体内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    services.AddDbContext&lt;MyDbContext&gt;(options =&gt;  </span><br><span class="line">        &#123;  </span><br><span class="line">            options.UseSqlServer(Configuration.GetConnectionString(<span class="string">&quot;EFCoreConcurrencyDemo&quot;</span>));  </span><br><span class="line">            options.EnableSensitiveDataLogging(<span class="literal">false</span>);  </span><br><span class="line">        &#125;);  </span><br><span class="line">    services.AddControllers();  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="添加数据库连接字符串"><a href="#添加数据库连接字符串" class="headerlink" title="添加数据库连接字符串"></a>添加数据库连接字符串</h2><p>在<code>appsettings.json</code>中添加数据库连接字符串，具体内容如下（连接字符串就换成你自己的数据库）：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  <span class="string">&quot;Logging&quot;</span>: &#123;  </span><br><span class="line">    <span class="string">&quot;LogLevel&quot;</span>: &#123;  </span><br><span class="line">      <span class="string">&quot;Default&quot;</span>: <span class="string">&quot;Information&quot;</span>,  </span><br><span class="line">      <span class="string">&quot;Microsoft&quot;</span>: <span class="string">&quot;Warning&quot;</span>,  </span><br><span class="line">      <span class="string">&quot;Microsoft.Hosting.Lifetime&quot;</span>: <span class="string">&quot;Information&quot;</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  <span class="string">&quot;ConnectionStrings&quot;</span>: &#123;  </span><br><span class="line">    <span class="string">&quot;EFCoreConcurrencyDemo&quot;</span>: <span class="string">&quot;Password=jiamiao.x.20.demo;Persist Security Info=True;User ID=sa;Initial Catalog=EFCoreConcurrencyDemo;Data Source=127.0.0.1&quot;</span>  </span><br><span class="line">  &#125;,  </span><br><span class="line">  <span class="string">&quot;AllowedHosts&quot;</span>: <span class="string">&quot;\*&quot;</span>  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="添加测试控制器"><a href="#添加测试控制器" class="headerlink" title="添加测试控制器"></a>添加测试控制器</h2><p>在<code>Controllers</code>中添加<code>DemoController.cs</code>，具体内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading.Tasks;  </span><br><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbContext;  </span><br><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbModel.ConcurrencyCheckDemo;  </span><br><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbModel.RowVersionDemo;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreConcurrencyDemo.Controllers</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    [<span class="meta">Route(<span class="string">&quot;[controller]/[action]&quot;</span>)</span>]  </span><br><span class="line">    [<span class="meta">ApiController</span>]  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoController</span> : <span class="title">ControllerBase</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> MyDbContext _dbContext;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DemoController</span>(<span class="params">MyDbContext dbContext</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            _dbContext = dbContext;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">int</span>\&gt; SeedData()  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">var</span> concurrencyCheckDemo = <span class="keyword">new</span> ConcurrencyCheckDemo()  </span><br><span class="line">            &#123;  </span><br><span class="line">                Name = <span class="string">&quot;ConcurrencyCheck测试&quot;</span>,  </span><br><span class="line">                Age = <span class="number">20</span>  </span><br><span class="line">            &#125;;  </span><br><span class="line">            <span class="keyword">await</span> _dbContext.ConcurrencyCheckDemos.AddAsync(concurrencyCheckDemo);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> rowVersionDemo = <span class="keyword">new</span> RowVersionDemo()  </span><br><span class="line">            &#123;  </span><br><span class="line">                Name = <span class="string">&quot;RowVersion测试&quot;</span>,  </span><br><span class="line">                Age = <span class="number">24</span>  </span><br><span class="line">            &#125;;  </span><br><span class="line">            <span class="keyword">await</span> _dbContext.RowVersionDemos.AddAsync(rowVersionDemo);  </span><br><span class="line">            <span class="keyword">var</span> changedRow = <span class="keyword">await</span> _dbContext.SaveChangesAsync();  </span><br><span class="line">            <span class="keyword">return</span> changedRow;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">int</span>\&gt; ConcurrencyCheck()  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">var</span> dbValue = <span class="keyword">await</span> _dbContext.ConcurrencyCheckDemos.FirstOrDefaultAsync();  </span><br><span class="line">              </span><br><span class="line">            dbValue.Age = <span class="number">29</span>;  </span><br><span class="line">            <span class="keyword">var</span> changedRow = <span class="keyword">await</span> _dbContext.SaveChangesAsync();  </span><br><span class="line">            <span class="keyword">return</span> changedRow;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">int</span>\&gt; RowVersionCheck()  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">var</span> dbValue = <span class="keyword">await</span> _dbContext.RowVersionDemos.FirstOrDefaultAsync();  </span><br><span class="line">              </span><br><span class="line">            dbValue.Age = <span class="number">36</span>;  </span><br><span class="line">            <span class="keyword">var</span> changedRow = <span class="keyword">await</span> _dbContext.SaveChangesAsync();  </span><br><span class="line">            <span class="keyword">return</span> changedRow;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="迁移数据库"><a href="#迁移数据库" class="headerlink" title="迁移数据库"></a>迁移数据库</h2><p>在<code>Visual Studio 2019</code>中的<code>程序包管理控制台</code>中输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add-migration InitDemoDb  </span><br></pre></td></tr></table></figure><p>得到迁移记录之后，用以下命令生成数据库脚本，去<code>Microsoft SQL Server Management Studio</code>中执行即可，或者你可以用<code>EFCore</code>中的<code>update</code>命令直接迁移</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script-migration  </span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li>这里提供测试思路，将项目运行起来，先访问<code>/demo/SeedData</code>往数据库写入两条测试数据</li><li>分别测试<code>/demo/ConcurrencyCheck</code>和<code>/demo/RowVersionCheck</code>，在赋值的那行代码打断点，取得数据之后，自己在<code>Microsoft SQL Server Management Studio</code>中手动修改数据，然后继续运行代码，则可以看出效果</li></ol><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><blockquote><p><a href="https://docs.microsoft.com/zh-cn/ef/core/saving/concurrency">https://docs.microsoft.com/zh-cn/ef/core/saving/concurrency</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> EntityFramework Core </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程 --- 信号量线程同步</title>
      <link href="/posts/26716.html"/>
      <url>/posts/26716.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>上文<a href="url">编码技巧 — 同步锁对象的选定</a>中，提到了在C#中，让线程同步有两种方式：</p><ul><li>锁（lock、Monitor等）</li><li>信号量（EventWaitHandle、Semaphore、Mutex）</li></ul><p>加锁是最常用的线程同步的方法，就不再讨论，本篇主要讨论使用信号量同步线程。</p><span id="more"></span><h2 id="WaitHandle介绍"><a href="#WaitHandle介绍" class="headerlink" title="WaitHandle介绍"></a>WaitHandle介绍</h2><p>实际上，再C#中 <code>EventWaitHandle</code> 、 <code>Semaphore</code> 、 <code>Mutex</code> 都是抽象类 <code>WaitHandle</code> 的派生类，它提供了一组等待信号的方法和属性。如下图：</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/06bc52bb2afd12a18ebda40a8bc58535.image.png" alt="image.png"></p><p>主要包含静态方法 <code>SignalAndWait()</code>，<code>WaitAll()</code>，<code>WaitAny()</code>及一个虚方法<code>WaitOne()</code>。下面介绍一个这几个方法。</p><p>介绍这些方法之前，先简单介绍一下 <code>WaitHandle</code> 的派生类 <code>EventWaitHandle</code>，该派生类有两个实现类 <code>AutoResetEvent</code> 和 <code>ManualResetEvent</code>，其方法列表如下：<br><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/d536d928b78688801d1cf8b167531da4.image.png" alt="image.png"></p><p>重点说一下，<code>Set()</code>和<code>Reset()</code>:</p><ul><li>Set()方法设置事件为有信号状态：当调用 <code>Set()</code> 时，它将被设置为终止状态，并允许一个或多个等待该事件的线程继续执行。</li><li>Reset()方法设置事件为无信号状态：当调用 <code>Reset()</code> 时，它将被设置为非终止状态，所有想要等待该事件的线程都将被阻塞，直到调用 <code>Set()</code> 方法使其变为终止状态。</li></ul><p><strong>注意：这里的有信号，无信号的意思类似于红绿灯，有信号你才能够通行，对于线程来说，有信号意味着可以接着往下运行，无信号则阻塞等待信号。</strong></p><p>接下来的代码段演示皆使用 <code>AutoResetEvent</code> 进行演示。</p><h3 id="SignalAndWait"><a href="#SignalAndWait" class="headerlink" title="SignalAndWait()"></a>SignalAndWait()</h3><p>当调用 <code>WaitHandle</code> 的静态方法 <code>SignalAndWait()</code> 时，会使得当前线程等待一个 <code>WaitHandle</code> 对象的信号，同时设置另一个 <code>WaitHandle</code> 对象为有信号状态。当第一个 <code>WaitHandle</code> 对象收到信号时，当前线程继续执行，同时第二个 <code>WaitHandle</code> 对象变为无信号状态。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> AutoResetEvent event1 = <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">static</span> AutoResetEvent event2 = <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(Worker1));</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(Worker2));</span><br><span class="line"></span><br><span class="line">    t1.Start();</span><br><span class="line">    t2.Start();</span><br><span class="line"></span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Worker1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程1开始执行……&quot;</span>);</span><br><span class="line"></span><br><span class="line">    event1.WaitOne(); <span class="comment">// 等待事件1的发生</span></span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程1收到事件1的信号，继续执行……&quot;</span>);</span><br><span class="line"></span><br><span class="line">    WaitHandle.SignalAndWait(event1, event2); <span class="comment">// 发送事件2的信号并等待事件2的发生</span></span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程1收到事件2的信号，继续执行……&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Worker2</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程2开始执行……&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Thread.Sleep(<span class="number">2000</span>); <span class="comment">// 模拟线程2的执行时间</span></span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程2发出事件1的信号……&quot;</span>);</span><br><span class="line"></span><br><span class="line">    event1.Set(); <span class="comment">// 发送事件1的信号</span></span><br><span class="line"></span><br><span class="line">    Thread.Sleep(<span class="number">2000</span>); <span class="comment">// 模拟线程2的执行时间</span></span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程2发出事件2的信号……&quot;</span>);</span><br><span class="line"></span><br><span class="line">    WaitHandle.SignalAndWait(event2, event1); <span class="comment">// 发送事件1的信号并等待事件1的发生</span></span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程2收到事件1的信号，继续执行……&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1开始执行……</span><br><span class="line">线程2开始执行……</span><br><span class="line">线程2发出事件1的信号……</span><br><span class="line">线程1收到事件1的信号，继续执行……</span><br><span class="line">线程2发出事件2的信号……</span><br><span class="line">线程2收到事件1的信号，继续执行……</span><br><span class="line">线程1收到事件2的信号，继续执行……</span><br></pre></td></tr></table></figure><h3 id="WaitAll"><a href="#WaitAll" class="headerlink" title="WaitAll()"></a>WaitAll()</h3><p>当调用 <code>WaitHandle</code> 的静态方法 <code>WaitAll()</code> 时，它可以等待多个WaitHandle对象的信号，直到所有对象都收到信号或等待超时。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> AutoResetEvent[] events = <span class="keyword">new</span> AutoResetEvent[<span class="number">3</span>]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>),</span><br><span class="line">    <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>),</span><br><span class="line">    <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(Worker1));</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(Worker2));</span><br><span class="line"></span><br><span class="line">    t1.Start();</span><br><span class="line">    t2.Start();</span><br><span class="line"></span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Worker1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程1开始执行……&quot;</span>);</span><br><span class="line"></span><br><span class="line">    WaitHandle.WaitAll(events); <span class="comment">// 等待所有事件的发生</span></span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程1收到所有事件的信号，继续执行……&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Worker2</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程2开始执行……&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Thread.Sleep(<span class="number">2000</span>); <span class="comment">// 模拟线程2的执行时间</span></span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程2发出事件1的信号……&quot;</span>);</span><br><span class="line"></span><br><span class="line">    events[<span class="number">0</span>].Set(); <span class="comment">// 发送事件1的信号</span></span><br><span class="line"></span><br><span class="line">    Thread.Sleep(<span class="number">2000</span>); <span class="comment">// 模拟线程2的执行时间</span></span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程2发出事件2的信号……&quot;</span>);</span><br><span class="line"></span><br><span class="line">    events[<span class="number">1</span>].Set(); <span class="comment">// 发送事件2的信号</span></span><br><span class="line"></span><br><span class="line">    Thread.Sleep(<span class="number">2000</span>); <span class="comment">// 模拟线程2的执行时间</span></span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程2发出事件3的信号……&quot;</span>);</span><br><span class="line"></span><br><span class="line">    events[<span class="number">2</span>].Set(); <span class="comment">// 发送事件3的信号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1开始执行……</span><br><span class="line">线程2开始执行……</span><br><span class="line">线程2发出事件1的信号……</span><br><span class="line">线程2发出事件2的信号……</span><br><span class="line">线程2发出事件3的信号……</span><br><span class="line">线程1收到所有事件的信号，继续执行……</span><br></pre></td></tr></table></figure><h3 id="WaitAny"><a href="#WaitAny" class="headerlink" title="WaitAny()"></a>WaitAny()</h3><p>当调用 <code>WaitHandle</code> 的静态方法 <code>WaitAny()</code> 时，它可以等待多个WaitHandle对象中的任意一个对象收到信号，直到有一个对象收到信号或等待超时。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> AutoResetEvent[] events = <span class="keyword">new</span> AutoResetEvent[<span class="number">3</span>]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>),</span><br><span class="line">    <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>),</span><br><span class="line">    <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(Worker1));</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ThreadStart(Worker2));</span><br><span class="line"></span><br><span class="line">    t1.Start();</span><br><span class="line">    t2.Start();</span><br><span class="line"></span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Worker1</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程1开始执行……&quot;</span>);</span><br><span class="line"></span><br><span class="line">    WaitHandle.WaitAny(events); <span class="comment">// 等待任意事件的发生</span></span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程1收到任意事件的信号，继续执行……&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Worker2</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程2开始执行……&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> randomIndex = <span class="keyword">new</span> Random().Next(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;线程2发出任意一个事件的信号……&quot;</span>);</span><br><span class="line"></span><br><span class="line">    events[randomIndex].Set(); <span class="comment">//发送任意一个事件的信号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1开始执行……</span><br><span class="line">线程2开始执行……</span><br><span class="line">线程2发出任意一个事件的信号……</span><br><span class="line">线程1收到任意事件的信号，继续执行……</span><br></pre></td></tr></table></figure><h3 id="WaitOne"><a href="#WaitOne" class="headerlink" title="WaitOne()"></a>WaitOne()</h3><p><code>WaitOne()</code>方法上文中其实已经用到了，它就表示阻塞当前线程，等待当前 <code>WaitHandle</code> 对象收到信号，直到对象收到信号或等待超时。如果WaitHandle对象收到信号，WaitOne()方法返回true，否则返回false。使用简单就不在贴代码段。</p><h2 id="派生类的异同"><a href="#派生类的异同" class="headerlink" title="派生类的异同"></a>派生类的异同</h2><p>上面已经提到了<code>EventWaitHandle</code> 、 <code>Semaphore</code> 、 <code>Mutex</code> 都是抽象类 <code>WaitHandle</code> 的派生类，它们的作用类似，但在使用和实现上有一些不同。下面我们来简单介绍下它们的异同点。</p><ol><li><p>EventWaitHandle：</p><p><code>EventWaitHandle</code> 有两种类型：<code>AutoResetEvent</code> 和 <code>ManualResetEvent</code>。它们的区别在于<code>AutoResetEvent</code> 在有信号时只通知一个等待线程，而 <code>ManualResetEvent</code> 在有信号时通知所有等待线程。<br>两者设置为终止状态的方式都是调用 <code>Set()</code> 方法。</p></li><li><p>Semaphore</p><p><code>Semaphore</code> 可以用于多个线程之间的资源控制。<code>Semaphore</code> 可以控制同时访问共享资源的线程数量。设置为终止状态的方式是调用 <code>Release()</code> 方法。</p></li><li><p>Mutex</p><p><code>Mutex</code> 可以用于多个线程之间的互斥访问共享资源。<code>Mutex</code> 可以保证同一时间只有一个线程可以访问共享资源。设置为终止状态的方式是调用 <code>ReleaseMutex()</code> 方法。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gRPC in ASP.NET Core</title>
      <link href="/posts/896e333f.html"/>
      <url>/posts/896e333f.html</url>
      
        <content type="html"><![CDATA[<!-- *   [开发环境](#%e5%bc%80%e5%8f%91%e7%8e%af%e5%a2%83)    *   [VSCode](#vscode)*   [消息类型的演进](#%e6%b6%88%e6%81%af%e7%b1%bb%e5%9e%8b%e7%9a%84%e6%bc%94%e8%bf%9b)    *   [更新消息类型的规则](#%e6%9b%b4%e6%96%b0%e6%b6%88%e6%81%af%e7%b1%bb%e5%9e%8b%e7%9a%84%e8%a7%84%e5%88%99)    *   [默认值](#%e9%bb%98%e8%ae%a4%e5%80%bc)    *   [枚举](#%e6%9e%9a%e4%b8%be)*   [在`.NET Core`中使用`gRPC`](#%e5%9c%a8net-core%e4%b8%ad%e4%bd%bf%e7%94%a8grpc)    *   [`ASP.NET Core`](#aspnet-core)    *   [`.NET Core`](#net-core)    *   [引包之后的操作](#%e5%bc%95%e5%8c%85%e4%b9%8b%e5%90%8e%e7%9a%84%e6%93%8d%e4%bd%9c)    *   [作为服务端](#%e4%bd%9c%e4%b8%ba%e6%9c%8d%e5%8a%a1%e7%ab%af)    *   [作为客户端](#%e4%bd%9c%e4%b8%ba%e5%ae%a2%e6%88%b7%e7%ab%af)*   [上代码](#%e4%b8%8a%e4%bb%a3%e7%a0%81)    *   [服务端](#%e6%9c%8d%e5%8a%a1%e7%ab%af)        *   [创建目录](#%e5%88%9b%e5%bb%ba%e7%9b%ae%e5%bd%95)        *   [编写`proto`](#%e7%bc%96%e5%86%99proto)        *   [编写测试数据](#%e7%bc%96%e5%86%99%e6%b5%8b%e8%af%95%e6%95%b0%e6%8d%ae)        *   [编写`Service`](#%e7%bc%96%e5%86%99service)        *   [修改`Startup`](#%e4%bf%ae%e6%94%b9startup)        *   [运行项目](#%e8%bf%90%e8%a1%8c%e9%a1%b9%e7%9b%ae)    *   [客户端](#%e5%ae%a2%e6%88%b7%e7%ab%af)        *   [创建项目](#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae)        *   [复制`proto`文件](#%e5%a4%8d%e5%88%b6proto%e6%96%87%e4%bb%b6)        *   [修改`Program.cs`](#%e4%bf%ae%e6%94%b9programcs)        *   [运行项目](#%e8%bf%90%e8%a1%8c%e9%a1%b9%e7%9b%ae-1)*   [日志和异常](#%e6%97%a5%e5%bf%97%e5%92%8c%e5%bc%82%e5%b8%b8)    *   [日志](#%e6%97%a5%e5%bf%97)        *   [ASP.NET Core](#aspnet-core-1)        *   [.NET Core控制台](#net-core%e6%8e%a7%e5%88%b6%e5%8f%b0)    *   [异常](#%e5%bc%82%e5%b8%b8)*   [关于JWT授权](#%e5%85%b3%e4%ba%8ejwt%e6%8e%88%e6%9d%83)*   [多项目之间共享`proto`文件](#%e5%a4%9a%e9%a1%b9%e7%9b%ae%e4%b9%8b%e9%97%b4%e5%85%b1%e4%ba%abproto%e6%96%87%e4%bb%b6) --><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><h2 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h2><p>window下需要安装<code>Clang</code>，百度找<code>Clang</code>，去官网自行下载，如果下载速度慢，可以添加以下内容到<code>C:\Windows\System32\drivers\etc\host</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">54.231.82.146 vagrantcloud-files-production.s3.amazonaws.com  </span><br><span class="line">219.76.4.4 s3.amazonaws.com  </span><br><span class="line">219.76.4.4 github-cloud.s3.amazonaws.com  </span><br></pre></td></tr></table></figure><p>然后再<code>VSCode</code>中安装两个插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vscode-proto3  </span><br><span class="line">Clang-Format  </span><br></pre></td></tr></table></figure><h1 id="消息类型的演进"><a href="#消息类型的演进" class="headerlink" title="消息类型的演进"></a>消息类型的演进</h1><ul><li><p>向前兼容变更：使用新的<code>.proto</code>文件来写数据 – 从旧的<code>.proto</code>文件读取数据</p></li><li><p>向后兼容变更：使用旧的<code>.proto</code>文件来写数据 – 从新的<code>.proto</code>文件读取数据</p><h2 id="更新消息类型的规则"><a href="#更新消息类型的规则" class="headerlink" title="更新消息类型的规则"></a>更新消息类型的规则</h2></li><li><p>不要修改任何现有字段的数字(tag)</p></li><li><p>可以添加新的字段，旧的代码会忽略掉新字段的解析，所以要注意新字段的默认值</p></li><li><p>字段可以被删除，只要它们的数字<code>(tag)</code>在更新后的消息类型中不再使用即可，也可以把字段名使用<code>OBSOLETE_</code>前缀而不是删除字段，或者把这些字段的数字<code>(tag)</code>进行保留<code>(reserved)</code>，以免未来其他开发者不小心使用这些字段</p></li><li><p>尽量不要修改原有的字符数据类型</p><h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>默认值在更新<code>Protocol Buffer</code>消息定义的时候有很重要的作用，它可以防止对现有代码&#x2F;新代码造成破坏性影响。它们也可以保证字段永远不会有<code>null</code>值</p></li></ul><p>但是，默认值还是非常危险的：<strong>你无法区分这个默认值到底是来自一个丢失的字段还是字段的实际值正好等于默认值</strong></p><p>所以，需要保证这个默认值对于业务来说是一个毫无意义的值，例如<code>int32 pop</code>人口这个字段的默认值可以设置为<code>-1</code>，再就是可能需要再代码里对默认值进行判断处理</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p><code>enum</code>同样可以进化，就和消息的字段一样，可以添加、删除值，也可以保留值</p><p>但是如果代码不知道它接收到的值对应哪个<code>enum</code>值，那么<code>enum</code>的默认值将会被采用</p><h1 id="在-NET-Core中使用gRPC"><a href="#在-NET-Core中使用gRPC" class="headerlink" title="在.NET Core中使用gRPC"></a>在<code>.NET Core</code>中使用<code>gRPC</code></h1><h2 id="ASP-NET-Core"><a href="#ASP-NET-Core" class="headerlink" title="ASP.NET Core"></a><code>ASP.NET Core</code></h2><p>依赖包：</p><p><code>Grpc.AspNetCore </code> </p><h2 id="NET-Core"><a href="#NET-Core" class="headerlink" title=".NET Core"></a><code>.NET Core</code></h2><p>依赖包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Google.Protobuf  </span><br><span class="line">Grpc.Net.Client  </span><br><span class="line">Grpc.Tools  </span><br></pre></td></tr></table></figure><h2 id="引包之后的操作"><a href="#引包之后的操作" class="headerlink" title="引包之后的操作"></a>引包之后的操作</h2><p>按照项目类型引入上面的包之后，直接编译是不会得到<code>gRPC</code>框架生成的代码，需要做以下操作：<br>右键.proto文件 -&gt; 属性 -&gt; 将<code>Build Action</code>选择为<code>Protobuf compiler</code> -&gt; <code>gRPC Stub Classes</code>按照需求选择<code>Client and Server/Client only/Server only/Do not generate</code></p><p>进行完上面的操作之后，编译项目会在<code>obj\Debug\netcoreapp3.1</code>目录里自动生成<code>RPC</code>代码</p><h2 id="作为服务端"><a href="#作为服务端" class="headerlink" title="作为服务端"></a>作为服务端</h2><p>怎么实现<code>rpc</code>定义的方法：假设在<code>.proto</code>文件里有<code>EmployeeService</code>这样一个<code>service</code>，在编译项目之后，会有一个<code>EmployeeService.EmployeeServiceBase</code>的类，自己编写一个类继承自<code>EmployeeService.EmployeeServiceBase</code>这个类，然后<code>override</code>去重载<code>.proto</code>服务里定义的那些<code>rpc</code>方法即可</p><h2 id="作为客户端"><a href="#作为客户端" class="headerlink" title="作为客户端"></a>作为客户端</h2><p>怎么调用<code>rpc</code>定义的方法：需要先创建<code>Channel</code>，例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> channel = GrpcChannel.ForAddress(<span class="string">&quot;https://localhost:5001&quot;</span>);  </span><br></pre></td></tr></table></figure><p>然后假设在<code>.proto</code>文件里有<code>EmployeeService</code>这样一个<code>service</code>，在编译项目之后(需要选择client或client and server)，会有一个<code>EmployeeService.EmployeeServiceClient</code>的类，实例化这个类就相当实例化一个<code>client</code>，例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> EmployeeService.EmployeeServiceClient(channel);  </span><br></pre></td></tr></table></figure><p>在<code>client</code>里就可以调用<code>.proto</code>服务里定义的那些方法</p><h1 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>创建名字为<code>RoutingDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>空</code>，通过<code>nuget</code>引入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Grpc.AspNetCore  </span><br></pre></td></tr></table></figure><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>在项目根目录创建以下三个文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Data  </span><br><span class="line">Protos  </span><br><span class="line">Services  </span><br></pre></td></tr></table></figure><h3 id="编写proto"><a href="#编写proto" class="headerlink" title="编写proto"></a>编写<code>proto</code></h3><p>在<code>Protos</code>文件夹中添加文件<code>Order.proto</code>，具体内容如下：</p><figure class="highlight proto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">option</span> csharp_namespace = <span class="string">&quot;GrpcDemo.Protos&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">message </span><span class="title class_">Order</span>&#123;  </span><br><span class="line"><span class="type">int32</span> Id = <span class="number">1</span>;  </span><br><span class="line"><span class="type">string</span> OrderNo = <span class="number">2</span>;  </span><br><span class="line"><span class="type">int32</span> Status = <span class="number">3</span>;  </span><br><span class="line"><span class="type">float</span> Payment = <span class="number">4</span>;  </span><br><span class="line"><span class="keyword">repeated</span> OrderProduct Products = <span class="number">5</span>;  </span><br><span class="line">OrderAddress Address = <span class="number">6</span>;  </span><br><span class="line"><span class="type">int32</span> OrderOwner = <span class="number">7</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">message </span><span class="title class_">OrderProduct</span>&#123;  </span><br><span class="line"><span class="type">string</span> ProductTitle = <span class="number">1</span>;  </span><br><span class="line"><span class="type">string</span> SkuTitle = <span class="number">2</span>;  </span><br><span class="line"><span class="type">int32</span> Num = <span class="number">3</span>;  </span><br><span class="line"><span class="type">float</span> UnitPrice = <span class="number">4</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">message </span><span class="title class_">OrderAddress</span>&#123;  </span><br><span class="line"><span class="type">string</span> Province = <span class="number">1</span>;  </span><br><span class="line"><span class="type">string</span> City = <span class="number">2</span>;  </span><br><span class="line"><span class="type">string</span> Districe = <span class="number">3</span>;  </span><br><span class="line"><span class="type">string</span> Detail = <span class="number">4</span>;  </span><br><span class="line"><span class="type">string</span> Name = <span class="number">5</span>;  </span><br><span class="line"><span class="type">string</span> Mobile = <span class="number">6</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">message </span><span class="title class_">GetByOrderNoRequest</span>&#123;  </span><br><span class="line"><span class="type">string</span> OrderNo = <span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">message </span><span class="title class_">GetByOwnerRequest</span>&#123;  </span><br><span class="line"><span class="type">int32</span> OrderOwner = <span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">message </span><span class="title class_">BatchAddOrderNoReturnResponse</span>&#123;  </span><br><span class="line"><span class="type">bool</span> IsAllSuccess = <span class="number">1</span>;  </span><br><span class="line"><span class="keyword">repeated</span> <span class="type">string</span> FailOrderNo = <span class="number">2</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">service </span><span class="title class_">OrderService</span>&#123;  </span><br><span class="line"><span class="function"><span class="keyword">rpc</span> GetByOrderNo(GetByOrderNoRequest) <span class="keyword">returns</span>(Order)</span>;  </span><br><span class="line"><span class="function"><span class="keyword">rpc</span> GetByOwner(GetByOwnerRequest) <span class="keyword">returns</span>(stream Order)</span>;  </span><br><span class="line"><span class="function"><span class="keyword">rpc</span> AddOrder(Order) <span class="keyword">returns</span>(Order)</span>;  </span><br><span class="line"><span class="function"><span class="keyword">rpc</span> BatchAddOrder(stream Order) <span class="keyword">returns</span>(stream Order)</span>;  </span><br><span class="line"><span class="function"><span class="keyword">rpc</span> BatchAddOrderNoReturn(stream Order) <span class="keyword">returns</span>(BatchAddOrderNoReturnResponse)</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>在<code>解决方案资源管理器</code>找到<code>Order.proto</code>文件，右键 -&gt; 属性 -&gt; <code>Build Action</code>选择<code>Protobuf compiler</code> -&gt; <code>gRPC Stub Classes</code>选择<code>Server only</code></p><p>编译一次项目</p><h3 id="编写测试数据"><a href="#编写测试数据" class="headerlink" title="编写测试数据"></a>编写测试数据</h3><p>在<code>Data</code>文件夹创建<code>InMemoryData.cs</code>文件，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> GrpcDemo.Protos;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GrpcServerDemo.Data</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InMemoryData</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Order&gt; Orders = <span class="keyword">new</span> List&lt;Order&gt;()  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">new</span> Order()  </span><br><span class="line">            &#123;  </span><br><span class="line">                Id = <span class="number">1</span>,  </span><br><span class="line">                OrderNo = <span class="string">&quot;2020042201&quot;</span>,  </span><br><span class="line">                Status = <span class="number">1</span>,  </span><br><span class="line">                Payment = <span class="number">43141.98f</span>,  </span><br><span class="line">                Products =  </span><br><span class="line">                &#123;  </span><br><span class="line">                    <span class="keyword">new</span> Order.Types.OrderProduct()  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        ProductTitle = <span class="string">&quot;Apple iPhone11&quot;</span>,  </span><br><span class="line">                        SkuTitle = <span class="string">&quot;256GB 黑色&quot;</span>,  </span><br><span class="line">                        Num = <span class="number">2</span>,  </span><br><span class="line">                        UnitPrice = <span class="number">9999.99f</span>  </span><br><span class="line">                    &#125;,  </span><br><span class="line">                    <span class="keyword">new</span> Order.Types.OrderProduct()  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        ProductTitle = <span class="string">&quot;Apple MacBook Pro&quot;</span>,  </span><br><span class="line">                        SkuTitle = <span class="string">&quot;i7 512GB 灰色&quot;</span>,  </span><br><span class="line">                        Num = <span class="number">1</span>,  </span><br><span class="line">                        UnitPrice = <span class="number">23142</span>  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;,  </span><br><span class="line">                Address = <span class="keyword">new</span> Order.Types.OrderAddress()  </span><br><span class="line">                &#123;  </span><br><span class="line">                    Province = <span class="string">&quot;广东省&quot;</span>,  </span><br><span class="line">                    City = <span class="string">&quot;深圳市&quot;</span>,  </span><br><span class="line">                    Districe = <span class="string">&quot;南山区&quot;</span>,  </span><br><span class="line">                    Detail = <span class="string">&quot;Nanshan Road 1234&quot;</span>,  </span><br><span class="line">                    Name = <span class="string">&quot;Jiamiao.x&quot;</span>,  </span><br><span class="line">                    Mobile = <span class="string">&quot;13500000000&quot;</span>  </span><br><span class="line">                &#125;,  </span><br><span class="line">                OrderOwner = <span class="number">100</span>,  </span><br><span class="line">            &#125;,  </span><br><span class="line">            <span class="keyword">new</span> Order()  </span><br><span class="line">            &#123;  </span><br><span class="line">                Id = <span class="number">2</span>,  </span><br><span class="line">                OrderNo = <span class="string">&quot;2020042202&quot;</span>,  </span><br><span class="line">                Status = <span class="number">2</span>,  </span><br><span class="line">                Payment = <span class="number">56.00f</span>,  </span><br><span class="line">                Products =  </span><br><span class="line">                &#123;  </span><br><span class="line">                    <span class="keyword">new</span> Order.Types.OrderProduct()  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        ProductTitle = <span class="string">&quot;ASP.NET Core微服务实战&quot;</span>,  </span><br><span class="line">                        SkuTitle = <span class="string">&quot;1本&quot;</span>,  </span><br><span class="line">                        Num = <span class="number">1</span>,  </span><br><span class="line">                        UnitPrice = <span class="number">56.00f</span>  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;,  </span><br><span class="line">                Address = <span class="keyword">new</span> Order.Types.OrderAddress()  </span><br><span class="line">                &#123;  </span><br><span class="line">                    Province = <span class="string">&quot;广东省&quot;</span>,  </span><br><span class="line">                    City = <span class="string">&quot;深圳市&quot;</span>,  </span><br><span class="line">                    Districe = <span class="string">&quot;南山区&quot;</span>,  </span><br><span class="line">                    Detail = <span class="string">&quot;Nanshan Road 1234&quot;</span>,  </span><br><span class="line">                    Name = <span class="string">&quot;Jiamiao.x&quot;</span>,  </span><br><span class="line">                    Mobile = <span class="string">&quot;13500000000&quot;</span>  </span><br><span class="line">                &#125;,  </span><br><span class="line">                OrderOwner = <span class="number">100</span>  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><strong>注意：这里的<code>Order</code>是<code>gRPC</code>生成的，命名空间为<code>GrpcDemo.Protos</code></strong></p><h3 id="编写Service"><a href="#编写Service" class="headerlink" title="编写Service"></a>编写<code>Service</code></h3><p>在<code>Services</code>文件夹创建<code>DemoOrderService.cs</code>文件，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Linq;  </span><br><span class="line"><span class="keyword">using</span> System.Threading;  </span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;  </span><br><span class="line"><span class="keyword">using</span> Grpc.Core;  </span><br><span class="line"><span class="keyword">using</span> GrpcDemo.Protos;  </span><br><span class="line"><span class="keyword">using</span> GrpcServerDemo.Data;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GrpcServerDemo.Services</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoOrderService</span> : <span class="title">OrderService.OrderServiceBase</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;DemoOrderService&gt; _logger;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DemoOrderService</span>(<span class="params">ILogger&lt;DemoOrderService&gt; logger</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            _logger = logger;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task&lt;Order&gt; <span class="title">GetByOrderNo</span>(<span class="params">GetByOrderNoRequest request, ServerCallContext context</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            _logger.LogInformation(<span class="string">&quot;有人请求接口 -&gt; GetByOrderNo&quot;</span>);  </span><br><span class="line">            <span class="keyword">var</span> metaData = context.RequestHeaders;  </span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> metaData)  </span><br><span class="line">            &#123;  </span><br><span class="line">                _logger.LogInformation(<span class="string">$&quot;<span class="subst">&#123;item.Key&#125;</span>: <span class="subst">&#123;item.Value&#125;</span>&quot;</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">await</span> Task.CompletedTask;  </span><br><span class="line">            <span class="keyword">var</span> dbValue = InMemoryData.Orders.FirstOrDefault(x =&gt; x.OrderNo == request.OrderNo);  </span><br><span class="line">            <span class="keyword">if</span> (dbValue != <span class="literal">null</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> dbValue;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">throw</span>  <span class="keyword">new</span> Exception(<span class="string">&quot;订单号错误&quot;</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">GetByOwner</span>(<span class="params">GetByOwnerRequest request, IServerStreamWriter&lt;Order&gt; responseStream, ServerCallContext context</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            _logger.LogInformation(<span class="string">&quot;有人请求接口 -&gt; GetByOwner&quot;</span>);  </span><br><span class="line">            <span class="keyword">var</span> dbValue = InMemoryData.Orders.Where(x =&gt; x.OrderOwner == request.OrderOwner);  </span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> dbValue)  </span><br><span class="line">            &#123;  </span><br><span class="line">                Thread.Sleep(<span class="number">2000</span>);  </span><br><span class="line">                _logger.LogInformation(<span class="string">$&quot;发送数据：<span class="subst">&#123;item&#125;</span>&quot;</span>);  </span><br><span class="line">                <span class="keyword">await</span> responseStream.WriteAsync(item);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task&lt;Order&gt; <span class="title">AddOrder</span>(<span class="params">Order request, ServerCallContext context</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            _logger.LogInformation(<span class="string">&quot;有人请求接口 -&gt; AddOrder&quot;</span>);  </span><br><span class="line">            <span class="keyword">await</span> Task.CompletedTask;  </span><br><span class="line">            request.Id = InMemoryData.Orders.Max(x =&gt; x.Id) + <span class="number">1</span>;  </span><br><span class="line">            InMemoryData.Orders.Add(request);  </span><br><span class="line">            <span class="keyword">return</span> request;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">BatchAddOrder</span>(<span class="params">IAsyncStreamReader&lt;Order&gt; requestStream, IServerStreamWriter&lt;Order&gt; responseStream, ServerCallContext context</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            _logger.LogInformation(<span class="string">&quot;有人请求接口 -&gt; BatchAddOrder&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">await</span> requestStream.MoveNext())  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">var</span> inputOrder = requestStream.Current;  </span><br><span class="line">                <span class="keyword">lock</span> (<span class="keyword">this</span>)  </span><br><span class="line">                &#123;  </span><br><span class="line">                    _logger.LogInformation(<span class="string">$&quot;接受数据：<span class="subst">&#123;inputOrder&#125;</span>&quot;</span>);  </span><br><span class="line">                    inputOrder.Id = InMemoryData.Orders.Max(x =&gt; x.Id) + <span class="number">1</span>;  </span><br><span class="line">                    InMemoryData.Orders.Add(inputOrder);  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">await</span> responseStream.WriteAsync(inputOrder);  </span><br><span class="line">                Thread.Sleep(<span class="number">5000</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p><strong>注意：这里的<code>OrderService.OrderServiceBase</code>一样是<code>gRPC</code>生成的，命名空间为<code>GrpcDemo.Protos</code></strong></p><h3 id="修改Startup"><a href="#修改Startup" class="headerlink" title="修改Startup"></a>修改<code>Startup</code></h3><p>修改<code>Startup.cs</code>，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> GrpcServerDemo.Services;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GrpcServerDemo</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            services.AddGrpc();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (env.IsDevelopment())  </span><br><span class="line">            &#123;  </span><br><span class="line">                app.UseDeveloperExceptionPage();  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            app.UseHttpsRedirection();  </span><br><span class="line">            app.UseRouting();  </span><br><span class="line">  </span><br><span class="line">            app.UseEndpoints(endpoints =&gt;  </span><br><span class="line">            &#123;  </span><br><span class="line">                endpoints.MapGrpcService&lt;DemoOrderService&gt;();  </span><br><span class="line">            &#125;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>在<code>Powershell</code>中进入到项目根目录，直接<code>dotnet run</code>运行目录即可</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>创建名字为<code>GrpcClientDemo</code>的<code>控制台应用</code>，通过<code>nuget</code>引入以下三个包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Google.Protobuf  </span><br><span class="line">Grpc.Net.Client  </span><br><span class="line">Grpc.Tools  </span><br></pre></td></tr></table></figure><h3 id="复制proto文件"><a href="#复制proto文件" class="headerlink" title="复制proto文件"></a>复制<code>proto</code>文件</h3><p>将服务端<code>GrpcServerDemo</code>的<code>Protos</code>文件夹拷贝到项目根目录，在<code>解决方案资源管理器</code>找到<code>Order.proto</code>文件，右键 -&gt; 属性 -&gt; <code>Build Action</code>选择<code>Protobuf compiler</code> -&gt; <code>gRPC Stub Classes</code>选择<code>Client only</code></p><h3 id="修改Program-cs"><a href="#修改Program-cs" class="headerlink" title="修改Program.cs"></a>修改<code>Program.cs</code></h3><p>修改<code>Program.cs</code>文件，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;  </span><br><span class="line"><span class="keyword">using</span> Grpc.Core;  </span><br><span class="line"><span class="keyword">using</span> Grpc.Net.Client;  </span><br><span class="line"><span class="keyword">using</span> GrpcDemo.Protos;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GrpcClientDemo</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>\[\] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> channel = GrpcChannel.ForAddress(<span class="string">&quot;https://localhost:5001&quot;</span>);  </span><br><span class="line">            <span class="keyword">var</span> client = <span class="keyword">new</span> OrderService.OrderServiceClient(channel);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> option = <span class="built_in">int</span>.Parse(<span class="keyword">args</span>\[<span class="number">0</span>\]);  </span><br><span class="line">            <span class="keyword">switch</span> (option)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:  </span><br><span class="line">                    <span class="keyword">await</span> GetByOrderNoAsync(client);  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:  </span><br><span class="line">                    <span class="keyword">await</span> GetByOwner(client);  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:  </span><br><span class="line">                    <span class="keyword">await</span> AddOrder(client);  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:  </span><br><span class="line">                    <span class="keyword">await</span> BatchAddOrder(client);  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;==========END==========&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">GetByOrderNoAsync</span>(<span class="params">OrderService.OrderServiceClient client</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">var</span> metaData = <span class="keyword">new</span> Metadata()  </span><br><span class="line">            &#123;  </span><br><span class="line">                &#123;<span class="string">&quot;userName&quot;</span>, <span class="string">&quot;jiamiao.x&quot;</span>&#125;,  </span><br><span class="line">                &#123;<span class="string">&quot;clientName&quot;</span>, <span class="string">&quot;GrpcClientDemo&quot;</span>&#125;  </span><br><span class="line">            &#125;;  </span><br><span class="line">            <span class="keyword">var</span> response = <span class="keyword">await</span> client.GetByOrderNoAsync(<span class="keyword">new</span> GetByOrderNoRequest() &#123;OrderNo = <span class="string">&quot;2020042201&quot;</span>&#125;,metaData);  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;接收到数据：<span class="subst">&#123;response&#125;</span>&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">GetByOwner</span>(<span class="params">OrderService.OrderServiceClient client</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">var</span> response = client.GetByOwner(<span class="keyword">new</span> GetByOwnerRequest() &#123;OrderOwner = <span class="number">100</span>&#125;);  </span><br><span class="line">            <span class="keyword">var</span> responseStream = response.ResponseStream;  </span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">await</span> responseStream.MoveNext())  </span><br><span class="line">            &#123;  </span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;接收到数据：<span class="subst">&#123;responseStream.Current&#125;</span>&quot;</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;数据接收完毕&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">AddOrder</span>(<span class="params">OrderService.OrderServiceClient client</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">var</span> order = <span class="keyword">new</span> Order()  </span><br><span class="line">            &#123;  </span><br><span class="line">                OrderNo = <span class="string">&quot;2020042301&quot;</span>,  </span><br><span class="line">                Status = <span class="number">1</span>,  </span><br><span class="line">                Payment = <span class="number">43141.98f</span>,  </span><br><span class="line">                Products =  </span><br><span class="line">                &#123;  </span><br><span class="line">                    <span class="keyword">new</span> Order.Types.OrderProduct()  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        ProductTitle = <span class="string">&quot;OnePlus 7T&quot;</span>,  </span><br><span class="line">                        SkuTitle = <span class="string">&quot;256GB 蓝色&quot;</span>,  </span><br><span class="line">                        Num = <span class="number">1</span>,  </span><br><span class="line">                        UnitPrice = <span class="number">3600f</span>  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;,  </span><br><span class="line">                Address = <span class="keyword">new</span> Order.Types.OrderAddress()  </span><br><span class="line">                &#123;  </span><br><span class="line">                    Province = <span class="string">&quot;广东省&quot;</span>,  </span><br><span class="line">                    City = <span class="string">&quot;深圳市&quot;</span>,  </span><br><span class="line">                    Districe = <span class="string">&quot;南山区&quot;</span>,  </span><br><span class="line">                    Detail = <span class="string">&quot;北科大厦7003&quot;</span>,  </span><br><span class="line">                    Name = <span class="string">&quot;Jiamiao.x&quot;</span>,  </span><br><span class="line">                    Mobile = <span class="string">&quot;13822113366&quot;</span>  </span><br><span class="line">                &#125;,  </span><br><span class="line">                OrderOwner = <span class="number">100</span>,  </span><br><span class="line">            &#125;;  </span><br><span class="line">            <span class="keyword">var</span> response = <span class="keyword">await</span> client.AddOrderAsync(order);  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;接收到数据：<span class="subst">&#123;response&#125;</span>&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">BatchAddOrder</span>(<span class="params">OrderService.OrderServiceClient client</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">var</span> orders = <span class="keyword">new</span> List&lt;Order&gt;()  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">new</span> Order()  </span><br><span class="line">                &#123;  </span><br><span class="line">                    OrderNo = <span class="string">&quot;2020042301&quot;</span>,  </span><br><span class="line">                    Status = <span class="number">1</span>,  </span><br><span class="line">                    Payment = <span class="number">3600f</span>,  </span><br><span class="line">                    Products =  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        <span class="keyword">new</span> Order.Types.OrderProduct()  </span><br><span class="line">                        &#123;  </span><br><span class="line">                            ProductTitle = <span class="string">&quot;OnePlus 7T&quot;</span>,  </span><br><span class="line">                            SkuTitle = <span class="string">&quot;256GB 蓝色&quot;</span>,  </span><br><span class="line">                            Num = <span class="number">1</span>,  </span><br><span class="line">                            UnitPrice = <span class="number">3600f</span>  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125;,  </span><br><span class="line">                    Address = <span class="keyword">new</span> Order.Types.OrderAddress()  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        Province = <span class="string">&quot;广东省&quot;</span>,  </span><br><span class="line">                        City = <span class="string">&quot;深圳市&quot;</span>,  </span><br><span class="line">                        Districe = <span class="string">&quot;南山区&quot;</span>,  </span><br><span class="line">                        Detail = <span class="string">&quot;北科大厦7003&quot;</span>,  </span><br><span class="line">                        Name = <span class="string">&quot;Jiamiao.x&quot;</span>,  </span><br><span class="line">                        Mobile = <span class="string">&quot;13822113366&quot;</span>  </span><br><span class="line">                    &#125;,  </span><br><span class="line">                    OrderOwner = <span class="number">100</span>,  </span><br><span class="line">                &#125;,  </span><br><span class="line">                <span class="keyword">new</span> Order()  </span><br><span class="line">                &#123;  </span><br><span class="line">                    OrderNo = <span class="string">&quot;2020042302&quot;</span>,  </span><br><span class="line">                    Status = <span class="number">1</span>,  </span><br><span class="line">                    Payment = <span class="number">13999.99f</span>,  </span><br><span class="line">                    Products =  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        <span class="keyword">new</span> Order.Types.OrderProduct()  </span><br><span class="line">                        &#123;  </span><br><span class="line">                            ProductTitle = <span class="string">&quot;SONY PS4 Pro&quot;</span>,  </span><br><span class="line">                            SkuTitle = <span class="string">&quot;1TB 黑色&quot;</span>,  </span><br><span class="line">                            Num = <span class="number">1</span>,  </span><br><span class="line">                            UnitPrice = <span class="number">3999.99f</span>  </span><br><span class="line">                        &#125;,  </span><br><span class="line">                        <span class="keyword">new</span> Order.Types.OrderProduct()  </span><br><span class="line">                        &#123;  </span><br><span class="line">                            ProductTitle = <span class="string">&quot;Surface Desktop Pro&quot;</span>,  </span><br><span class="line">                            SkuTitle = <span class="string">&quot;1TB 白色&quot;</span>,  </span><br><span class="line">                            Num = <span class="number">1</span>,  </span><br><span class="line">                            UnitPrice = <span class="number">13999.99f</span>  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125;,  </span><br><span class="line">                    Address = <span class="keyword">new</span> Order.Types.OrderAddress()  </span><br><span class="line">                    &#123;  </span><br><span class="line">                        Province = <span class="string">&quot;广东省&quot;</span>,  </span><br><span class="line">                        City = <span class="string">&quot;深圳市&quot;</span>,  </span><br><span class="line">                        Districe = <span class="string">&quot;南山区&quot;</span>,  </span><br><span class="line">                        Detail = <span class="string">&quot;北科大厦7003&quot;</span>,  </span><br><span class="line">                        Name = <span class="string">&quot;Jiamiao.x&quot;</span>,  </span><br><span class="line">                        Mobile = <span class="string">&quot;13822113366&quot;</span>  </span><br><span class="line">                    &#125;,  </span><br><span class="line">                    OrderOwner = <span class="number">100</span>,  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;;  </span><br><span class="line">            <span class="keyword">var</span> call = client.BatchAddOrder();  </span><br><span class="line">              </span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> order <span class="keyword">in</span> orders)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">await</span> call.RequestStream.WriteAsync(order);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">await</span> call.RequestStream.CompleteAsync();  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;----数据发送完毕----&quot;</span>);  </span><br><span class="line">            <span class="keyword">await</span> Task.Run(<span class="keyword">async</span> () =&gt;  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">await</span> call.ResponseStream.MoveNext())  </span><br><span class="line">                &#123;  </span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;接收到消息：<span class="subst">&#123;call.ResponseStream.Current&#125;</span>&quot;</span>);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="运行项目-1"><a href="#运行项目-1" class="headerlink" title="运行项目"></a>运行项目</h3><p>在<code>Powershell</code>进入到项目根目录，使用<code>dotnet run [arg]</code>运行项目既可以看到效果，<code>[arg]</code>是对应<code>switch</code>里的参数</p><h1 id="日志和异常"><a href="#日志和异常" class="headerlink" title="日志和异常"></a>日志和异常</h1><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="ASP-NET-Core-1"><a href="#ASP-NET-Core-1" class="headerlink" title="ASP.NET Core"></a>ASP.NET Core</h3><p>作为服务端在<code>ASP.NET Core</code>中开启<code>gRPC</code>日志只需要在<code>appsettings.json</code>中配置<code>grpc</code>的日志等级即可，修改<code>appsettings.json</code>内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  <span class="string">&quot;Logging&quot;</span>: &#123;  </span><br><span class="line">    <span class="string">&quot;LogLevel&quot;</span>: &#123;  </span><br><span class="line">      <span class="string">&quot;Default&quot;</span>: <span class="string">&quot;Information&quot;</span>,  </span><br><span class="line">      <span class="string">&quot;Microsoft&quot;</span>: <span class="string">&quot;Warning&quot;</span>,  </span><br><span class="line">      <span class="string">&quot;Microsoft.Hosting.Lifetime&quot;</span>: <span class="string">&quot;Information&quot;</span>,  </span><br><span class="line">      <span class="string">&quot;grpc&quot;</span>: <span class="string">&quot;Debug&quot;</span>   </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;,  </span><br><span class="line">  <span class="string">&quot;AllowedHosts&quot;</span>: <span class="string">&quot;\*&quot;</span>  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>运行项目就可以看到控制台打印出<code>gRPC</code>相关日志</p><h3 id="NET-Core控制台"><a href="#NET-Core控制台" class="headerlink" title=".NET Core控制台"></a>.NET Core控制台</h3><p>在客户端的<code>.NET Core控制台程序</code>，需要自定义一个<code>LoggerFactory</code>，然后在创建<code>Channel</code>的时候指定自定义的<code>LoggerFactory</code>。这里的示例使用<code>Serilog</code>来作为日志组件，需要在引入以下三个包：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Serilog  </span><br><span class="line">Serilog.Extensions.Logging  </span><br><span class="line">Serilog.Sinks.Console  </span><br></pre></td></tr></table></figure><p>创建<code>SerilogLoggerFactory.cs</code>，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;  </span><br><span class="line"><span class="keyword">using</span> Serilog.Debugging;  </span><br><span class="line"><span class="keyword">using</span> Serilog.Extensions.Logging;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Jiamiao.x.GrpcClient</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SerilogLoggerFactory</span>:<span class="title">ILoggerFactory</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> SerilogLoggerProvider _provider;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SerilogLoggerFactory</span>(<span class="params">Serilog.ILogger logger=<span class="literal">null</span>,<span class="built_in">bool</span> dispose = <span class="literal">false</span></span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            _provider = <span class="keyword">new</span> SerilogLoggerProvider(logger, dispose);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span> =&gt; _provider.Dispose();  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> ILogger <span class="title">CreateLogger</span>(<span class="params"><span class="built_in">string</span> categoryName</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">return</span> _provider.CreateLogger(categoryName);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddProvider</span>(<span class="params">ILoggerProvider provider</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            SelfLog.WriteLine(<span class="string">&quot;Ignore added logger provider &#123;0&#125;&quot;</span>, provider);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>回到<code>gRPC</code>服务调用的地方，将创建<code>GrpcChannel</code>的代码修改如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> channel = GrpcChannel.ForAddress(<span class="string">&quot;https://localhost:5001&quot;</span>,<span class="keyword">new</span> GrpcChannelOptions()  </span><br><span class="line">&#123;  </span><br><span class="line">    LoggerFactory = <span class="keyword">new</span> SerilogLoggerFactory()  </span><br><span class="line">&#125;);  </span><br></pre></td></tr></table></figure><p>运行项目即可以看到<code>gRPC</code>日志内容</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>服务端在<code>gRPC</code>抛出异常的时候，可以抛出<code>RpcException</code>来指定异常类型，<code>RpcException</code>示例里的<code>trailer</code>是一个<code>Metadata</code>，可以携带自定义的键值对，客户端捕获异常也可以捕获指定的<code>RpcException</code>，一样可以拿到<code>trailer</code>来获取自定义的键值对信息</p><h1 id="关于JWT授权"><a href="#关于JWT授权" class="headerlink" title="关于JWT授权"></a>关于JWT授权</h1><p>在通过授权接口获取到<code>JWT Token</code>之后，与普通<code>HTTP</code>请求类似，<code>JWT Token</code>也是放在头部与请求一起发送出去，只不过在<code>RPC</code>换了个名词，编程<code>MetaData</code>，其实是一样道理，用<code>Authorization:Bearer &#123;JWT Token&#125;</code>来进行发送即可</p><h1 id="多项目之间共享proto文件"><a href="#多项目之间共享proto文件" class="headerlink" title="多项目之间共享proto文件"></a>多项目之间共享<code>proto</code>文件</h1><ul><li>使用单独的<code>Git</code>仓库管理<code>proto</code>文件</li><li>使用<code>submodule</code>将<code>proto</code>文件集成到工程目录中</li><li>使用<code>dotnet-grpc</code>命令行添加<code>proto</code>文件及祥光依赖包引用</li></ul><p><em>备注：由<code>proto</code>生成的代码文件会存放在<code>obj</code>目录中，不会被嵌入到<code>Git</code>仓库</em></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> gRPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码技巧 --- 同步锁对象的选定</title>
      <link href="/posts/16223.html"/>
      <url>/posts/16223.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在C#中，让线程同步有两种方式：</p><ul><li>锁（lock、Monitor）</li><li>信号量（EventWaitHandle、Semaphore、Mutex）</li></ul><p>线程锁的原理，就是锁住一个资源，使得应用程序在此刻只有一个线程访问该资源。通俗地讲，就是让多线程变成单线程。在C#中，可以将被锁定的资源理解成 <code>new</code> 出来的普通CLR对象。</p><span id="more"></span><h2 id="如何选定"><a href="#如何选定" class="headerlink" title="如何选定"></a>如何选定</h2><p>既然需要锁定的资源就是C#中的一个对象，我们就该仔细思考，到底什么样的对象能够成为一个锁对象（也叫同步对象）？</p><p>那么选择同步对象的时候，应当始终注意以下几点：</p><ol><li>同步对象在需要同步的多个线程中是可见的同一个对象。</li><li>在非静态方法中，静态变量不应作为同步对象。</li><li>值类型对象不能作为同步对象。</li><li>避免将字符串作为同步对象。</li><li>降低同步对象的可见性。</li></ol><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>接下来就探讨一下这五种情况。</p><p><strong>注意事项1：需要锁定的对象在多个线程中是可见的，而且是同一个对象。</strong></p><p>“可见的”这是显而易见的，如果对象不可见，就不能被锁定。</p><p>“同一个对象”，这也很容易理解，如果锁定的不是同一个对象，那又如何来同步两个对象呢？</p><p>虽然理解起来简单，但不见得我们在这上面就不会犯错误。</p><p>我们模拟一个必须使用到锁的场景：在遍历一个集合的过程中，同时在另外一个线程中删除集合中的某项。</p><p>下面这个例子中，如果没有 <code>lock</code> 语句，将会抛出异常<code>System.InvalidOperationException:“Collection was modified; enumeration operation may not execute.”</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AutoResetEvent autoResetEvent = <span class="keyword">new</span> AutoRe</span><br><span class="line"></span><br><span class="line">    List&lt;<span class="built_in">string</span>&gt; strings = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btn_StartThreads_Click</span>(<span class="params"><span class="built_in">object</span></span></span></span><br><span class="line"><span class="params"><span class="function">    &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">object</span> syncObj = <span class="keyword">new</span> <span class="built_in">object</span>(</span>)</span>;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//确保等待t2开始之后才运行下面的代码</span></span><br><span class="line">            autoResetEvent.WaitOne();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">lock</span> (syncObj)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> strings)</span><br><span class="line">                &#123;</span><br><span class="line">                    Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.IsBackground = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        t1.Start();</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            autoResetEvent.Set();</span><br><span class="line"></span><br><span class="line">            Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">lock</span> (syncObj)</span><br><span class="line">            &#123;</span><br><span class="line">                strings.RemoveAt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        t2.IsBackground = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        t2.Start();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子是 <code>Winform</code> 窗体应用程序，按钮的单击事件中演示该功能。对象 <code>syncObj</code> 对于线程 <code>t1</code> 和 <code>t2</code> 来说，在CLR中肯定是同一个对象。所以，上面的示例运行是没有问题的。</p><p>现在，我们将此示例重构。将实际的工作代码移到一个类型 <code>SampleClass</code> 中，该示例要在多个 <code>SampleClass</code> 实例间操作一个静态字段，如下所示：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span> : <span class="title">Form</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Form1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeComponent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btn_StartThreads_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        SampleClass sampleClass1 = <span class="keyword">new</span> SampleClass();</span><br><span class="line">        SampleClass sampleClass2 = <span class="keyword">new</span> SampleClass();</span><br><span class="line">        sampleClass1.StartT1();</span><br><span class="line">        sampleClass2.StartT2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SampleClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AutoResetEvent autoResetEvent = <span class="keyword">new</span> AutoResetEvent(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; strings = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;str1&quot;</span>, <span class="string">&quot;str2&quot;</span>, <span class="string">&quot;str3&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">object</span> syncObj = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartT1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//确保等待t2开始之后才运行下面的代码</span></span><br><span class="line">            autoResetEvent.WaitOne();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">lock</span> (syncObj)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> strings)</span><br><span class="line">                &#123;</span><br><span class="line">                    Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.IsBackground = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        t1.Start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartT2</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            autoResetEvent.Set();</span><br><span class="line"></span><br><span class="line">            Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">lock</span> (syncObj)</span><br><span class="line">            &#123;</span><br><span class="line">                strings.RemoveAt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        t2.IsBackground = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        t2.Start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该例子运行起来就会抛出异常<code>System.InvalidOperationException:“Collection was modified; enumeration operation may not execute.”</code></p><p>查看类型 <code>SampleClass</code> 的方法 <code>StartT1</code> 和 <code>StartT2</code> ,方法内部锁定的是 <code>SampleClass</code> 的实例变量 <code>syncObj</code> 。</p><p>实例变量意味着，每创建一个 <code>SampleClass</code> 的实例都会生成一个 <code>syncObj</code> 对象。</p><p>在本例中，调用者一共创建了两个 <code>SampleClass</code> 实例，继而分别调用：</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MediatR：轻松实现命令查询职责分离模式(CQRS)</title>
      <link href="/posts/fa354dcb.html"/>
      <url>/posts/fa354dcb.html</url>
      
        <content type="html"><![CDATA[<!-- *   [一对一](#%e4%b8%80%e5%af%b9%e4%b8%80)    *   [核心对象](#%e6%a0%b8%e5%bf%83%e5%af%b9%e8%b1%a1)    *   [代码展示](#%e4%bb%a3%e7%a0%81%e5%b1%95%e7%a4%ba)        *   [创建命令和处理者存放路径](#%e5%88%9b%e5%bb%ba%e5%91%bd%e4%bb%a4%e5%92%8c%e5%a4%84%e7%90%86%e8%80%85%e5%ad%98%e6%94%be%e8%b7%af%e5%be%84)        *   [创建命令](#%e5%88%9b%e5%bb%ba%e5%91%bd%e4%bb%a4)        *   [创建命令处理者](#%e5%88%9b%e5%bb%ba%e5%91%bd%e4%bb%a4%e5%a4%84%e7%90%86%e8%80%85)        *   [发送命令](#%e5%8f%91%e9%80%81%e5%91%bd%e4%bb%a4)        *   [运行代码](#%e8%bf%90%e8%a1%8c%e4%bb%a3%e7%a0%81)*   [一对多](#%e4%b8%80%e5%af%b9%e5%a4%9a)    *   [核心对象](#%e6%a0%b8%e5%bf%83%e5%af%b9%e8%b1%a1-1)    *   [代码实现](#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0)        *   [创建事件和事件处理者存放路径](#%e5%88%9b%e5%bb%ba%e4%ba%8b%e4%bb%b6%e5%92%8c%e4%ba%8b%e4%bb%b6%e5%a4%84%e7%90%86%e8%80%85%e5%ad%98%e6%94%be%e8%b7%af%e5%be%84)        *   [创建事件](#%e5%88%9b%e5%bb%ba%e4%ba%8b%e4%bb%b6)        *   [创建事件处理者](#%e5%88%9b%e5%bb%ba%e4%ba%8b%e4%bb%b6%e5%a4%84%e7%90%86%e8%80%85)        *   [修改`Program`](#%e4%bf%ae%e6%94%b9program)        *   [运行代码](#%e8%bf%90%e8%a1%8c%e4%bb%a3%e7%a0%81-1) --><h1 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h1><h2 id="核心对象"><a href="#核心对象" class="headerlink" title="核心对象"></a>核心对象</h2><ul><li><code>IMediator</code></li><li><code>IRequest</code> 、<code>IRequest&lt;T&gt;</code></li><li><code>IResuestHandler&lt;in TRequest,TResponse&gt;</code></li></ul><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><p>创建名字为<code>MediatorDemo</code>的<code>控制台应用</code>，通过<code>nuget</code>引入以下三个包：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MediatR  </span><br><span class="line">MediatR.Extensions.Microsoft.DependencyInjection  </span><br><span class="line">Microsoft.Extensions.DependencyInjection  </span><br></pre></td></tr></table></figure><h3 id="创建命令和处理者存放路径"><a href="#创建命令和处理者存放路径" class="headerlink" title="创建命令和处理者存放路径"></a>创建命令和处理者存放路径</h3><p>在根目录创建以下两个文件夹：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Commands  </span><br><span class="line">CommandHandlers  </span><br></pre></td></tr></table></figure><h3 id="创建命令"><a href="#创建命令" class="headerlink" title="创建命令"></a>创建命令</h3><p>在<code>Commands</code>文件夹中创建<code>MyCommand.cs</code>，内容如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> MediatR;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MediatorDemo.Commands</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDemoCommand</span>:<span class="title">IRequest</span>&lt;<span class="title">string</span>&gt;  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Data &#123; <span class="keyword">get</span>; &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyDemoCommand</span>(<span class="params"><span class="built_in">string</span> data</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            Data = data;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="创建命令处理者"><a href="#创建命令处理者" class="headerlink" title="创建命令处理者"></a>创建命令处理者</h3><p>在<code>CommandHandlers</code>文件夹中创建<code>MyDemoCommandHandler.cs</code>，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading;  </span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;  </span><br><span class="line"><span class="keyword">using</span> MediatorDemo.Commands;  </span><br><span class="line"><span class="keyword">using</span> MediatR;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MediatorDemo.CommandHandlers</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDemoCommandHandler</span>:<span class="title">IRequestHandler</span>&lt;<span class="title">MyDemoCommand</span>,<span class="title">string</span>&gt;  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>\&gt; Handle(MyDemoCommand request, CancellationToken cancellationToken)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">await</span> Task.CompletedTask;  </span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;Hello from MyDemoCommandHandler.Handler -&gt; command data = <span class="subst">&#123;request.Data&#125;</span>&quot;</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="发送命令"><a href="#发送命令" class="headerlink" title="发送命令"></a>发送命令</h3><p>修改<code>Program.cs</code>，具体内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;  </span><br><span class="line"><span class="keyword">using</span> MediatorDemo.CommandHandlers;  </span><br><span class="line"><span class="keyword">using</span> MediatR;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MediatorDemo</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>\[\] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">var</span> service = <span class="keyword">new</span> ServiceCollection();  </span><br><span class="line">            service.AddMediatR(<span class="keyword">typeof</span>(Program).Assembly);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> serviceProvider = service.BuildServiceProvider();  </span><br><span class="line">            <span class="keyword">var</span> mediator = serviceProvider.GetService&lt;IMediator&gt;();  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> rsp = <span class="keyword">await</span> mediator.Send(<span class="keyword">new</span> MyDemoCommand(<span class="string">&quot;This is my demo command&quot;</span>));  </span><br><span class="line">            Console.WriteLine(rsp);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>解释代码：</p><ul><li>通过<code>var service = new ServiceCollection();</code>创建服务容器</li><li><code>service.AddMediatR(typeof(Program).Assembly);</code>是想服务容器注册<code>MediatR</code>组件，同时指定<code>MediatR</code>扫描当前<code>Program</code>所在的程序集，获得当前程序集里的所有<code>Command</code>和<code>Handler</code>(通过接口约束)</li><li><code>var mediator = serviceProvider.GetService&lt;IMediator&gt;();</code>从服务容器中获取<code>mediator</code>对象</li><li><code>var rsp = await mediator.Send(new MyDemoCommand(&quot;This is my demo command&quot;));</code>发送一条<code>MyDemoCommand</code>命令</li></ul><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><p>运行代码之后可以看到控制台打印以下信息：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello <span class="keyword">from</span> MyDemoCommandHandler.Handler -&gt; command data = This <span class="keyword">is</span> my demo command  </span><br></pre></td></tr></table></figure><p>可以看到<code>Program</code>并没有直接去引用<code>MyDemoCommandHandler</code>这个类，只是向<code>MediatR</code>发送了一条指定的命令，<code>MediatR</code>框架会自动去查找该命令对应的<code>Handler</code>，调用<code>Handler</code>里的<code>Handle</code>方法</p><p><strong>注意：所谓一对一就是当你有对一个命令有多个<code>Handler</code>的时候，<code>MediatR</code>只会找到最后注册的那个来执行</strong></p><h1 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h1><h2 id="核心对象-1"><a href="#核心对象-1" class="headerlink" title="核心对象"></a>核心对象</h2><ul><li><code>IMediator</code></li><li><code>INotification</code></li><li><code>INotificationHandler&lt;in TNotification&gt;</code></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="创建事件和事件处理者存放路径"><a href="#创建事件和事件处理者存放路径" class="headerlink" title="创建事件和事件处理者存放路径"></a>创建事件和事件处理者存放路径</h3><p>在根目录创建以下两个文件夹：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Events  </span><br><span class="line">EventHandlers  </span><br></pre></td></tr></table></figure><h3 id="创建事件"><a href="#创建事件" class="headerlink" title="创建事件"></a>创建事件</h3><p>在<code>Events</code>文件夹中创建<code>MyDemoEvent.cs</code>，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> MediatR;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MediatorDemo.Events</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDemoEvent</span>:<span class="title">INotification</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> EventName &#123; <span class="keyword">get</span>; &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyDemoEvent</span>(<span class="params"><span class="built_in">string</span> eventName</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            EventName = eventName;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="创建事件处理者"><a href="#创建事件处理者" class="headerlink" title="创建事件处理者"></a>创建事件处理者</h3><p>在<code>EventHandlers</code>文件夹中创建<code>MyDemoEventHandler.cs</code>，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Threading;  </span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;  </span><br><span class="line"><span class="keyword">using</span> MediatorDemo.Events;  </span><br><span class="line"><span class="keyword">using</span> MediatR;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MediatorDemo.EventHandlers</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDemoEventHandler</span>:<span class="title">INotificationHandler</span>&lt;<span class="title">MyDemoEvent</span>&gt;  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Handle</span>(<span class="params">MyDemoEvent notification, CancellationToken cancellationToken</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">await</span> Task.CompletedTask;  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;MyDemoEventHandler.Handle执行:<span class="subst">&#123;notification.EventName&#125;</span>&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDemoEventHandlerV2</span> : <span class="title">INotificationHandler</span>&lt;<span class="title">MyDemoEvent</span>&gt;  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Handle</span>(<span class="params">MyDemoEvent notification, CancellationToken cancellationToken</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">await</span> Task.CompletedTask;  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;MyDemoEventHandlerV2.Handle执行:<span class="subst">&#123;notification.EventName&#125;</span>&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>这里是一个<code>cs</code>文件中写了两个<code>Handler</code></p><h3 id="修改Program"><a href="#修改Program" class="headerlink" title="修改Program"></a>修改<code>Program</code></h3><p>在原有的<code>Main</code>方法最后面添加以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> mediator.Publish(<span class="keyword">new</span> MyDemoEvent(<span class="string">&quot;MyEvent&quot;</span>));  </span><br></pre></td></tr></table></figure><h3 id="运行代码-1"><a href="#运行代码-1" class="headerlink" title="运行代码"></a>运行代码</h3><p>运行项目可以看到以下信息：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello <span class="keyword">from</span> MyDemoCommandHandler.Handler -&gt; command data = This <span class="keyword">is</span> my demo command  </span><br><span class="line">MyDemoEventHandler.Handle执行:MyEvent  </span><br><span class="line">MyDemoEventHandlerV2.Handle执行:MyEvent  </span><br></pre></td></tr></table></figure><p>其中后面两行分别为两个事件处理者打印出来的</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET Core </tag>
            
            <tag> CQRS </tag>
            
            <tag> MediatR </tag>
            
            <tag> DDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql、Sqlserver外键约束处理</title>
      <link href="/posts/dd1fe9af.html"/>
      <url>/posts/dd1fe9af.html</url>
      
        <content type="html"><![CDATA[<h1 id="外键约束处理"><a href="#外键约束处理" class="headerlink" title="外键约束处理"></a>外键约束处理</h1><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><h3 id="禁用MySQL数据库中的外键约束"><a href="#禁用MySQL数据库中的外键约束" class="headerlink" title="禁用MySQL数据库中的外键约束"></a>禁用MySQL数据库中的外键约束</h3><ol><li><p>使用ALTER TABLE命令: 可以使用ALTER TABLE命令来禁用或启用外键约束。例如，要禁用名为<code>fk_name</code>的外键约束，可以使用以下命令：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> table_name DISABLE KEYS;</span><br></pre></td></tr></table></figure><p> 要启用外键约束，可以使用以下命令：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> table_name ENABLE KEYS;</span><br></pre></td></tr></table></figure><p> 其中，<code>table_name</code>是要禁用或启用外键约束的表的名称。</p></li><li><p>使用SET命令 可以使用SET命令来禁用或启用外键约束。例如，要禁用外键约束，可以使用以下命令：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> foreign_key_checks <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p> 要启用外键约束，可以使用以下命令：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> foreign_key_checks <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p> 其中，<code>foreign_key_checks</code>是MySQL系统变量，用于控制外键约束的检查。</p></li></ol><h2 id="Sqlserver"><a href="#Sqlserver" class="headerlink" title="Sqlserver"></a>Sqlserver</h2><h3 id="禁用Sqlserver数据库中的外键约束"><a href="#禁用Sqlserver数据库中的外键约束" class="headerlink" title="禁用Sqlserver数据库中的外键约束&#96;"></a>禁用Sqlserver数据库中的外键约束&#96;</h3><ol><li><p>使用T-SQL命令: 可以使用T-SQL命令来禁用或启用所有表的外键约束。例如，要禁用所有表的外键约束，可以使用以下命令：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_msforeachtable &quot;ALTER TABLE ? NOCHECK CONSTRAINT all&quot;</span><br></pre></td></tr></table></figure></li><li><p>要启用所有表的外键约束，可以使用以下命令：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_msforeachtable &quot;ALTER TABLE ? WITH CHECK CHECK CONSTRAINT all&quot;</span><br></pre></td></tr></table></figure></li></ol><p>这将对数据库中的所有表执行禁用或启用外键约束的操作。</p>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle支持批量操作方案</title>
      <link href="/posts/83a5b10d.html"/>
      <url>/posts/83a5b10d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Oracle支持批量操作方案"><a href="#Oracle支持批量操作方案" class="headerlink" title="Oracle支持批量操作方案"></a>Oracle支持批量操作方案</h1><h3 id="方案管理"><a href="#方案管理" class="headerlink" title="方案管理"></a>方案管理</h3><h3 id="变更记录"><a href="#变更记录" class="headerlink" title="变更记录"></a>变更记录</h3><table><thead><tr><th>日期(Date)</th><th>作者(Author)</th><th>旧版本(Old Version)</th><th>新版本(New Version)</th><th>备注(Remarks)</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="审阅记录"><a href="#审阅记录" class="headerlink" title="审阅记录"></a>审阅记录</h3><table><thead><tr><th>日期(Date)</th><th>姓名(Name)</th><th>职务(Position)</th><th>版本(Version)</th><th>签字(Signature)</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="一、方案简介"><a href="#一、方案简介" class="headerlink" title="一、方案简介"></a>一、方案简介</h3><ul><li><strong>方案背景</strong><ul><li>目前项目版本为.NET5 ，没有适配的对应Oracle环境的批量插入的扩展，为了实现在项目中对oracle环境的批量操作的功能</li></ul></li></ul><h3 id="二、方案目标"><a href="#二、方案目标" class="headerlink" title="二、方案目标"></a>二、方案目标</h3><ul><li><strong>具体目标</strong><ul><li>实现在.NET5项目环境下对Oracle数据库进行批量插入修改删除操作</li></ul></li><li><strong>意义</strong><ul><li>提高项目在大数据进行功能操作时的性能</li></ul></li></ul><h3 id="三、准备工作"><a href="#三、准备工作" class="headerlink" title="三、准备工作"></a>三、准备工作</h3><ul><li>**时间：**2月7日 09:00</li><li><strong>参与人：</strong><ul><li>审核者与方案制定<ul><li>@** @**</li></ul></li><li>方案实施者<ul><li>@**</li></ul></li><li>方案验收者<ul><li>@** @**</li></ul></li></ul></li><li><strong>资料支持</strong><ul><li><strong>EFCore.BulkExtensions包</strong>支持.NET6版本源码<ul><li><a href="https://github.com/borisdj/EFCore.BulkExtensions"><strong>EFCore.BulkExtensions源码</strong></a></li></ul></li><li><strong>FreeSql中oracle批量插入的实现</strong><ul><li><a href="https://github.com/dotnetcore/FreeSql">源码地址</a></li><li><a href="https://www.cnblogs.com/FreeSql/p/11531300.html">文档地址</a></li></ul></li><li><strong>oracle的OracleBulkCopy使用</strong><ul><li><a href="https://www.bbsmax.com/A/RnJWK41EJq/">https://www.bbsmax.com/A/RnJWK41EJq/</a></li><li><a href="https://blog.csdn.net/baidu_27474941/article/details/71712295">https://blog.csdn.net/baidu_27474941/article/details/71712295</a></li></ul></li><li><strong>ORACLE的SQL语句</strong><ul><li>oracleSql中<code>merge</code>语法借助资料<ul><li><a href="https://blog.csdn.net/zorro_jin/article/details/81053693">资料链接</a></li></ul></li><li>oracleSql中临时表创建借助资料<ul><li><a href="https://www.cnblogs.com/jijm123/p/15499670.html">资料链接</a></li><li>创建临时表<ul><li><code>-复制现有表创建临时表CREATE GLOBAL TEMPORARY TABLE newTableName ON COMMIT PRESERVE ROWS AS SELECT* FROM existingTableName WHERE 1 = 2;</code></li></ul></li><li>有异常处理删除临时表<ul><li><code>BEGIN  EXECUTE IMMEDIATE &#39;TRUNCATE TABLE tableName&#39;;  EXECUTE IMMEDIATE &#39;DROP TABLE tableName PURGE&#39;;  EXCEPTION WHEN OTHERS THEN NULL;END;</code></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="四、计划安排"><a href="#四、计划安排" class="headerlink" title="四、计划安排"></a>四、计划安排</h3><ul><li>人天安排<ul><li>Oracle批量操作方案</li><li>**<code>EFCore.BulkExtensions</code>**开源库.Net6版本适配Oracle的操作</li><li>.NET6完成批量实现迁移到.NET5版本**<code>EFCore.BulkExtensions</code>**开源库及.NET5环境的适配<ul><li>Oracle、Mysql、PostgreSql</li></ul></li><li>发布批量操作的私有包</li><li>.NET5版本批量操作发出Nuget包，项目中使用发布的私有包进行测试<ul><li>Oracle、Mysql、PostgreSql</li></ul></li></ul></li></ul><h3 id="五、方案实施"><a href="#五、方案实施" class="headerlink" title="五、方案实施"></a>五、方案实施</h3><ul><li><strong>具体细节</strong><ul><li>分析**<code>EFCore.BulkExtensions</code>**开源库.Net6版本的<code>SqlServer</code>批量实现方式</li><li>通过.NET6版本SqlServer的实现完成对<code>Oracle</code>的批量实现方式</li><li>对在.NET6完成<code>ORACLE</code> 进行批量增删改实现</li><li>.NET6批量实现迁移到.NET5版本**<code>EFCore.BulkExtensions</code>**开源库的分支，做.NET5环境的适配<ul><li>Oracle、Mysql、PostgreSql 数据库的支持</li></ul></li><li>对迁移到.NET5版本的Oracle批量操作私有Nuget包。名称**<code>GCT.EFCore.BulkExtensions</code>**</li><li>在项目中使用发布的包进行测试</li></ul></li></ul><h3 id="六、风险评估"><a href="#六、风险评估" class="headerlink" title="六、风险评估"></a>六、风险评估</h3><ul><li><strong>可能会出现的难点</strong><ul><li>oracle的OracleBulkCopy使用方法</li><li>ORACLE的SQL语句不熟悉</li><li>.NET6环境迁移到.NET5环境会存在方法等多种不适配的问题<ul><li>Oracle</li><li>Postgresql</li><li>Mysql</li></ul></li></ul></li><li><strong>风险评估</strong></li></ul><h3 id="七、注意事项"><a href="#七、注意事项" class="headerlink" title="七、注意事项"></a>七、注意事项</h3><ul><li>.Net6**<code>EFCore.BulkExtensions</code>**开源库拥有PostgreSql和MySql的适配，需要迁移做.NET5的适配</li></ul><h3 id="八、验收标准"><a href="#八、验收标准" class="headerlink" title="八、验收标准"></a>八、验收标准</h3><ul><li>验收对象<ul><li>medpro产品组</li></ul></li><li>验收前提条件<ul><li>已发布私有包完成</li></ul></li><li>验收方法<ul><li>检验medpro产品使用到批量操作的事务操作</li></ul></li><li>验收标准<ul><li>事务操作成功</li></ul></li></ul><h3 id="九、补充方案（备用方案）"><a href="#九、补充方案（备用方案）" class="headerlink" title="九、补充方案（备用方案）"></a>九、补充方案（备用方案）</h3><ul><li>项目后续如果需要适配其他国内的数据库，基于**<code>EFCore.BulkExtensions</code>** 包耦合性深，进行扩展其他数据库会出现一些其他异常，是否考虑搭建公司内部私有数据库批量操作库？</li><li>通过现有开发完成的.NET5的oracle提交PR给官方开源库，后续使用开源包</li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker部署 gitlab Runner 运行</title>
      <link href="/posts/f950611a.html"/>
      <url>/posts/f950611a.html</url>
      
        <content type="html"><![CDATA[<h1 id="gitlabrunner"><a href="#gitlabrunner" class="headerlink" title="gitlabrunner"></a>gitlabrunner</h1><h2 id="gitlab-runner性能优化"><a href="#gitlab-runner性能优化" class="headerlink" title="gitlab runner性能优化"></a><strong>gitlab runner性能优化</strong></h2><h3 id="runner注册"><a href="#runner注册" class="headerlink" title="runner注册"></a><strong>runner注册</strong></h3><h3 id="创建变量"><a href="#创建变量" class="headerlink" title="创建变量"></a><strong>创建变量</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GitLabServer=<span class="string">&#x27;https://git\.gct\-china\.com/&#x27;</span> <span class="comment"># gitlab服务器地址</span></span><br><span class="line">GitLabToken=<span class="string">&#x27;xxxx&#x27;</span> <span class="comment"># gitlab 仓库地址token</span></span><br><span class="line">GitLabRunnerNamePrefix=<span class="string">&#x27;g&#x27;</span> <span class="comment"># gitlab runner 前缀</span></span><br><span class="line">GitLabRunnerTags=<span class="string">&#x27;gct-mooc-develop&#x27;</span> <span class="comment"># gitlab runner tags</span></span><br><span class="line">GitLabRunnerDesc=<span class="string">&#x27;gct-mooc-develop&#x27;</span> <span class="comment"># gitlab runner desc</span></span><br><span class="line">GitLabRunnerImg=<span class="string">&#x27;gitlab/gitlab-runner:v14.10.1&#x27;</span> <span class="comment"># gitlab runner img</span></span><br></pre></td></tr></table></figure><h3 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a><strong>创建数据卷</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create <span class="string">&quot;<span class="variable">$GitLabRunnerNamePrefix</span>-gitlab-runner-conf&quot;</span></span><br></pre></td></tr></table></figure><h3 id="创建runner"><a href="#创建runner" class="headerlink" title="创建runner"></a><strong>创建runner</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">--network</span> host <span class="literal">-d</span> <span class="literal">--restart</span> always \</span><br><span class="line"><span class="literal">-e</span> TZ=Asia/Beijing \</span><br><span class="line"><span class="literal">-v</span> /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line"><span class="literal">-v</span> <span class="string">&quot;<span class="variable">$GitLabRunnerNamePrefix</span>-gitlab-runner-conf&quot;</span>:/etc/gitlab<span class="literal">-runner</span> \</span><br><span class="line"><span class="literal">--name</span> <span class="string">&quot;<span class="variable">$GitLabRunnerNamePrefix</span>-gitlab-runner&quot;</span> <span class="variable">$GitLabRunnerImg</span></span><br></pre></td></tr></table></figure><h3 id="注册runner"><a href="#注册runner" class="headerlink" title="注册runner"></a><strong>注册runner</strong></h3><blockquote><p><a href="https://docs.gitlab.com/runner/examples/gitlab.html">https://docs.gitlab.com/runner/examples/gitlab.html</a></p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">--rm</span> \</span><br><span class="line"><span class="literal">-v</span> <span class="string">&quot;<span class="variable">$GitLabRunnerNamePrefix</span>-gitlab-runner-conf&quot;</span>:/etc/gitlab<span class="literal">-runner</span> \</span><br><span class="line"><span class="literal">-v</span> /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line"><span class="literal">--name</span> <span class="string">&quot;<span class="variable">$GitLabRunnerNamePrefix</span>-gitlab-runner-register&quot;</span> <span class="variable">$GitLabRunnerImg</span> register \</span><br><span class="line"><span class="literal">--url</span> <span class="string">&quot;<span class="variable">$GitLabServer</span>&quot;</span> \</span><br><span class="line"><span class="literal">--registration-token</span> <span class="string">&quot;<span class="variable">$GitLabToken</span>&quot;</span> \</span><br><span class="line"><span class="literal">--description</span> <span class="string">&quot;<span class="variable">$GitLabRunnerDesc</span>&quot;</span> \</span><br><span class="line"><span class="literal">--tag-list</span> <span class="string">&quot;<span class="variable">$GitLabRunnerTags</span>&quot;</span> \</span><br><span class="line"><span class="literal">--non-interactive</span> \</span><br><span class="line"><span class="literal">--executor</span> <span class="string">&quot;docker&quot;</span> \</span><br><span class="line"><span class="literal">--docker-image</span> docker:<span class="number">19.03</span>.<span class="number">12</span> \</span><br><span class="line"><span class="literal">--docker-privileged</span>=<span class="string">&quot;true&quot;</span> \</span><br><span class="line"><span class="literal">--docker-volumes</span> <span class="string">&quot;/certs/client&quot;</span> \</span><br><span class="line"><span class="literal">--run-untagged</span>=<span class="string">&quot;true&quot;</span> \</span><br><span class="line"><span class="literal">--locked</span>=<span class="string">&quot;false&quot;</span> \</span><br><span class="line"><span class="literal">--access-level</span>=<span class="string">&quot;not_protected&quot;</span> \</span><br><span class="line"><span class="literal">--docker-volumes</span> /var/run/docker.sock:/var/run/docker.sock</span><br></pre></td></tr></table></figure><h3 id="删除runner"><a href="#删除runner" class="headerlink" title="删除runner"></a><strong>删除runner</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop <span class="string">&quot;<span class="variable">$GitLabRunnerNamePrefix</span>-gitlab-runner&quot;</span></span><br><span class="line">docker <span class="built_in">rm</span> <span class="string">&quot;<span class="variable">$GitLabRunnerNamePrefix</span>-gitlab-runner&quot;</span></span><br><span class="line">docker volume <span class="built_in">rm</span> <span class="string">&quot;<span class="variable">$GitLabRunnerNamePrefix</span>-gitlab-runner-conf&quot;</span></span><br></pre></td></tr></table></figure><h2 id="runner清理"><a href="#runner清理" class="headerlink" title="runner清理"></a><strong>runner清理</strong></h2><h3 id="删除玄虚镜像"><a href="#删除玄虚镜像" class="headerlink" title="删除玄虚镜像"></a><strong>删除玄虚镜像</strong></h3><p>玄虚镜像是未标记且未被任何容器使用的镜像。 <code>-a</code> 未使用的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image prune -a</span><br></pre></td></tr></table></figure><blockquote><p>运行此命令时要小心。如果你构建的图像没有标签，它将被删除。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令备忘</title>
      <link href="/posts/c31982f9.html"/>
      <url>/posts/c31982f9.html</url>
      
        <content type="html"><![CDATA[<h1 id="本地仓库版本切换"><a href="#本地仓库版本切换" class="headerlink" title="本地仓库版本切换"></a>本地仓库版本切换</h1><ul><li>查询当前本版以前的所有提交记录：<code>git log --pretty=o</code></li></ul><span id="more"></span><h1 id="本地仓库版本切换-1"><a href="#本地仓库版本切换-1" class="headerlink" title="本地仓库版本切换"></a>本地仓库版本切换</h1><ul><li>查询当前本版以前的所有提交记录：<code>git log --pretty=oneline</code></li><li>查询所有版本记录：<code>git reflog</code></li><li>代码切换到指定目录：<code>git reset --hard 版本号</code></li></ul><h1 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h1><ul><li>推送本地仓库代码到远程仓库：<code>git push</code></li><li>拉取远程仓库代码：<code>git pull</code></li></ul><h1 id="分支常用命令"><a href="#分支常用命令" class="headerlink" title="分支常用命令"></a>分支常用命令</h1><ul><li>查看分支：<code>git branch</code></li><li>创建分支：<code>git branch 分支名</code></li><li>切换分支：<code>git checkout 分支名</code></li><li>创建再切换到新建的分支：<code>git checkout -b 分支名</code></li><li>删除分支：<code>git branch -d 分支名</code> <strong>不能删除当前正在使用的分支</strong></li><li>合并分支：<code>git merge 被合并的分支名</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发方案模版</title>
      <link href="/posts/33155a9.html"/>
      <url>/posts/33155a9.html</url>
      
        <content type="html"><![CDATA[<h1 id="开发方案模版"><a href="#开发方案模版" class="headerlink" title="开发方案模版"></a>开发方案模版</h1><h3 id="方案管理"><a href="#方案管理" class="headerlink" title="方案管理"></a>方案管理</h3><h3 id="变更记录"><a href="#变更记录" class="headerlink" title="变更记录"></a>变更记录</h3><table><thead><tr><th>日期(Date)</th><th>作者(Author)</th><th>旧版本(Old Version)</th><th>新版本(New Version)</th><th>备注(Remarks)</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="审阅记录"><a href="#审阅记录" class="headerlink" title="审阅记录"></a>审阅记录</h3><table><thead><tr><th>日期(Date)</th><th>姓名(Name)</th><th>职务(Position)</th><th>版本(Version)</th><th>签字(Signature)</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="一、方案简介"><a href="#一、方案简介" class="headerlink" title="一、方案简介"></a>一、方案简介</h3><ul><li>方案背景</li><li>现状分析</li></ul><h3 id="二、方案目标"><a href="#二、方案目标" class="headerlink" title="二、方案目标"></a>二、方案目标</h3><ul><li>具体目标</li><li>要达到什么效果</li><li>意义</li></ul><h3 id="三、准备工作"><a href="#三、准备工作" class="headerlink" title="三、准备工作"></a>三、准备工作</h3><ul><li>时间：方案实施时间</li><li>参与人：<ul><li>方案制定与审核者</li><li>方案实施者</li><li>方案验收者</li></ul></li><li><h2 id="前期具备条件-现有技术条件-参考方案"><a href="#前期具备条件-现有技术条件-参考方案" class="headerlink" title="前期具备条件  - 现有技术条件  - 参考方案"></a>前期具备条件<br>  - 现有技术条件<br>  - 参考方案</h2></li></ul><h3 id="四、计划安排"><a href="#四、计划安排" class="headerlink" title="四、计划安排"></a>四、计划安排</h3><ul><li>人天安排</li></ul><h3 id="五、方案实施"><a href="#五、方案实施" class="headerlink" title="五、方案实施"></a>五、方案实施</h3><ul><li>具体细节<ul><li>方案如何实现的具体说明</li></ul></li><li>分工<ul><li>前端</li><li>后端</li></ul></li></ul><h3 id="六、风险评估"><a href="#六、风险评估" class="headerlink" title="六、风险评估"></a>六、风险评估</h3><ul><li>可能会出现的难点</li><li>风险评估</li></ul><h3 id="七、注意事项"><a href="#七、注意事项" class="headerlink" title="七、注意事项"></a>七、注意事项</h3><ul><li>可与风险评估合并</li></ul><h3 id="八、验收标准"><a href="#八、验收标准" class="headerlink" title="八、验收标准"></a>八、验收标准</h3><ul><li>验收对象</li><li>验收前提条件</li><li>验收方法</li><li>验收标准</li></ul><h3 id="九、补充方案（备用方案）"><a href="#九、补充方案（备用方案）" class="headerlink" title="九、补充方案（备用方案）"></a>九、补充方案（备用方案）</h3>]]></content>
      
      
      <categories>
          
          <category> 开发方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务</title>
      <link href="/posts/93ac284c.html"/>
      <url>/posts/93ac284c.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><!-- - [概念](#概念)  - [定义](#定义)  - [组成](#组成)  - [目的](#目的)- [特性](#特性)  - [原子性(Actomicity)](#原子性actomicity)  - [一致性(Consistency)](#一致性consistency)  - [隔离性(Isolation)](#隔离性isolation)  - [持久性(Durability)](#持久性durability)- [事务隔离](#事务隔离)  - [事务并发导致的异常](#事务并发导致的异常)    - [回滚丢失(Update Lost)](#回滚丢失update-lost)    - [覆盖丢失(Second Uupdate Lost)](#覆盖丢失second-uupdate-lost)    - [脏读](#脏读)    - [不可重复读](#不可重复读)    - [幻读](#幻读)  - [事务隔离级别](#事务隔离级别)    - [读未提交](#读未提交)    - [读已提交](#读已提交)    - [可重复读](#可重复读)    - [串行化](#串行化)  - [事务隔离级别与并发异常](#事务隔离级别与并发异常)- [MySql操作](#mysql操作)  - [常用命令](#常用命令) --><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>数据库事务</strong>是<strong>访问</strong>并可能<strong>更新</strong>数据库中各种<strong>数据项</strong>的一个<strong>程序执行单元(unit)</strong></p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>一个数据库事务通常包含对数据库进行<strong>读</strong>或<strong>写</strong>的一个<strong>操作序列</strong></p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ol><li>为数据库操作提供了一个<strong>从失败中恢复到正常状态的方法</strong>，同时提供了数据库即使在<strong>异常状态下仍能保持一致性的方法</strong></li><li>当多个应用程序在并发访问数据库时，可以在这些<strong>应用程序之间提供一个隔离方法，以防止</strong>彼此的<strong>操作相互干扰</strong></li></ol><p><strong>总结：事务的目的就是要提供3种方法：1.失败恢复方法，2.保持一致性的方法，3.操作隔离的方法</strong></p><ul><li>成功情况下<ul><li>能将数据从一种状态变为另一种状态，并能够持久化</li></ul></li><li>异常情况下<ul><li>能将数据恢复到正常状态</li><li>要能保证一致性，包含数据的一致性和约束的一致性</li></ul></li><li>并发情况下<ul><li>并发的操作之间不能产生相互影响</li></ul></li></ul><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><h2 id="原子性-Actomicity"><a href="#原子性-Actomicity" class="headerlink" title="原子性(Actomicity)"></a>原子性(Actomicity)</h2><p>事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行</p><h2 id="一致性-Consistency"><a href="#一致性-Consistency" class="headerlink" title="一致性(Consistency)"></a>一致性(Consistency)</h2><p>事务应确保数据库的状态从一个一致状态转变为另一个一致状态，一致状态的含义时数据库中数据应满足完整性约束</p><h2 id="隔离性-Isolation"><a href="#隔离性-Isolation" class="headerlink" title="隔离性(Isolation)"></a>隔离性(Isolation)</h2><p>多个事务并发执行时，一个事务的执行不应影响其他事务的执行</p><h2 id="持久性-Durability"><a href="#持久性-Durability" class="headerlink" title="持久性(Durability)"></a>持久性(Durability)</h2><p>一个事务一旦提交，他对数据库的修改应该永久保存在数据库中</p><h1 id="事务隔离"><a href="#事务隔离" class="headerlink" title="事务隔离"></a>事务隔离</h1><h2 id="事务并发导致的异常"><a href="#事务并发导致的异常" class="headerlink" title="事务并发导致的异常"></a>事务并发导致的异常</h2><h3 id="回滚丢失-Update-Lost"><a href="#回滚丢失-Update-Lost" class="headerlink" title="回滚丢失(Update Lost)"></a>回滚丢失(Update Lost)</h3><p>第一类更新丢失，此种更新丢失时因为回滚的原因，所以也叫回滚丢失  </p><table><thead><tr><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>查询数据得到初始值10</td><td>查询数据得到初始值提交</td></tr><tr><td>更新为10+1&#x3D;11</td><td>更新为10+2&#x3D;12</td></tr><tr><td>提交</td><td>失败回滚</td></tr><tr><td></td><td>数据回到初始状态10，导致事务A的更新丢失了，由于回滚导致丢失，所以也叫回滚丢失</td></tr></tbody></table><h3 id="覆盖丢失-Second-Uupdate-Lost"><a href="#覆盖丢失-Second-Uupdate-Lost" class="headerlink" title="覆盖丢失(Second Uupdate Lost)"></a>覆盖丢失(Second Uupdate Lost)</h3><p>第二类更新丢失，此种更新丢失时因为更新被其他事务给覆盖了，也可以叫覆盖丢失  </p><table><thead><tr><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>查询数据得到初始值10</td><td>查询数据得到初始值10</td></tr><tr><td>更新为10+1&#x3D;11</td><td>更新为10+2&#x3D;12</td></tr><tr><td>提交</td><td>提交</td></tr><tr><td></td><td>最终结果变为12，由于事务B是从10开始计算，并不知道数据已经发生了变化，所以导致事务A的更新结果被覆盖了，所以也叫覆盖更新</td></tr></tbody></table><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>此种异常是因为一个事务读取了另一个事务修改了但是未提交的数据  </p><table><thead><tr><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>查询数据得到初始值10</td><td></td></tr><tr><td>更新为10+1&#x3D;11</td><td>查询数据得到数据11</td></tr><tr><td></td><td>更新数据11+1&#x3D;12</td></tr><tr><td>回滚</td><td>提交</td></tr><tr><td></td><td>数据最终变为12，由于读到的数据11被回滚了，结果是错误的，读取到了脏数据</td></tr></tbody></table><h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><p>这种异常时一个事务对同一行数据执行了两次或更多次查询，但是却得到了不同的结果  </p><table><thead><tr><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>查询数据得到初始值10</td><td>查询数据得到初始值10</td></tr><tr><td>更新为10+1&#x3D;11</td><td>再次读取数据得到11</td></tr><tr><td></td><td>在一个事务内两次对统一数据查询，得到的结果是不同的，因此叫做不可重复读</td></tr></tbody></table><h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><p>幻读和不可重复读有点像，只是针对的不是数据的值而是数据的数量  </p><table><thead><tr><th>事务A</th><th>事务B</th></tr></thead><tbody><tr><td>查询数据有10条</td><td></td></tr><tr><td>更新全部数据</td><td>插入一条数据</td></tr><tr><td>查询结果发现有一条没备更新，比原来多了一条</td><td></td></tr><tr><td>仿佛全表更新语句不正常，自己出现了幻觉，因此叫幻读</td><td></td></tr></tbody></table><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p><strong>由低到高</strong>分成以下级别：</p><h3 id="读未提交"><a href="#读未提交" class="headerlink" title="读未提交"></a>读未提交</h3><p>该隔离级别指即使一个事务的更新语句未提交，但是别的事务可以读到这个改变</p><h3 id="读已提交"><a href="#读已提交" class="headerlink" title="读已提交"></a>读已提交</h3><p>该隔离级别指一个事务只能看到其他事务的已经提交的更新，看不到未提交的更新，消除了脏读和回滚丢失(第一类更新丢失)，这时大多数数据库的默认隔离级别，如Oracle、SqlServer</p><h3 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h3><p>该隔离级别指一个事务中进行两次或多次同样的对数据库内容的查询，得到的结果是一样的，但是不保证对数据条数的查询是一样的，指要存在读改行数据就禁止写，消除了不可重复读和覆盖丢失(第二类更新丢失)，这是MySql数据库的默认隔离级别</p><h3 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h3><p>事务执行的时候不允许别的事务并行执行，完全串行化的读，指要存在读就禁止写，但是可以同时读，消除了幻读。这是事务隔离的最高级别，虽然最安全最省心，但是效率太低，一般不会用</p><h2 id="事务隔离级别与并发异常"><a href="#事务隔离级别与并发异常" class="headerlink" title="事务隔离级别与并发异常"></a>事务隔离级别与并发异常</h2><p>各种隔离级别解决哪些并发异常  </p><table><thead><tr><th>隔离级别并发异常</th><th>回滚丢失</th><th>覆盖丢失</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交</td><td>×</td><td>×</td><td>×</td><td>×</td><td>×</td></tr><tr><td>读已提交</td><td>√</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>可重复读</td><td>√</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>串行化</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><h1 id="MySql操作"><a href="#MySql操作" class="headerlink" title="MySql操作"></a>MySql操作</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li><p>查询当前数据库版本</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">select</span> <span class="title">version</span>()</span>;  </span><br></pre></td></tr></table></figure></li><li><p>查看当前会话事务隔离级别</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@session.tx_isolation;  </span><br></pre></td></tr></table></figure></li><li><p>查询全局事务隔离级别</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@global.tx_isolation;  </span><br></pre></td></tr></table></figure></li><li><p>修改隔离级别(以当前会话为例)：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> @@session.tx_isolation=<span class="string">&#x27;会话级别&#x27;</span>   </span><br><span class="line">\--会话级别可选值：  </span><br><span class="line"> READ-UNCOMMITTED 读未提交  </span><br><span class="line"> READ-COMMITTED 读已提交  </span><br><span class="line"> REPEATABLE-READ 可重复读  </span><br><span class="line"> SERIALIZABLE 串行化  </span><br></pre></td></tr></table></figure></li><li><p>开启事务</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start transaction;  </span><br></pre></td></tr></table></figure></li><li><p>提交事务</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit  </span><br></pre></td></tr></table></figure></li><li><p>回滚</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollback</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis企业级解决方案</title>
      <link href="/posts/7f6af2c0.html"/>
      <url>/posts/7f6af2c0.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><!-- - [缓存预热](#缓存预热)  - [现象](#现象)  - [问题排查](#问题排查)  - [解决方案](#解决方案)    - [前置准备工作](#前置准备工作)    - [准备工作](#准备工作)    - [实施](#实施)- [缓存雪崩](#缓存雪崩)  - [现象](#现象-1)  - [问题排查](#问题排查-1)  - [解决方案（道）](#解决方案道)  - [解决方案（术）](#解决方案术)  - [总结](#总结)- [缓存击穿](#缓存击穿)  - [现象](#现象-2)  - [问题排查](#问题排查-2)  - [问题分析](#问题分析)  - [解决方案（术）](#解决方案术-1)  - [总结](#总结-1)- [缓存穿透](#缓存穿透)  - [现象](#现象-3)  - [问题排查](#问题排查-3)  - [问题分析](#问题分析-1)  - [解决方案（术）](#解决方案术-2)  - [总结](#总结-2)- [性能指标监控](#性能指标监控)  - [性能指标：Performance](#性能指标performance)  - [内存指标：Memory](#内存指标memory)  - [基本活动指标：Basic activity](#基本活动指标basic-activity)  - [持久性指标：Persistence](#持久性指标persistence)  - [错误指标：Error](#错误指标error)- [监控方式](#监控方式)  - [工具](#工具)  - [命令](#命令) --><h1 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h1><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>宕机：服务器启动之后迅速宕机</p><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><pre><code>1.  请求数量较高2.  主从之间数据吞吐量较大，数据同步操作频度较高</code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="前置准备工作"><a href="#前置准备工作" class="headerlink" title="前置准备工作"></a>前置准备工作</h3><pre><code>1.  日常理性统计数据访问记录，统计访问频度较高的热点数据2.  利用LRU数据删除策略，构建数据留存队列3.  例如：storm与kafka配合    </code></pre><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><pre><code>1.  将统计结果中的数据分类，根据级别，redis有限加载级别较高的热点数据2.  利用分布式多服务器同时进行数据读取，提速数据加载过程</code></pre><h3 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h3><pre><code>1.  使用脚本程序固定触发数据预热过程2.  如果有条件，使用CDN，效果会更好</code></pre><h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><h2 id="现象-1"><a href="#现象-1" class="headerlink" title="现象"></a>现象</h2><pre><code>1.  系统平稳运行过程中，忽然数据库连接量激增2.  应用服务器无法及时处理请求3.  大量408、500错误4.  客户反复刷新页面获取数据5.  数据库崩溃6.  应用服务器崩溃7.  重启应用服务器无效8.  Redis服务器崩溃9.  Redis集群崩溃10.  重启数据库后再次被瞬间流量放倒</code></pre><h2 id="问题排查-1"><a href="#问题排查-1" class="headerlink" title="问题排查"></a>问题排查</h2><pre><code>1.   在一个**较短**的时间内，缓存中**较多**的key**集中过期**2.   此周期内请求访问过期的数据，redis未命中，redis向数据库获取数据3.   数据库同时接收到大量的请求无法及时处理4.   Redis大量请求被积压，开始出现超时现象5.   数据库流量激增，数据库崩溃6.   重启后仍然面对缓存中无数据可用7.   Redis服务器资源被严重占用，Redis服务器崩溃8.   Redis集群呈现崩塌，集群瓦解9.   应用服务器无法即使得到数据响应请求，来自客户端的请求数量越来越多，应用服务器崩溃10.  应用服务器、Redis、数据库全部重启，效果不理想</code></pre><h2 id="解决方案（道）"><a href="#解决方案（道）" class="headerlink" title="解决方案（道）"></a>解决方案（道）</h2><pre><code>1.   更多的页面静态化处理2.   构建多级缓存架构：nginx缓存+redis缓存+ehcache缓存3.   检测MySql严重耗时业务进行优化，对数据库的瓶颈排查，例如超时查询、耗时较高事务等4.   灾难预警机制，监控redis服务器性能指标：    1.  CPU占用、CPU使用率    2.  内存容量    3.  查询平均响应时间    4.  线程数5.   限流、降级：短时间范围内牺牲一些客户体验，限制一部分请求访问，降低应用服务器压力，待业务低速运转后再逐步放开访问</code></pre><h2 id="解决方案（术）"><a href="#解决方案（术）" class="headerlink" title="解决方案（术）"></a>解决方案（术）</h2><pre><code>1.   LRU与LFU切换2.   数据有效期策略调整    1.  根据业务数据有效期进行分类错峰，A类90分钟、B类80分钟、C类70分钟    2.  过期时间使用固定时间+随机值的形式，稀释集中到期的key的数量3.   超热数据使用永久key4.   定期维护（自动+人工）：对即将过期数据做访问量分析，确认是否延时，配合访问量统计，做热点数据的延时5.   加锁：慎用！！！</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre><code>缓存雪崩就是顺接过期数据量太大，导致对数据库服务器造成压力，如果能够避免过期时间集中，可以有效解决雪崩现象的出现(40%)，配合其他策略一起使用，并监控服务器的运行数据，根据运行记录做快速调整</code></pre><h1 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h1><h2 id="现象-2"><a href="#现象-2" class="headerlink" title="现象"></a>现象</h2><pre><code>1.  系统平稳运行过程中2.  数据库连接量瞬间激增3.  Redis服务器无大量key过期4.  Redis内存平稳，无波动5.  Redis服务器CPU正常6.  数据库崩溃</code></pre><h2 id="问题排查-2"><a href="#问题排查-2" class="headerlink" title="问题排查"></a>问题排查</h2><pre><code>1.  Redis中某个key过期，该key访问量巨大2.  多个数据请求从服务器直接压倒Redis后，均为命中3.  Redis在短时间内发起了大量对数据库中同一数据的访问</code></pre><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><pre><code>1.   单个key高热数据2.   key过期</code></pre><h2 id="解决方案（术）-1"><a href="#解决方案（术）-1" class="headerlink" title="解决方案（术）"></a>解决方案（术）</h2><pre><code>1.   预先设定：以电商为例，每个商家根据店铺等级，指定若干款主打商品，在购物节期间，加大此类信息key的过期时长。注意：购物街不仅仅指当天，以及后续若干天，访问峰值呈现逐渐降低的去式2.   现场调整：监控访问量，对自然流量激增的数据演唱过期时间或设置未永久性key3.   后台刷新数据：启动定时任务，高峰期来临之前，刷新数据有效期，确保不丢失4.   二级缓存：设置不同的过期时间，保障不会被**同时**淘汰就行5.   枷锁：分布式锁，防止被击穿，但是要注意也是性能瓶颈，慎用！！！</code></pre><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><pre><code>缓存击穿就是单个高热数据过期的瞬间，数据量访问较大，未命中Redis后，发起了大量对统一数据的数据库访问，导致对数据库服务器造成压力。应对策略应该是在业务数据分析与预防方面进行，配合运行监控测试与即时调整策略，毕竟单个key的过期监控难度较高，配合雪崩处理策略即可。</code></pre><h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><h2 id="现象-3"><a href="#现象-3" class="headerlink" title="现象"></a>现象</h2><pre><code>1.  系统平稳运行过程中2.  应用服务器流量随时间增量较大3.  Redis服务器命中率随时间逐步降低4.  Redis内存平稳，内存无压力5.  Redis服务器CPU占用激增6.  数据库服务器压力激增7.  数据库崩溃</code></pre><h2 id="问题排查-3"><a href="#问题排查-3" class="headerlink" title="问题排查"></a>问题排查</h2><pre><code>1.  Redis中大面积出现未命中2.  出现非正常URL访问</code></pre><h2 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h2><pre><code>1.  获取的数据在数据库中也不存在，数据库查询未得到对应数据2.  Redis获得到null数据未进行持久化，直接返回3.  下次此类数据达到重复上述过程4.  出现黑客攻击服务器</code></pre><h2 id="解决方案（术）-2"><a href="#解决方案（术）-2" class="headerlink" title="解决方案（术）"></a>解决方案（术）</h2><pre><code>1.  缓存null：对查询结果为null的数据进行缓存（长期使用，定期清理），设定短时限，例如30~60秒，最高5分钟2.  白名单策略    1.  提前预热各种分类数据id对应的bitmaps，id作为bitmap的offset，相当于设置了数据白名单，当加载正常数据时，放行，加载异常数据时直接拦截（效率偏低）    2.  使用布隆过滤器（有关布隆过滤器的命中问题对当前状态可以忽略）3.  实时监控：实时监控Redis命中率（业务正常范围时，通常会有一个波动值）与null数据的占比    1.  非活动时段波动：通常检测3~5倍，超过5倍纳入重点排查对象    2.  活动时段波动：通常检测10~50倍，超过50倍纳入重点排查对象    3.  根据倍数不同，启动不同的排查流程。然后使用黑名单进行防控4.  key加密：问题出现后，临时启动防灾业务key，对key进行业务层传输加密服务，设定校验程序，过来的key校验    1.  例如每天随机分配60个加密串，挑选2~3个，混淆到页面数据id中，发现访问key不满足规则，驳回数据访问</code></pre><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><pre><code>缓存击穿访问了不存在的数据，跳过了合法数据的Redis数据缓存阶段，每次访问数据库，导致对数据库服务器造成压力，通常此类数据的出现量是一个较低的值，当出现此类情况以毒攻毒，并及时**报警**，应对策略应该在临时预案方面多做文章无论时黑名单还是白名单，都是对整体系统的压力，警报解除后尽快移除</code></pre><h1 id="性能指标监控"><a href="#性能指标监控" class="headerlink" title="性能指标监控"></a>性能指标监控</h1><h2 id="性能指标：Performance"><a href="#性能指标：Performance" class="headerlink" title="性能指标：Performance"></a>性能指标：Performance</h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>latency</td><td>Redis平均响应一个请求的时间</td></tr><tr><td>instantaneous_ops_per_sec</td><td>平均每秒处理请求总数（QPS）</td></tr><tr><td>hit rate(calculated)</td><td>缓存命中率(计算出来的)</td></tr></tbody></table><h2 id="内存指标：Memory"><a href="#内存指标：Memory" class="headerlink" title="内存指标：Memory"></a>内存指标：Memory</h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>used_memory</td><td>已使用内存</td></tr><tr><td>mem_fragmentation_ratio</td><td>内存碎片率</td></tr><tr><td>evicted_key</td><td>由于最大内存限制被移除的key的数量</td></tr><tr><td>block_clients</td><td>由于BLPOP、BRPOP、BRPOPLPUSH而被阻塞的客户端</td></tr></tbody></table><h2 id="基本活动指标：Basic-activity"><a href="#基本活动指标：Basic-activity" class="headerlink" title="基本活动指标：Basic activity"></a>基本活动指标：Basic activity</h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>connected_clients</td><td>客户端连接数</td></tr><tr><td>connected_slaves</td><td>slave数量</td></tr><tr><td>master_last_io_seconds_ago</td><td>最近一次主从交互之后的秒数</td></tr><tr><td>keyspace</td><td>数据库中的key值总数</td></tr></tbody></table><h2 id="持久性指标：Persistence"><a href="#持久性指标：Persistence" class="headerlink" title="持久性指标：Persistence"></a>持久性指标：Persistence</h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>rdb_last_save_time</td><td>最后一次持久化保存到磁盘的时间戳</td></tr><tr><td>rdb_changes_since_last_save</td><td>自最后一次持久化以来数据库的更改数</td></tr></tbody></table><h2 id="错误指标：Error"><a href="#错误指标：Error" class="headerlink" title="错误指标：Error"></a>错误指标：Error</h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>rejected_connections</td><td>由于达到maxclient限制而被拒绝的连接数</td></tr><tr><td>keyspace_misses</td><td>key值查找失败（没有命中）次数</td></tr><tr><td>master_link_down_since_seconds</td><td>主从断开的持续时间（以秒为单位）</td></tr></tbody></table><h1 id="监控方式"><a href="#监控方式" class="headerlink" title="监控方式"></a>监控方式</h1><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><pre><code>*   Cloud Insight Redis*   Prometheus*   Redis-stat*   Redis-faina*   RedisLive*   zabbix</code></pre><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><pre><code>*   benchmark    *   `redis-benchmark`：50个连接，10000次请求对应的性能    *   `redis-benchmark -c 100 -n 5000`：100个连接，5000次请求对应的性能*   redis-cli    *   monitor    *   slowlog        *   `slowlog get`：获取慢查询日志        *   `slowlog len`：获取慢查询日志条目数        *   `slowlog reset`：重置慢查询日志        *   相关配置：            *   `slow-log-slower-than 1000`：设置慢查询的时间下限，单位：毫秒            *   `slowlog-max-len 100`：设置慢查询命令对应的日志显示长度，单位：命令数</code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis集群</title>
      <link href="/posts/37cf2cfd.html"/>
      <url>/posts/37cf2cfd.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><!-- - [主从复制](#主从复制)  - [简介](#简介)    - [单机Redis的风险与问题](#单机redis的风险与问题)    - [解决方案](#解决方案)    - [解析](#解析)    - [主从复制的作用](#主从复制的作用)  - [工作流程](#工作流程)    - [建立连接阶段](#建立连接阶段)    - [连接阶段(slave连master)](#连接阶段slave连master)    - [授权阶段(master没密码可省略)](#授权阶段master没密码可省略)    - [数据同步阶段](#数据同步阶段)      - [同步阶段master说明](#同步阶段master说明)      - [同步阶段slave说明](#同步阶段slave说明)    - [命令传播阶段](#命令传播阶段)    - [命令传播阶段的部分复制](#命令传播阶段的部分复制)    - [数据同步+命令传播阶段工作流程](#数据同步命令传播阶段工作流程)    - [心跳机制](#心跳机制)      - [master心跳任务](#master心跳任务)      - [心跳阶段注意事项](#心跳阶段注意事项)  - [主从复制的完整工作流程图](#主从复制的完整工作流程图)  - [常见问题](#常见问题)    - [频繁的全量复制(1)](#频繁的全量复制1)    - [频繁的全量复制(2)](#频繁的全量复制2)    - [频繁的网络中断(1)](#频繁的网络中断1)    - [频繁的网络中断(2)](#频繁的网络中断2)    - [数据不一致](#数据不一致)- [哨兵模式](#哨兵模式)  - [哨兵](#哨兵)  - [启动哨兵](#启动哨兵)  - [sentinel.conf](#sentinelconf)  - [工作原理](#工作原理)    - [监控](#监控)    - [通知](#通知)    - [故障转移](#故障转移)- [集群](#集群)  - [现状问题](#现状问题)  - [集群架构](#集群架构)  - [集群的数据存储](#集群的数据存储)  - [集群的内部通讯设计](#集群的内部通讯设计)  - [集群搭建](#集群搭建)  - [Cluster节点操作命令](#cluster节点操作命令) --><h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>互联网”三高”架构：高并发、高性能、高可用</p><p>_高可用：业界可用性目标5个9，即*_99.999%**，即全年服务器宕机时长低于315秒，**约5.25分钟***</p><h3 id="单机Redis的风险与问题"><a href="#单机Redis的风险与问题" class="headerlink" title="单机Redis的风险与问题"></a>单机Redis的风险与问题</h3><ul><li>问题1：机器故障<ul><li>现象：硬盘故障、系统崩溃</li><li>本质：数据丢失，很可能对业务造成灾难性打击</li><li>结论：基本上会放弃使用Redis</li></ul></li><li>问题2：容量瓶颈<ul><li>现象：内存不足，从16G升级到64G，从64G升级到128G，无限升级内存</li><li>本质：穷！硬件条件跟不上</li><li>结论：放弃使用Redis</li></ul></li><li>结论：为了避免单点Redis服务器故障，准备多台服务器，互相连通，将数据复制从多个副本保存在不同的服务器上，<strong>连接在一起</strong>，并保证数据是<strong>同步</strong>的，即使有其中一台服务器宕机，其他服务器依然可以继续提供服务，实现Redis的高可用，同时实现数据<code>冗余备份</code></li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.esj6icd70.webp" alt="Redis主从复制.png"></p><ul><li>提供数据方：master<ul><li>主服务器、主节点、主库</li><li>主客户端</li></ul></li><li>接受数据方：slave<ul><li>从服务器、从节点、从库</li><li>从客户端</li></ul></li><li>需要解决的问题：数据同步</li><li>核心工作：master的数据复制到slave中</li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>主从复制即将master中的数据即时、有效的复制到slave中</p><p>特征：一个master可以拥有多个slave，一个slave只对应一个master</p><p>职责：</p><ul><li>master：<ul><li>写数据</li><li>执行写操作时，将出现变化的数据自动同步到slave</li><li>读数据（可忽略）</li></ul></li><li>slave<ul><li>读数据</li><li>写数据（禁止）</li></ul></li></ul><h3 id="主从复制的作用"><a href="#主从复制的作用" class="headerlink" title="主从复制的作用"></a>主从复制的作用</h3><ul><li>读写分离：master写、slave读，提高服务器的读写负载能力</li><li>负载均衡：基于主从结构，配合读写分离，由slave分担master负载，并根据需求的变化，改变slave的数量，通过多个从节点分担数据读取负载，大大提高Redis服务器并发量与数据吞吐量</li><li>故障恢复：当master出现问题时，由slave提供服务，实现快速的故障恢复</li><li>数据冗余：实现数据热备份，是持久化之外的一种数据冗余方式</li><li>高可用基石：基于主从复制，构建哨兵与集群，实现Redis的高可用方案</li></ul><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.5c100cqaqf.webp" alt="Redis主从复制流程.png"></p><ul><li>主从复制过程大体可以分为3个阶段<ul><li>建立连接阶段（即准备阶段）</li><li>数据同步阶段</li><li>命令传播阶段</li></ul></li></ul><h3 id="建立连接阶段"><a href="#建立连接阶段" class="headerlink" title="建立连接阶段"></a>建立连接阶段</h3><p>建立slave到master的连接，使master能够识别slave，并保存slave端口号<br><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.51e677b88z.webp" alt="Redis主从复制流程2.png"></p><ol><li>[slave]设置master的地址和端口，保存master信息</li><li>[slave]建立socket连接</li><li>[slave]发送ping命令(定时器任务)</li><li>[slave]身份验证</li><li>[slave]发送slave端口信息</li><li>至此主从连接成功</li><li>达到了以下状态：<ol><li>slave：保存master的地址与端口</li><li>master：保存slave的端口</li><li>总体：master与slave之间创建了连接的socket</li></ol></li></ol><h3 id="连接阶段-slave连master"><a href="#连接阶段-slave连master" class="headerlink" title="连接阶段(slave连master)"></a>连接阶段(slave连master)</h3><ul><li><p>方式一：客户端发送命令：<code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></p></li><li><p>方式二：启动服务器参数：<code>redis-server -slaveof &lt;masterip&gt; &lt;masterport&gt;</code></p></li><li><p>方式三：服务器配置：<code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></p></li><li><p>slave系统信息</p><ul><li><code>master_link_down_since_seconds</code></li><li><code>masterhost</code></li><li><code>masterport</code></li></ul></li><li><p>master系统信息</p><ul><li><code>slave_listening_port</code>（多个）</li></ul></li></ul><h3 id="授权阶段-master没密码可省略"><a href="#授权阶段-master没密码可省略" class="headerlink" title="授权阶段(master没密码可省略)"></a>授权阶段(master没密码可省略)</h3><ul><li><p>master配置文件设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass &lt;password&gt;  </span><br></pre></td></tr></table></figure></li><li><p>master客户端发送命令设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config get requirepass &lt;password&gt;  </span><br><span class="line">config get requirepass  </span><br></pre></td></tr></table></figure></li><li><p>slave客户端发送命令设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth &lt;password&gt;  </span><br></pre></td></tr></table></figure></li><li><p>slave配置文件设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masterauth &lt;password&gt;  </span><br></pre></td></tr></table></figure></li><li><p>启动客户端设置密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -a &lt;password&gt;  </span><br></pre></td></tr></table></figure></li></ul><h3 id="数据同步阶段"><a href="#数据同步阶段" class="headerlink" title="数据同步阶段"></a>数据同步阶段</h3><p><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.1hs8he8pup.webp" alt="Redis主从复制数据同步阶段.png"></p><ol><li>[slave]请求同步数据</li><li>[master]创建RDB同步数据</li><li>[slave]恢复RDB同步数据</li><li>[slave]请求部分同步数据</li><li>[slave]恢复部分同步数据</li><li>至此数据同步工作完成</li><li>达到了以下状态<ol><li>slave：具有master端全部数据，包含RDB过程接受的数据</li><li>master：保存slave当前数据同步的位置</li><li>总体：master与slave之间完成了数据克隆</li></ol></li></ol><h4 id="同步阶段master说明"><a href="#同步阶段master说明" class="headerlink" title="同步阶段master说明"></a>同步阶段master说明</h4><ol><li><p>如果master数据量巨大，数据同步阶段应避免流量高峰期，避免造成master阻塞，影响业务正常执行</p></li><li><p>复制缓冲区大小设定不合理，会导致数据溢出，如进行全量复制周期太长，进行部分复制时发现数据已经存在丢失的情况，必须进行第二次全量复制，致使slave陷入死循环状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repl-backlog-size 1mb  </span><br></pre></td></tr></table></figure></li><li><p>master单机内存占用主机内存的比例不应过大，建议使用50%70%的内存，留下30%50%的内存用于执行bgsave命令和创建复制缓冲区</p></li></ol><h4 id="同步阶段slave说明"><a href="#同步阶段slave说明" class="headerlink" title="同步阶段slave说明"></a>同步阶段slave说明</h4><ol><li><p>为避免slave进行全量复制、部分复制时服务器响应阻塞或数据不同步，建议关闭此期间的对外服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slave-serve-stable-data <span class="built_in">yes</span>|no  </span><br></pre></td></tr></table></figure></li><li><p>数据同步阶段，master发送给slave信息可以理解master是slave的一个客户端，主动向slave发送命令</p></li><li><p>多个slave同时向master请求数据同步，master发送的RDB文件增多，如果master带宽不足，会对带宽造成巨大冲击，因此数据同步需要根据业务需求，适量错峰</p></li><li><p>slave过多时，建议调整拓扑结构，由一主多从从结构变成树状结构，中间的节点既是master，也是slave。注意使用树状结构时，由于层级深度，导致深度越高的slave与顶层master间数据同步延迟较大，数据一致性变差，应谨慎选择</p></li></ol><h3 id="命令传播阶段"><a href="#命令传播阶段" class="headerlink" title="命令传播阶段"></a>命令传播阶段</h3><ul><li>当master数据库状态被修改时，导致主从服务器数据库状态不一致，此时需要让主从数据同步到一致的状态，同步的动作称为命令传播</li><li>master将接收到的数据变更命令发送给slave，slave接受命令后执行命令</li></ul><h3 id="命令传播阶段的部分复制"><a href="#命令传播阶段的部分复制" class="headerlink" title="命令传播阶段的部分复制"></a>命令传播阶段的部分复制</h3><ul><li><p>命令传播阶段出现断网现象：</p><ul><li>网络闪断闪联 –&gt; 忽略</li><li>短时间网络中断 –&gt; 部分复制</li><li>长时间网络中断 –&gt; 全量复制</li></ul></li><li><p>部分复制的三个核心要素</p><ul><li>服务器的运行id(runid)<ul><li>概念：服务器运行Id，是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行id</li><li>组成：运行id由40位字符组成，是一个随机的十六进制字符</li><li>作用：运行id被用于在服务器间进行传输，识别身份。如果想两次操作均同一台服务器进行，必须每次操作携带对应的运行id，用于对方识别</li><li>实现方式：运行id在每台服务器启动时自动生成的，master在首次连接slave时，会将自己的运行id发送给slave，slave保存此id，通过<code>info server</code>命令，可以查看节点的runid</li></ul></li><li>主服务器的复制积压缓冲区<ul><li>概念：复制缓冲区，又名复制积压缓冲区，是一个先进先出(FIFO)的队列，用于存储服务器执行过的命令，每次传播命令，master都会将传播的命令记录下来，并存储在复制缓冲区<ul><li>复制缓冲区默认数据存储空间大小是1M，由于存储空间大小是固定的，当入队元素的数量大于队列长度时，最先入队的元素会被弹出，而新元素会被放入队列</li></ul></li><li>由来：每台服务器启动时，如果开启有AOF或被连接成位master节点，即创建复制缓冲区</li><li>作用：用于保存master收到的所有指令（仅影响数据变更的指令，例如set、select）</li><li>数据来源：当master接收到主客户端的指令时，除了将指令执行，还会将指令存储到缓冲区中</li><li>组成：偏移量和字节值</li><li>工作原理<ul><li>通过offset区分不同的slave当前数据传播的差异</li><li>master记录已发送的信息对应的offset</li><li>slave记录已接受的信息对应的offset</li></ul></li></ul></li><li>主从服务器的复制偏移量<ul><li>概念：一个数字，描述复制缓冲区中的指令字节位置</li><li>分类：<ul><li>master复制偏移量：记录发送给所有slave的指令字节对应的位置（多个）</li><li>slave复制偏移量：记录slave接受master发送过来的指令字节对应的位置（一个）</li></ul></li><li>数据来源：<ul><li>master端：发送一次记录一次</li><li>slave端：接受一次记录一次</li></ul></li><li>作用：同步信息，比对master与slave的差异，当slave断线后，恢复数据使用</li></ul></li></ul></li></ul><h3 id="数据同步-命令传播阶段工作流程"><a href="#数据同步-命令传播阶段工作流程" class="headerlink" title="数据同步+命令传播阶段工作流程"></a>数据同步+命令传播阶段工作流程</h3><p><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.45pdcxtoj.webp" alt="Redis数据同步完整流程.png"></p><h3 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h3><p>进入命令传播阶段，master与slave间需要进行信息交换，使用心跳机制进行维护，实现双方连接保持在线</p><h4 id="master心跳任务"><a href="#master心跳任务" class="headerlink" title="master心跳任务"></a>master心跳任务</h4><ul><li><p>指令：<code>PING</code></p></li><li><p>周期：由<code>repl-ping-slave-period</code>决定，默认10秒</p></li><li><p>作用：判断slave是否在线</p></li><li><p>查询：<code>info replication</code> 获取slave最后一次连接时间间隔，lag项维持在0或1视为正常</p><h4 id="slave心跳任务"><a href="#slave心跳任务" class="headerlink" title="slave心跳任务"></a>slave心跳任务</h4></li><li><p>指令：<code>REPLCONF ACK &#123;offset&#125;</code></p></li><li><p>周期：1秒</p></li><li><p>作用1：汇报slave自己的复制偏移量，获取最新的数据变更指令</p></li><li><p>作用2：判断master是否在线</p></li></ul><h4 id="心跳阶段注意事项"><a href="#心跳阶段注意事项" class="headerlink" title="心跳阶段注意事项"></a>心跳阶段注意事项</h4><ul><li><p>当slave多数掉线，或延迟过高时，master为保障数据稳定性，将拒绝所有信息同步操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min-slave-to-write 2  </span><br><span class="line">min-slave-max-lag 8  </span><br></pre></td></tr></table></figure><p>slave数量少于2个，或者所有slave的延迟都大于等于10秒时，强制关闭master写功能，停止数据同步</p></li><li><p>slave数量由slave发送<code>REPLCONF ACK</code>命令做确认</p></li><li><p>slave延迟由slave发送<code>REPLCONF ACK</code>命令做确认</p></li></ul><h2 id="主从复制的完整工作流程图"><a href="#主从复制的完整工作流程图" class="headerlink" title="主从复制的完整工作流程图"></a>主从复制的完整工作流程图</h2><p><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.4xuk9hitls.webp" alt="主从复制的完整工作流程.png"></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="频繁的全量复制-1"><a href="#频繁的全量复制-1" class="headerlink" title="频繁的全量复制(1)"></a>频繁的全量复制(1)</h3><p>伴随着系统的运行，master的数据量会越来越大，一旦master重启，runid将发生变化，会导致全部slave的全量复制操作</p><ul><li>内部优化调整方案（redis自己操作的）<ul><li>master内部创建master_replid变量，使用runid相同的策略生成，长度41位，并发送给所有slave</li><li>在master关闭时执行命令<code>shutdown save</code>，进行RDB持久化，将runid与offset保存到RDB文件中<ul><li>repl-id repl-offset</li><li>通过redis-check-rdb命令可以查看该信息</li></ul></li><li>master重启后加载RDB文件，恢复数据，重启后RDB文件将保存的repl-id与repl-offset加载到内存中<ul><li>master_repl_id &#x3D; repl master_repl_offset &#x3D; repl-offset</li><li>通过info命令可以查看该信息</li></ul></li></ul></li><li>作用：本机保存上次runid，重启后恢复该值，使所有slave认为还是之前的master</li></ul><h3 id="频繁的全量复制-2"><a href="#频繁的全量复制-2" class="headerlink" title="频繁的全量复制(2)"></a>频繁的全量复制(2)</h3><ul><li>问题现象：网络环境不佳，出现网络中断，slave不提供服务</li><li>问题原因：复制缓冲区过小，断网后slave的offset越界，触发全量复制</li><li>最终结果：slave反复进行全量复制</li><li>解决方案：修复复制缓冲区大小</li><li>建议设置如下：<ul><li>测算从master到slave的重连平均时长second</li><li>获取master平均每秒产生写命令数据总量<code>write_size_per_second</code></li><li>最有复制缓冲区空间 &#x3D; 2 * second * write_size_per_second</li></ul></li></ul><h3 id="频繁的网络中断-1"><a href="#频繁的网络中断-1" class="headerlink" title="频繁的网络中断(1)"></a>频繁的网络中断(1)</h3><ul><li><p>问题现象：master的CPU占用过高或slave频繁断开联系</p></li><li><p>问题原因：</p><ul><li>slave每1秒发送<code>REPLCONF ACK</code>命令到<code>master</code></li><li>当slave接到了慢查询时（<code>keys *</code>、<code>hgetall</code>等），会大量占用CPU性能</li><li>master每1秒调用复制定时函数<code>replicationCron()</code>，会对slave发现长时间没有进行响应</li></ul></li><li><p>最终结果：</p><ul><li>master各种资源（输出缓冲区、带宽、连接等）被严重占用</li></ul></li><li><p>解决方案：通过设置合理的超时时间，确认是否释放slave</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repl-timeout  </span><br></pre></td></tr></table></figure><p>该参数定义了超时时间的阙值（默认60秒），超过该值，释放slave</p></li></ul><h3 id="频繁的网络中断-2"><a href="#频繁的网络中断-2" class="headerlink" title="频繁的网络中断(2)"></a>频繁的网络中断(2)</h3><ul><li><p>问题现象：slave与master连接断开</p></li><li><p>问题原因：</p><ul><li>master发送<code>ping</code>指令频度较低</li><li>master设定超时时间较短</li><li>ping指令在网络中存在丢包</li></ul></li><li><p>解决方案：提高<code>ping</code>指令发送的频度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repl-ping-slave-period  </span><br></pre></td></tr></table></figure><p>超时时间<code>repl-time</code>的时间至少是<code>ping</code>指令频度的5到10倍，否则slave很容易判定超时</p></li></ul><h3 id="数据不一致"><a href="#数据不一致" class="headerlink" title="数据不一致"></a>数据不一致</h3><ul><li>问题现象：多个slave获取相同数据不同步</li><li>问题原因：网络信息不同步，数据发送有延迟</li><li>解决方案：<ul><li><p>优化主从间的网络环境，通常放置在同一个机房部署，如使用阿里云等云服务器要注意此现象</p></li><li><p>监控主从节点延迟（通过offset）判断，如果slave延迟过大，暂时屏蔽程序对该slave的数据访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slave-serve-stable-data <span class="built_in">yes</span>|no  </span><br></pre></td></tr></table></figure><p>开启后仅响应info、slaveof等少数命令（慎用，除非对数据一致性要求很高）</p></li></ul></li></ul><h1 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h1><p>主从复制模式中，如果master宕机了，需要做以下操作：</p><ol><li>将宕机的master下线</li><li>找一个slave作为master</li><li>通知所有的slave连接新的master</li><li>启动新的master与slave</li></ol><h2 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h2><p>哨兵是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的master并将所有slave连接到新的master</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.64dvi37ves.webp" alt="image.png"></p><p>哨兵的作用：</p><ul><li>监控<ul><li>不断的检查master和slave是否正常运行</li><li>master存活检测、master与slave运行情况检测</li></ul></li><li>通知（提醒）：当被监控的服务器出现问题后，向其他（哨兵间、客户端）发送通知</li><li>自动故障转移：断开master与slave连接，选取一个slave作为master，将其他slave连接到新的master，并告知客户端新的服务器地址</li></ul><p><strong>哨兵也是一台redis服务器，只是不提供数据服务，通常哨兵配置数量为单数</strong></p><h2 id="启动哨兵"><a href="#启动哨兵" class="headerlink" title="启动哨兵"></a>启动哨兵</h2><ul><li><p>配置一拖二的主从结构</p></li><li><p>配置三个哨兵（配置相同，端口不同）</p><ul><li>参看<code>sentinel.conf</code></li></ul></li><li><p>启动哨兵</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-sentinel sentinel-端口号.conf  </span><br></pre></td></tr></table></figure></li><li><p>启动顺序</p><ol><li>启动master</li><li>启动slave</li><li>启动哨兵</li></ol></li></ul><h2 id="sentinel-conf"><a href="#sentinel-conf" class="headerlink" title="sentinel.conf"></a>sentinel.conf</h2><ul><li><p><code>port 26379</code>：哨兵对外的端口</p></li><li><p><code>dir /tmp</code>：哨兵的工作信息存储位置</p></li><li><p><code>sentinel monitor mymaster 127.0.0.1 6379 2</code></p><blockquote><p>设置哨兵监控的Master，其中mymaster是自己给master起的名字，可以自定义，后面使用的时候保持一致即可，最后面的2表示有多少个哨兵认为master挂了，就认定为挂了，一般设置(哨兵数量&#x2F;2+1)</p></blockquote></li><li><p><code>sentinel down-after-milliseconds mymaster 30000</code></p><blockquote><p>master连接多长时间没响应就认为挂了</p></blockquote></li><li><p><code>sentinel parallel-syncs mymaster 1</code></p><blockquote><p>进行新的master切换的时候，一次有多少个slave来进行同步数据，这个值越小，对服务器性能压力越小，速度越慢，相反，这个值越大，对服务器性能压力就越大，与之对应的速度就越快</p></blockquote></li><li><p><code>sentinel failover-timeout mymaster 1800000</code></p><blockquote><p>在进行同步的时候，超过多长的时间算超时</p></blockquote></li></ul><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p>用于同步各个节点的状态信息</p><ul><li>获取各个sentinel的状态（是否在线）</li><li>获取master的状态<ul><li>master属性<ul><li>runid</li><li>role：master</li></ul></li><li>各个slave的详细信息<ul><li>runid</li><li>role：slave</li><li>master_host、master_port</li><li>offset</li><li>…</li></ul></li></ul></li></ul><ol><li>sentinelA在启动的时候，会先连接master，建立CMD连接，获取master信息，并在master的配置里新增自己的信息</li><li>sentinelA在获取到master信息后，通过master信息得到master的slave信息，然后连接slave，获取slave信息</li><li>sentinelB启动时连接master，获取master信息，这时候发现master已经有sentinelA连接过的记录，便与sentinelA建立起一条pub&#x2F;sub通道(发布订阅通道)，再连接master对应的slave</li><li>再有其他的sentinel启动连到master，一样执行的是sentinelB的步骤，就这样，每个sentinel都与其他的sentinel建立连接，形成一个小型组网</li></ol><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><p>多个sentinel中的其中一个向master和slave发送一条hello信息，确定是否在线，并将这个是否在线的结果发布到sentinel自己的组网里，通知其他sentinel这个结果</p><h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><ol><li>当通知阶段中有一个sentinelA发送了hello信息给master，但是master没做反应，这时候这个sentinelA就认为这个master出现故障，便将这个master的状态标记为<code>sdown</code>(主观下线)，并将这个消息发布到sentinel的pub&#x2F;sub的通道中，通知其他sentinel</li><li>其他sentinel街道sentinelA发布的消息，作为吃瓜群众赶紧也去发送hello信息给master，看看是不是真挂了。这时如果达到了<code>sentinel.conf</code>里配置的数量的sentinel认为master挂了，那所有的sentinel就都认为master是真挂了，便将这个master的状态标记为<code>odown</code>(客观下线)</li><li>出现<code>odown</code>之后，所有sentinel就开会讨论谁去做故障转移这件事，sentinel发起投票，确定谁去做故障转移</li><li>挑选出来做故障处理的sentinel要依照下面的规则挑选备选master<ol><li>在线的（排除掉下线的）</li><li>响应快的（排除掉响应慢的）</li><li>与原master沟通密切的（排除掉与原master断开时间久的）</li><li>有限原则<ol><li>优先级</li><li>offset</li><li>runid</li></ol></li></ol></li><li>挑选出备选master之后，便向新的master发送<code>slaveof no one</code>的指令，将它升级到master，然后再向其他slave发送<code>slaveof 新masterIP 端口</code>，让其他slave全部指向新master</li></ol><p><strong>原master重新上线之后，会变成slave去连接现在的master</strong></p><h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><h2 id="现状问题"><a href="#现状问题" class="headerlink" title="现状问题"></a>现状问题</h2><ul><li>redis提供的服务OPS可以达到10w&#x2F;秒，当前业务OPS已经达到20w&#x2F;秒</li><li>内存单机容量达到256G，当前业务需求内存容量1T</li></ul><p><strong>这时候就需要集群来解决上面的问题了</strong></p><h2 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h2><p>集群就是使用网络将若干台计算机联通起来，并提供统一的管理方式，使其对外呈现单机的服务效果</p><p>集群作用：</p><ul><li>分散单台服务器的访问压力，实现负载均衡</li><li>分散单台服务器的存储压力，实现可扩展性</li><li>降低单台服务器宕机带来的业务灾难</li></ul><h2 id="集群的数据存储"><a href="#集群的数据存储" class="headerlink" title="集群的数据存储"></a>集群的数据存储</h2><ul><li>通过算法设计，计算出key应该保存的位置<ul><li>通过<code>CRC16(key)</code>得到一个数值，然后与<code>16384</code>取模，得到这个key最终应该保存的位置</li></ul></li><li>也就是说将所有的存储空间计划切割成16384份，每台主机保存一部分<ul><li>每份代表的是一个存储空间，不是存储一个key的保存空间</li></ul></li><li>将key按照计算出的结果放到对应的存储空间</li><li>增强可扩展性</li></ul><h2 id="集群的内部通讯设计"><a href="#集群的内部通讯设计" class="headerlink" title="集群的内部通讯设计"></a>集群的内部通讯设计</h2><ul><li>各个数据库相互通信，保存各个库中槽的编号数据</li><li>一次命中，直接返回</li><li>一次未命中，告知具体位置</li></ul><h2 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h2><ul><li>搭建一个三主三从的集群</li></ul><p>cluster配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cluster-enabled <span class="built_in">yes</span>  </span><br><span class="line">cluster-config-file nodes-6379.conf  </span><br><span class="line">cluster-node-timeout 100000  </span><br></pre></td></tr></table></figure><p>大概的redis.conf配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">port 6379  </span><br><span class="line">daemonize <span class="built_in">yes</span>  </span><br><span class="line"><span class="built_in">dir</span> /redis-all-in/data  </span><br><span class="line">dbfilename dump-6379.rdb  </span><br><span class="line">rdbcompression <span class="built_in">yes</span>  </span><br><span class="line">rdbchecksum <span class="built_in">yes</span>  </span><br><span class="line">save 10 2  </span><br><span class="line">appendonly <span class="built_in">yes</span>  </span><br><span class="line">appendfsync always  </span><br><span class="line">appendfilename appendonly-6379.aof  </span><br><span class="line">databases 16  </span><br><span class="line">cluster-enabled <span class="built_in">yes</span>  </span><br><span class="line">cluster-config-file nodes-6379.conf  </span><br><span class="line">cluster-node-timeout 10000  </span><br></pre></td></tr></table></figure><p>启动命令（redis 5.0以后的启动方式）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384 --cluster-replicas 1  </span><br></pre></td></tr></table></figure><p>输入上面命令之后redis会自动分配槽位置与主从节点，确定没问题之后输入<code>yes</code>即可自动创建cluster集群</p><p><code>--cluster-replicas</code>表示1个master连1个slave</p><h2 id="Cluster节点操作命令"><a href="#Cluster节点操作命令" class="headerlink" title="Cluster节点操作命令"></a>Cluster节点操作命令</h2><ul><li>查看集群节点信息：<code>cluster nodes</code></li><li>进入一个从节点，切换其主节点：<code>cluster replicate &lt;master-id&gt;</code></li><li>发现一个新节点，新增主节点：<code>cluster meet ip:port</code></li><li>忽略一个没有slot的节点：<code>cluster forget &lt;id&gt;</code></li><li>手动故障转移：<code>cluster failover</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis进阶</title>
      <link href="/posts/505826b8.html"/>
      <url>/posts/505826b8.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><!-- - [.NET Core操作Redis](#net-core操作redis)- [持久化](#持久化)  - [持久化过程保存什么](#持久化过程保存什么)  - [RDB](#rdb)    - [RDB持久化的配置](#rdb持久化的配置)    - [自动执行RDB](#自动执行rdb)    - [自动执行RDB注意](#自动执行rdb注意)    - [三种方案对比](#三种方案对比)    - [RDB特殊启动形式](#rdb特殊启动形式)    - [RDB优点](#rdb优点)    - [RDB缺点](#rdb缺点)  - [AOF](#aof)    - [RDB存储的弊端](#rdb存储的弊端)    - [概念](#概念)    - [AOF写数据三种策略(appendfsync)](#aof写数据三种策略appendfsync)    - [AOF配置](#aof配置)    - [AOF重写](#aof重写)      - [AOF重写作用](#aof重写作用)      - [AOF重写规则](#aof重写规则)      - [AOF重写方式](#aof重写方式)      - [AOF自动重写方式](#aof自动重写方式)      - [AOF重写流程](#aof重写流程)  - [RDB与AOF区别](#rdb与aof区别)  - [RDB与AOF怎么选](#rdb与aof怎么选)- [事务](#事务)  - [简介](#简介)  - [基本操作](#基本操作)  - [事务的工作流程](#事务的工作流程)  - [事务的注意事项](#事务的注意事项)  - [锁 – 基于特定条件的事务执行](#锁--基于特定条件的事务执行)    - [乐观锁](#乐观锁)      - [业务分析](#业务分析)    - [分布式锁](#分布式锁)      - [业务分析](#业务分析-1)    - [死锁](#死锁)      - [业务分析](#业务分析-2)- [删除策略](#删除策略)  - [Redis中的数据特征](#redis中的数据特征)  - [定时删除](#定时删除)  - [惰性删除](#惰性删除)  - [定期删除](#定期删除)  - [删除策略比对](#删除策略比对)  - [逐出算法](#逐出算法)    - [新数据进入检测](#新数据进入检测)- [Redis.Conf](#redisconf)  - [服务器基础配置](#服务器基础配置)  - [日志配置](#日志配置)  - [客户端配置](#客户端配置)- [高级数据类型](#高级数据类型)  - [Bitmaps](#bitmaps)  - [HyperLogLog](#hyperloglog)    - [说明](#说明)  - [GEO](#geo) --><h1 id="NET-Core操作Redis"><a href="#NET-Core操作Redis" class="headerlink" title=".NET Core操作Redis"></a>.NET Core操作Redis</h1><p>创建控制台应用<code>RedisSample01</code>，通过<code>nuget</code>引入<code>CSRedisCore</code></p><p>具体示例代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">using System;  </span><br><span class="line">using System.Linq;  </span><br><span class="line">using System.Threading.Tasks;  </span><br><span class="line">using CSRedis;  </span><br><span class="line">  </span><br><span class="line">namespace RedisSample01  </span><br><span class="line">&#123;  </span><br><span class="line">    class Program  </span><br><span class="line">    &#123;  </span><br><span class="line">        static async Task Main(string\[\] args)  </span><br><span class="line">        &#123;  </span><br><span class="line">        </span><br><span class="line">        var redis = new CSRedisClient(<span class="string">&quot;127.0.0.1:6379,defaultDatabase=0,prefix=ds_&quot;</span>);  </span><br><span class="line">        RedisHelper.Initialization(redis);  </span><br><span class="line">        </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;↓↓↓↓↓ String Sample ↓↓↓↓↓&quot;</span>);  </span><br><span class="line">        await RedisHelper.SetAsync(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;dimsum&quot;</span>);  </span><br><span class="line">        var name = await RedisHelper.GetAsync&lt;string&gt;(<span class="string">&quot;name&quot;</span>);  </span><br><span class="line">        Console.WriteLine($<span class="string">&quot;name = &#123;name&#125;&quot;</span>);  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;↑↑↑↑↑ Sample End ↑↑↑↑↑↑&quot;</span>);  </span><br><span class="line">        Console.WriteLine();  </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;↓↓↓↓↓ List Sample ↓↓↓↓↓&quot;</span>);  </span><br><span class="line">        await RedisHelper.DelAsync(<span class="string">&quot;list1&quot;</span>);  </span><br><span class="line">        await RedisHelper.LPushAsync(<span class="string">&quot;list1&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);  </span><br><span class="line">        await RedisHelper.RPushAsync(<span class="string">&quot;list1&quot;</span>, <span class="string">&quot;x&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">        var list1 =await RedisHelper.LRangeAsync(<span class="string">&quot;list1&quot;</span>, 0, -1);  </span><br><span class="line">        Console.WriteLine($<span class="string">&quot;list1 = &#123;String.Join(&#x27;,&#x27;,list1)&#125;&quot;</span>);  </span><br><span class="line">        var list1Length = await redis.LLenAsync(<span class="string">&quot;list1&quot;</span>);  </span><br><span class="line">        Console.WriteLine($<span class="string">&quot;list1.length = &#123;list1Length&#125;&quot;</span>);  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;↑↑↑↑↑ Sample End ↑↑↑↑↑↑&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;↓↓↓↓↓ Hash Sample ↓↓↓↓↓&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">        await RedisHelper.HSetAsync(<span class="string">&quot;hash1&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);  </span><br><span class="line">        await RedisHelper.HSetAsync(<span class="string">&quot;hash1&quot;</span>, <span class="string">&quot;age&quot;</span>, 19);  </span><br><span class="line">        await RedisHelper.HSetAsync(<span class="string">&quot;hash1&quot;</span>, <span class="string">&quot;job&quot;</span>, <span class="string">&quot;C#&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">        var hash1 = await RedisHelper.HGetAllAsync(<span class="string">&quot;hash1&quot;</span>);  </span><br><span class="line">        Console.WriteLine($<span class="string">&quot;hash1 = &#123;string.Join(&#x27;,&#x27;, hash1.Select(x =&gt; $&quot;</span>&#123;x.Key&#125;:&#123;x.Value&#125;<span class="string">&quot;).ToArray())&#125;&quot;</span>);  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;↑↑↑↑↑ Sample End ↑↑↑↑↑↑&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">        Console.WriteLine();  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;====================&quot;</span>);  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Sample done&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><ul><li>持久化：利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的工作机制</li><li>为什么要持久化？防止数据的意外丢失，确保数据安全</li></ul><h2 id="持久化过程保存什么"><a href="#持久化过程保存什么" class="headerlink" title="持久化过程保存什么"></a>持久化过程保存什么</h2><ul><li>RDB：将当前数据状态进行保存，快照形式，存储数据结果，存储格式简单，关注点在数据</li><li>AOF：将数据的操作过程进行保存，日志形式，存储操作过程，存储格式复杂，关注点在数据的操作过程</li></ul><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><ul><li>操作命令：<code>save</code></li><li>作用：手动执行一次保存操作</li></ul><h3 id="RDB持久化的配置"><a href="#RDB持久化的配置" class="headerlink" title="RDB持久化的配置"></a>RDB持久化的配置</h3><p><strong>在配置文件中修改</strong></p><ul><li><p>dbfilename dump.rdb</p><ul><li>说明：设置本地数据库文件名，默认为<code>dump.rdb</code></li><li>经验：通常设置为<code>dump-端口号.rdb</code></li></ul></li><li><p>dir</p><ul><li>说明：设置存储<code>.rdb</code>文件的路径</li><li>经验：通常设置成存储空间较大的目录中，目录名称<code>data</code></li></ul></li><li><p>rdbcompression yes</p><ul><li>说明：设置存储至本地数据库时是否压缩数据，默认为<code>yes</code>，采用<code>LZF</code>压缩</li><li>经验：通常默认为开启状态，如果设置为<code>no</code>，可以节省CPU运行时间，但会使存储的文件变大(巨大)</li></ul></li><li><p>rdbchecksum yes</p><ul><li>说明：设置是否进行<code>RDB</code>文件格式校验，该校验过程在写文件和读文件过程均进行</li><li>经验：通常默认为开启状态，如果设置为no，可以节约读写行过程约10%时间消耗，但是存储一定的数据损坏风险</li></ul></li><li><p>stop-writes-on-bgsave-error yes</p><ul><li><p>说明：后台存储过程中如果出现错误现象，是否停止保存操作(这个配置项针对bgsave操作)</p></li><li><p>经验：通常默认为开启状态</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3></li></ul></li><li><p><em>save指令的执行会阻塞当前Redis服务器，知道当前RDB过程完成位置，有可能会造成长时间阻塞，线上环境不建议使用*</em></p><h3 id="bgsave"><a href="#bgsave" class="headerlink" title="bgsave"></a>bgsave</h3></li><li><p>操作命令：<code>bgsave</code></p></li><li><p>作用：手动启动后台保存操作，但不是立即执行</p></li></ul><p><strong>注意：bgsave命令是针对save阻塞问题做的优化，redis内部所有涉及到RDB操作都采用bgsave的方式，save命令可以放弃使用</strong><br><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.3nrn361nc4.webp" alt="bgsave.png"></p><h3 id="自动执行RDB"><a href="#自动执行RDB" class="headerlink" title="自动执行RDB"></a>自动执行RDB</h3><ul><li>配置：<code>save second changes</code></li><li>作用：满足限定时间范围内key的变化数量达到指定数量，即进行持久化</li><li>参数：<ul><li>second：监控时间范围</li><li>changes：监控<code>key</code>的变化量</li></ul></li><li>位置：在conf文件中进行配置</li><li>示例：<ul><li><code>save 900 1</code> -&gt; 900秒内变化1个即触发RDB</li><li><code>save 300 10</code> -&gt; 300秒内变化10个即触发RDB</li><li><code>save 60 10000</code> -&gt; 60秒内变化10000个即触发RDB</li></ul></li><li>经验：一般监控时间大，变化时间小</li></ul><h3 id="自动执行RDB注意"><a href="#自动执行RDB注意" class="headerlink" title="自动执行RDB注意"></a>自动执行RDB注意</h3><ul><li><code>save</code>配置要根据实际业务情况进行设置，频度过高或过低都会出现性能问题，结果可能是灾难性的</li><li><code>save</code>配置中对于<code>second</code>与<code>changes</code>设置通常具有互补对应关系，尽量不要设置成包含行关系</li><li><code>save</code>配置启动后执行的是<code>bgsave</code>操作</li></ul><h3 id="三种方案对比"><a href="#三种方案对比" class="headerlink" title="三种方案对比"></a>三种方案对比</h3><table><thead><tr><th>方式</th><th>save指令</th><th>bgsave指令</th><th>save配置</th></tr></thead><tbody><tr><td>读写</td><td>同步</td><td>异步</td><td>阻塞客户端指令</td></tr><tr><td>是</td><td>否</td><td>额外内存消耗</td><td>否</td></tr><tr><td>是</td><td>启动新进程</td><td>否</td><td>是</td></tr></tbody></table><h3 id="RDB特殊启动形式"><a href="#RDB特殊启动形式" class="headerlink" title="RDB特殊启动形式"></a>RDB特殊启动形式</h3><ul><li>全量复制：（主从复制再说）</li><li>服务器运行过程中重启：<code>debug reload</code></li><li>关闭服务器时指定保存数据：<code>shutdown save</code></li></ul><h3 id="RDB优点"><a href="#RDB优点" class="headerlink" title="RDB优点"></a>RDB优点</h3><ul><li><code>RDB</code>是一个紧凑压缩的二进制文件，存储效率较高</li><li><code>RDB</code>内部存储的是redis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景</li><li><code>RDB</code>恢复数据的速度要比<code>AOF</code>快很多</li><li>应用：服务器中每N小时执行<code>bgsave</code>备份，并将<code>RDB</code>文件拷贝到远程服务器中，用于灾难恢复</li></ul><h3 id="RDB缺点"><a href="#RDB缺点" class="headerlink" title="RDB缺点"></a>RDB缺点</h3><ul><li><code>RDB</code>方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据</li><li><code>bgsave</code>指令每次运行要执行<code>fork</code>操作创建子进程，要牺牲掉一些性能</li><li><code>Redis</code>的众多版本中未进行<code>RDB</code>文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象</li></ul><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><h3 id="RDB存储的弊端"><a href="#RDB存储的弊端" class="headerlink" title="RDB存储的弊端"></a>RDB存储的弊端</h3><ul><li><p>存储数据量较大，效率较低。基于快照思想，每次读写都是全部数据，当数据量巨大时，效率非常低</p></li><li><p>大数据量下的IO性能较低</p></li><li><p>基于<code>fork</code>创建子进程，内存产生额外消耗</p></li><li><p>宕机带来的数据丢失风险</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3></li><li><p>不写全数据，仅记录部分数据</p></li><li><p>改记录数据为记录操作过程</p></li><li><p>对所有数据操作均进行记录，排除丢失数据的风险</p></li></ul><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>AOP(append only file)持久化：以独立日志的方式记录每次写命令，重启时再重新执行<code>AOF</code>文件中命令，以达到恢复数据的目的，与<code>RDB</code>相比可以简单描述为<strong>改记录数据为记录数据产生的过程</strong></li><li><code>AOF</code>的主要作用是解决了数据持久化的实时性，目前已经是<code>Redis</code>持久化的主流方式</li></ul><p><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.491apgw8io.webp" alt="image.png"></p><h3 id="AOF写数据三种策略-appendfsync"><a href="#AOF写数据三种策略-appendfsync" class="headerlink" title="AOF写数据三种策略(appendfsync)"></a>AOF写数据三种策略(appendfsync)</h3><ul><li>always(每次)：每次写入操作均同步到<code>AOF</code>文件中，数据零误差，性能较差</li><li>everysec(每秒)：每秒将缓冲区的指令同步到<code>AOF</code>文件中，数据准确性较高，性能较高，在系统突然宕机的情况下丢失1秒内的数据。<strong>建议使用，也是默认配置项</strong></li><li>no(系统控制)：由操作系统控制每次同步到<code>AOF</code>文件的周期，整体过程不可控</li></ul><h3 id="AOF配置"><a href="#AOF配置" class="headerlink" title="AOF配置"></a>AOF配置</h3><ul><li>配置：<code>appendonly yes|no</code><ul><li>作用：是否开启<code>AOF</code>持久化功能，默认为不开启状态</li><li>经验：开启</li></ul></li><li>配置：<code>appendfsync always|everysec|no</code><ul><li>作用：<code>AOF</code>写数据策略</li><li>经验：<code>everysec</code></li></ul></li><li>配置：<code>appendfilename filename</code><ul><li>作用：<code>AOF</code>持久化文件名，默认文件名为<code>appendonly.aof</code></li><li>经验：建议配置为<code>appendonly-端口号.aof</code></li></ul></li><li>配置：<code>dir</code><ul><li>作用：<code>AOF</code>持久化文件保存路径</li><li>经验：与<code>RDB</code>持久化文件保持一致即可</li></ul></li></ul><h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>随着命令不断写入<code>AOF</code>，文件会越来越大，为了解决这个问题，Redis引入了<code>AOF</code>重写机制压缩文件体积。<code>AOF</code>文件重写是将Redis进程内的数据转化为些命令同步到新<code>AOF</code>文件的过程。简单说就是将对同一个数据的若干条命令执行结果转化成最终结果数据对应的指令进行记录。</p><h4 id="AOF重写作用"><a href="#AOF重写作用" class="headerlink" title="AOF重写作用"></a>AOF重写作用</h4><ul><li>降低磁盘占用量，提高磁盘利用率</li><li>提高持久化效率，降低持久化写时间，提升IO性能</li><li>降低数据恢复用时，提高数据恢复效率</li></ul><h4 id="AOF重写规则"><a href="#AOF重写规则" class="headerlink" title="AOF重写规则"></a>AOF重写规则</h4><ul><li>进程内已超时的数据不再写入文件</li><li>忽略无效指令，重写时使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令<ul><li>如：<code>del key1、hdel key2、srem key3、set key4 111、set key4 222</code></li></ul></li><li>对同一数据的多条写命令合并为同一条命令<ul><li>如：<code>push list1 a、lpush list1 b、lpush list1 c</code>可以转为：<code>lpush list1 a b c</code></li><li>为了防止数据量过大造成客户端缓冲区溢出，对<code>list</code>、<code>set</code>、<code>hash</code>、<code>zset</code>等类型，每条指令最多写入64个元素</li></ul></li></ul><h4 id="AOF重写方式"><a href="#AOF重写方式" class="headerlink" title="AOF重写方式"></a>AOF重写方式</h4><ul><li><p>手动重写：<code>bgrewriteaof</code></p></li><li><p>自动重写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-min-size size  </span><br><span class="line">auto-aof-rewrite-percentage percentage  </span><br></pre></td></tr></table></figure></li></ul><h4 id="AOF自动重写方式"><a href="#AOF自动重写方式" class="headerlink" title="AOF自动重写方式"></a>AOF自动重写方式</h4><ul><li><p>自动重写触发条件设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-min-size size --自动AOF的重写尺寸(默认值比较大)  </span><br><span class="line">auto-aof-rewrite-percentage percent  --自动重写的百分比  </span><br></pre></td></tr></table></figure></li><li><p>自动重写触发对比参数（运行指令info persistence获取具体信息）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aof_current_size  </span><br><span class="line">aof_base_size  </span><br></pre></td></tr></table></figure></li><li><p>自动重写触发条件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aof_current_size &gt; auto_aof_rewrite_min_size  </span><br><span class="line">aof_current_size - aof_base_size / aof_base_size &gt;= auto-aof-rewrite-percentage  </span><br></pre></td></tr></table></figure><h4 id="AOF非重写流程"><a href="#AOF非重写流程" class="headerlink" title="AOF非重写流程"></a>AOF非重写流程</h4><p><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.esj6iefr9.webp" alt="image.png"></p></li></ul><h4 id="AOF重写流程"><a href="#AOF重写流程" class="headerlink" title="AOF重写流程"></a>AOF重写流程</h4><p><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.45horr3f9n.webp" alt="image.png"></p><h2 id="RDB与AOF区别"><a href="#RDB与AOF区别" class="headerlink" title="RDB与AOF区别"></a>RDB与AOF区别</h2><table><thead><tr><th>持久方式</th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>占用存储空间</td><td>小（数据级：压缩）</td><td>大（指令集：重写）</td></tr><tr><td>存储速度</td><td>慢</td><td>快</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>会丢失数据</td><td>依据策略决定</td></tr><tr><td>消耗资源</td><td>高&#x2F;重量级</td><td>低&#x2F;轻量级</td></tr><tr><td>启动优先级</td><td>低</td><td>高</td></tr></tbody></table><h2 id="RDB与AOF怎么选"><a href="#RDB与AOF怎么选" class="headerlink" title="RDB与AOF怎么选"></a>RDB与AOF怎么选</h2><ul><li>对数据非常敏感，建议使用默认的<code>AOF</code>持久化方案<ul><li><code>AOF</code>持久化策略使用<code>everysecond</code>，每秒钟<code>fsync</code>一次。该策略redis仍然可以保持很好的性能，当出现问题时，最多丢失0-1秒钟的数据</li><li>注意：<code>AOF</code>文件存储体积较大，且恢复速度较慢</li></ul></li><li>数据呈现具有有效性，建议使用<code>RDB</code>持久化方案<ul><li>数据可以良好的做到阶段内无丢失（该阶段是开发者或运维人员手工维护的），且恢复速度快，阶段点数据恢复通常采用<code>RDB</code>方案</li><li>注意：利用<code>RDB</code>实现紧凑的数据持久化会使Redis性能降得很低</li></ul></li><li>综合比对<ul><li><code>RDB</code>与<code>AOF</code>的选择实际上是在做一种权衡，每种都有利弊</li><li>如不能承受数分钟以内的数据丢失，对业务数据非常敏感，选用<code>AOF</code></li><li>如能承受数分钟以内的数据丢失，且追求大数据的恢复速度，选用<code>RDB</code></li><li>灾难恢复选用<code>AOF</code></li><li>双保险策略，同时开启<code>RDB</code>和<code>AOF</code>，重启后，Redis优先使用<code>AOF</code>来恢复数据，降低丢失数据的量</li></ul></li></ul><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>为什么要有事务：Redis执行指令过程中，多条连续执行的指令被干扰、打断、插队</p><p>Redis事务就是一个命令执行的队列，将一系列预定义命令包装成一个整体（一个队列）。当执行时，一次性按照添加顺序依次执行，中间不会被打断或干扰。</p><p>一个队伍中，一次性、顺序性、排他性的执行一系列命令</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul><li>开启事务：<code>multi</code><ul><li>作用：设定事务的开启位置，此指令执行后，后续的所有指令均加入到事务中</li></ul></li><li>执行事务：<code>exec</code><ul><li>作用：设定事务的结束位置，同时执行事务。与<code>multi</code>成对出现，成对使用</li></ul></li><li>取消事务：<code>discard</code><ul><li>作用：终止当前事务的定义，发生在<code>multi</code>之后，<code>exex</code>之前</li></ul></li></ul><p><strong>注意：加入事务的命令暂时进入到任务队列中，并没有立即执行，只有执行<code>exec</code>命令才开始执行</strong></p><h2 id="事务的工作流程"><a href="#事务的工作流程" class="headerlink" title="事务的工作流程"></a>事务的工作流程</h2><p><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.1hs8heaien.webp" alt="image.png"></p><h2 id="事务的注意事项"><a href="#事务的注意事项" class="headerlink" title="事务的注意事项"></a>事务的注意事项</h2><ul><li>定义事务的过程中，命令格式输入错误怎么办？<ul><li>语法错误：指命令书写格式有误</li><li>处理结果：如果定义的事务中所包含存在语法错误，整体事务中所有命令均不会执行，包括那些语法正确的命令</li></ul></li><li>定义事务的过程中，命令执行出现错误怎么办？<ul><li>运行错误：指命令格式正确，但是无法正确的执行，例如对<code>list</code>进行<code>incr</code>操作</li><li>处理结果：能够正确运行的命令会执行，运行错误的命令不会执行</li></ul></li></ul><p><strong>注意：已经执行的命令对应的数据不会自动回滚，需要程序员自己在代码中实现回滚</strong></p><ul><li>手动进行事务回滚（无奈之举才用）<ul><li>记录操作过程中被影响的数据之前的状态<ul><li>单数据：<code>string</code></li><li>多数据：<code>hash</code>、<code>list</code>、<code>set</code>、<code>zset</code></li></ul></li><li>设置指令恢复所有的被修改的项<ul><li>单数据：直接<code>set</code>（注意周边属性，例如时效）</li><li>多数据：修改对应值或整体克隆复制</li></ul></li></ul></li></ul><h2 id="锁-–-基于特定条件的事务执行"><a href="#锁-–-基于特定条件的事务执行" class="headerlink" title="锁 – 基于特定条件的事务执行"></a>锁 – 基于特定条件的事务执行</h2><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><h4 id="业务分析"><a href="#业务分析" class="headerlink" title="业务分析"></a>业务分析</h4><ul><li><p>多个客户端都有可能同时操作同一组数据，并且该数据一旦被操作修改后，将不适用于继续操作</p></li><li><p>在操作之前锁定要操作的数据，一旦发生变化，终止当前操作</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4></li><li><p>对<code>key</code>添加监视锁，在执行<code>exec</code>前如果<code>key</code>发生了变化，终止事务执行：<code>watch key1 [key2...]</code></p></li><li><p>取消对所有<code>key</code>的监视：<code>unwatch</code></p></li><li><p><code>watch</code>命令在事务开启之前，然后在执行事务的<code>exec</code>的时候，会判断<code>watch</code>的值是否已经发生变化，如果没有则正常事务执行，如果发生了变化，则操作<code>watch</code>的命令失败</p></li></ul><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="业务分析-1"><a href="#业务分析-1" class="headerlink" title="业务分析"></a>业务分析</h4><ul><li><p>使用<code>watch</code>监控一个<code>key</code>有没有改变已经不能解决问题，此处要监控的是具体数据</p></li><li><p>虽然Redis是单线程，但是多个客户对同一个数据同时进行操作时，如何避免不被同时修改</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4></li><li><p>设置<code>setnx</code>设置一个公共锁：<code>setnx lock-key value</code></p><ul><li>利用<code>setnx</code>命令的返回值特征，有值则返回设置失败，无值则返回设置成功</li><li>对于返回设置成功的，拥有控制权，进行下一步的具体业务操作</li><li>对于返回设置失败的，不具有控制权，排队或等待</li><li>操作完毕通过<code>del</code>操作释放锁</li></ul></li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><h4 id="业务分析-2"><a href="#业务分析-2" class="headerlink" title="业务分析"></a>业务分析</h4><ul><li><p>由于锁操作由用户控制加锁解锁，必定会存在加所有未解锁的风险</p></li><li><p>需要解锁操作不能仅依赖用户控制，系统级别要能给出对应的保底处理方案</p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4></li><li><p>使用<code>expire</code>为锁<code>key</code>添加时间限定，到时不释放锁，放弃锁</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expire lock-key second  </span><br><span class="line">pexpire lock-key milliseconds  </span><br></pre></td></tr></table></figure></li><li><p>由于操作通常都是微妙或毫秒级，因此该锁定时间不宜设置过长，具体时间需要业务测试后确定</p><ul><li>例如：持有锁的操作最长执行时间127ms，最短执行时间7ms</li><li>测试百万次最长执行时间对应命令的最大耗时，测试百万次网络延迟平均耗时</li><li>锁时间设定推荐：<code>最大耗时*120% + 平均网络延迟*100%</code></li><li>如果业务最大耗时&lt;&lt;网络平均耗时，通常为2个数量级，取其中单个耗时较长即可</li></ul></li></ul><h1 id="删除策略"><a href="#删除策略" class="headerlink" title="删除策略"></a>删除策略</h1><h2 id="Redis中的数据特征"><a href="#Redis中的数据特征" class="headerlink" title="Redis中的数据特征"></a>Redis中的数据特征</h2><ul><li>Redis是一种内存及数据库，所有数据均存放在内存中，内存中的数据可以通过<code>TTL</code>指令获取其状态<ul><li>XX：具有时效性的数据</li><li>-1：永久有效的数据</li><li>-2：已经过期的数据 或 被删除的数据 或 未定义的数据</li></ul></li></ul><p>数据删除策略的目的：在内存占用与CPU占用之间寻找一种平衡，顾此失彼都会造成整体Redis性能的下降，甚至引发服务器宕机或内存泄露</p><h2 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h2><p>创建一个定时器，当<code>key</code>设置由过期时间，且过期时间到达时，由定时器立即执行对键的删除操作</p><ul><li>优点：解决内存，到时就删除，快速释放掉不必要的内存占用</li><li>缺点：CPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响Redis服务器响应时间和指令吞吐量</li><li>总结：用处理器性能换存储空间（拿时间换空间）</li></ul><h2 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h2><p>数据到达过期时间，不做处理，等下次访问该数据时再进行删除，并返回不存在</p><ul><li>优点：节约CPU性能，发现必须删除的时候才删除</li><li>缺点：内存压力很大，出现长期占用内存的数据</li><li>总结：用存储空间换取处理器性能（拿空间换时间）</li></ul><h2 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h2><ul><li><p>Redis启动服务器初始化时，读取配置server.hz的值，默认为10</p></li><li><p>每秒执行server.hz次<code>serverCron()-&gt;databaseCron()-&gt;activeExpireCycle()</code></p></li><li><p><code>activeExpireCycle()</code>对每个<code>expires[*]</code>逐一进行检测，每次执行250ms&#x2F;server.hz</p></li><li><p>对某个<code>expires[*]</code>检测时，随机挑选W个key检测</p><ul><li>如果key超时，删除key</li><li>如果一轮中删除的key的数量 &gt; W*25%，则循环该过程</li><li>如果一轮中删除的key的数量 &lt;&#x3D; W_25%，检查下一个`expires[_]`，db0-db15循环</li><li>W取值&#x3D;ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP属性值</li></ul></li><li><p>参数<code>current_db</code>用来记录<code>activeExpireCycle()</code>进入那个<code>expires[*]</code>执行</p></li><li><p>周期性轮询Redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度</p></li><li><p>特点1：CPU性能占用设置由峰值，检测频度可自定义设置</p></li><li><p>特点2：内存压力不是很大，长期占用内存的冷数据会被持续清理</p></li><li><p>总结：周期性抽查检查空间（随机抽查，重点抽查）</p></li></ul><h2 id="删除策略比对"><a href="#删除策略比对" class="headerlink" title="删除策略比对"></a>删除策略比对</h2><table><thead><tr><th>删除策略</th><th>特点1</th><th>特点2</th><th>总结</th></tr></thead><tbody><tr><td>定期删除</td><td>节约内存，无占用</td><td>部分时段占用CPU资源，频度高</td><td>拿时间换空间</td></tr><tr><td>惰性删除</td><td>内存占用严重</td><td>延时执行，CPU利用率高</td><td>拿空间换时间</td></tr><tr><td>定期删除</td><td>内存定期随机清理</td><td>每秒花费固定的CPU资源维护内存</td><td>随机抽查，重点抽查</td></tr></tbody></table><h2 id="逐出算法"><a href="#逐出算法" class="headerlink" title="逐出算法"></a>逐出算法</h2><h3 id="新数据进入检测"><a href="#新数据进入检测" class="headerlink" title="新数据进入检测"></a>新数据进入检测</h3><ul><li><p>当新数据进入Redis时，如果内存不足怎么办？</p><ul><li><p>Redis使用内存存储数据，在执行每一个命令前，会调用<code>freeMemoryIfNeeded()</code>检测内存是否充足，如果内存不满足新加入数据的最低存储要求，Redis要临时删除一些数据为当前指令清除存储空间。清理数据的策略称为<strong>逐出算法</strong></p></li><li><p>注意：逐出算法的过程不是100%能够清理出足够的可使用的内存空间，如果不成功则反复执行。当对所有数据尝试完毕后，如果不能达到内存清理的要求，将出现错误信息</p><h3 id="影响数据逐出的相关设置"><a href="#影响数据逐出的相关设置" class="headerlink" title="影响数据逐出的相关设置"></a>影响数据逐出的相关设置</h3></li></ul></li><li><p>最大可使用内存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory  </span><br></pre></td></tr></table></figure><p>占用物理内存的比例，默认值为0，表示不限制。生产环境中根据需求设定，通常设置在50%以上。</p></li><li><p>每次选取待删除数据的个数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-samples  </span><br></pre></td></tr></table></figure><p>选取数据时并不会全库扫描，导致严重的性能消耗，降低读写性能。因此采用随机获取数据的方式作为待检测删除数据</p></li><li><p>删除策略</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-policy  </span><br></pre></td></tr></table></figure><p>达到最大内存后的，对被挑选出来的数据进行删除的策略</p></li><li><p>检测易失数据（可能会过期的数据集<code>server.db[i].expires</code>）</p><ol><li><code>volatile-lru</code>：挑选最近最少使用的数据淘汰（推荐）</li><li><code>volatile-lfu</code>：挑选最近使用次数最少的数据淘汰</li><li><code>volatile-ttl</code>：挑选将要过期的数据淘汰</li><li><code>volatile-random</code>：任意选择数据淘汰</li></ol></li><li><p>检测全库数据（所有数据集<code>server.db[i].dict</code>)</p><ol><li><code>allkeys-lru</code>：挑选最近最少使用的数据淘汰</li><li><code>allkeys-lfu</code>：挑选最近使用次数最少的数据淘汰</li><li><code>allkeys-random</code>：任意选择数据淘汰</li></ol></li><li><p>不使用数据驱逐</p><ul><li><code>no-enviction</code>(不驱逐)：禁止驱逐数据(redis4.0中默认策略)，会引发错误OOM(Out Of Memory)</li></ul></li><li><p>配置方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory-policy volatile-lru  </span><br></pre></td></tr></table></figure><h3 id="数据逐出策略配置依据"><a href="#数据逐出策略配置依据" class="headerlink" title="数据逐出策略配置依据"></a>数据逐出策略配置依据</h3></li><li><p>使用<code>INFO</code>命令输出监控信息，查询缓存<code>hit</code>和<code>miss</code>的次数，根据业务需求调优Redis配置</p></li></ul><h1 id="Redis-Conf"><a href="#Redis-Conf" class="headerlink" title="Redis.Conf"></a>Redis.Conf</h1><h2 id="服务器基础配置"><a href="#服务器基础配置" class="headerlink" title="服务器基础配置"></a>服务器基础配置</h2><ul><li>设置服务器以守护进程的方式运行：<code>daemonize yes|no</code></li><li>绑定主机地址：<code>bind 127.0.0.1</code></li><li>设置服务器端口号：<code>port 6379</code></li><li>设置数据库数量：<code>databases 16</code></li></ul><h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><ul><li>设置服务器以指定日志记录级别：<code>loglevel debug|verbose|notice|warning</code></li><li>日志记录文件名：<code>logfile 端口号.log</code></li></ul><p><strong>注意：日志级别开发期设置为<code>verbose</code>，生产环境中配置为<code>notice</code>，简化日志输出量，降低写日志IO的频度</strong></p><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><ul><li><p>设置同一时间最大客户端连接数，默认无限制。当客户端连接到达上限，Redis会关闭新的连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxclient 0  </span><br></pre></td></tr></table></figure></li><li><p>客户端限制等待最长时长，达到最大值后关闭连接，如需要关闭该功能，设置为0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">timeout</span> 300  </span><br></pre></td></tr></table></figure><h2 id="多服务器快捷配置"><a href="#多服务器快捷配置" class="headerlink" title="多服务器快捷配置"></a>多服务器快捷配置</h2></li><li><p>导入并加载指定配置文件信息，用于快速创建Redis公共配置较多的Redis实例配置文件，便于维护</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include /path/server-端口号.conf  </span><br></pre></td></tr></table></figure></li></ul><h1 id="高级数据类型"><a href="#高级数据类型" class="headerlink" title="高级数据类型"></a>高级数据类型</h1><h2 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h2><ul><li><p>获取指定key对应偏移量上的bit值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getbit key offset  </span><br></pre></td></tr></table></figure></li><li><p>设置指定key对应偏移量上的bit值，value只能时1或0</p><p>1  </p><p>setbit key offset value  </p></li><li><p>对指定key按位进行交、并、非、异或操作，并将结果保存到destKey中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bitop op destKey key1 \[key2...\]  </span><br><span class="line">// and：交  </span><br><span class="line">// or：并  </span><br><span class="line">// not：非  </span><br><span class="line">// xor：异或  </span><br></pre></td></tr></table></figure></li><li><p>统计指定key中1的数量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcount key \[start end\]  </span><br></pre></td></tr></table></figure></li></ul><h2 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h2><ul><li><p>基数：数据集去重后元素个数</p></li><li><p>HyperLogLog是用来做基数统计的，运用了LogLog的算法</p></li><li><p>添加数据：<code>pfadd key element [element...]</code></p></li><li><p>统计数据：<code>pfcount key [key...]</code></p></li><li><p>合并数据：<code>pfmerge destKey sourceKey [sourceKey...]</code></p></li></ul><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>只用于进行基数统计，不是集合，不保存数据，只记录数量而不是具体数量</li><li>核心是基数估计算法，最终数值存在一定误差</li><li>误差范围：基数估计的结果是一个带有0.81%标准错误的近似值</li><li>耗空间极小，每个hyperloglog key占用了12K的内存用于标记基数</li><li><code>pfadd</code>命令不是一次性分配12K内存使用，会随着基数的增加内存主键增大</li><li><code>pfmerge</code>命令合并后占用的存储空间为12K，无论合并之前数据量多大</li></ul><h2 id="GEO"><a href="#GEO" class="headerlink" title="GEO"></a>GEO</h2><ul><li><p>存放地理位置的数据类型</p><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3></li><li><p>添加坐标点：<code>geoadd key longitude latitude member [longitude latitude member...]</code></p></li><li><p>获取坐标点：<code>geopos key member [member...]</code></p></li><li><p>计算坐标点距离：<code>getdist key member1 member2 [unit]</code>(unit是单位，<code>m=米 km=千米</code>)</p></li><li><p>根据坐标求范围内的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">georadius key longitude latitude redius m|km|ft|mi \[withcoord\] \[withdist\] \[withhash\] \[count count\]  </span><br></pre></td></tr></table></figure></li><li><p>根据点求范围内的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">georadiusbymember key member radius m|km|ft|mi \[withcoord\] \[withdist\] \[withhash\] \[count count\]  </span><br></pre></td></tr></table></figure></li><li><p>获取指定点对应的坐标hash值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geohash key member \[member...\]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础</title>
      <link href="/posts/fe29e710.html"/>
      <url>/posts/fe29e710.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><!-- - [概念](#概念)  - [简介](#简介)  - [特征](#特征)  - [应用](#应用)- [数据类型](#数据类型)  - [string](#string)    - [`set`与`mset`](#set与mset)    - [扩展操作](#扩展操作)      - [业务场景A](#业务场景a)      - [业务场景B](#业务场景b)      - [业务场景C](#业务场景c)    - [key的设置约定](#key的设置约定)    - [注意事项](#注意事项)  - [hash](#hash)    - [基本操作](#基本操作)    - [扩展操作](#扩展操作-1)    - [应用场景](#应用场景)      - [业务场景A](#业务场景a-1)      - [业务场景B](#业务场景b-1)    - [string存对象(json)和hash寸对象](#string存对象json和hash寸对象)  - [list](#list)    - [基础操作](#基础操作)    - [扩展操作](#扩展操作-2)    - [应用场景](#应用场景-1)      - [业务场景A](#业务场景a-2)    - [注意事项](#注意事项-1)    - [比较典型的业务场景](#比较典型的业务场景)  - [set](#set)    - [基本操作](#基本操作-1)    - [扩展操作](#扩展操作-3)    - [应用场景](#应用场景-2)      - [业务场景A](#业务场景a-3)      - [业务场景B](#业务场景b-2)      - [业务场景C](#业务场景c-1)      - [业务场景D](#业务场景d)      - [业务场景E](#业务场景e)    - [注意事项](#注意事项-2)  - [sorted\_set](#sorted_set)    - [基础操作](#基础操作-1)    - [应用场景](#应用场景-3)      - [业务场景A](#业务场景a-4)      - [业务场景B](#业务场景b-3)      - [业务场景C](#业务场景c-2)    - [注意事项](#注意事项-3)- [实践案例](#实践案例)  - [业务场景A](#业务场景a-5)  - [业务场景B](#业务场景b-4)- [key通用操作](#key通用操作)  - [key基本操作](#key基本操作)  - [key的时效性控制](#key的时效性控制)  - [key的其他操作](#key的其他操作)- [数据库通用操作](#数据库通用操作)  - [key的重复问题](#key的重复问题)  - [基本操作](#基本操作-2)  - [其他操作](#其他操作) --><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Redis：Remote Dictionary Server，使用C语言开发的一个开源的高性能键值对(key-value)数据库</p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ol><li>数据间没有必然的关联关系</li><li>内部采用单线程机制进行工作</li><li>高性能。官方提供测试数据，50个并发执行100000个请求，读的速度是110000次&#x2F;秒，写的速度是81000次&#x2F;秒</li><li>多数据类型支持<ol><li>字符串类型 <code>string</code></li><li>列表类型 <code>list</code></li><li>散列类型 <code>hash</code></li><li>集合类型 <code>set</code></li><li>有序集合类型 <code>sorted_set</code></li></ol></li><li>持久化支持，可以进行数据灾难恢复</li></ol><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>为热点数据加速查询(主要场景)，如热点商品、热点新闻、热点资讯、推广类高访问量信息等</li><li>任务队列，如秒杀、抢购、购票排队等</li><li>即时信息查询，如排行榜、各类网站访问统计、公交到站信息、在线人数信息、设备信号等</li><li>分布式数据共享，如分布式集群架构中的session分离</li><li>消息队列</li><li>分布式锁</li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><ul><li><p>存储的数据：单个数据，最简单的数据存储类型，也是最常用的数据存储类型</p></li><li><p>存储数据的格式：一个存储空间保存一个数据</p></li><li><p>存储内容：通常使用字符串，如果字符串以整数的形式展示，可以作为数字操作使用</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3></li><li><p>添加&#x2F;修改数据：<code>set key value</code></p></li><li><p>获取数据：<code>get key</code></p></li><li><p>删除数据：<code>del key</code></p></li><li><p>添加&#x2F;修改多个数据：<code>mset key1 value1 key2 value2 ...</code></p></li><li><p>获取多个数据：<code>mge key1 key2 ...</code></p></li><li><p>获取数据字符串个数(字符串长度)：<code>strlen key</code></p></li><li><p>追加信息到原始信息候补(如果原始信息存在就追加，否则新建)：<code>append key value</code></p></li></ul><h3 id="set与mset"><a href="#set与mset" class="headerlink" title="set与mset"></a><code>set</code>与<code>mset</code></h3><p>需要考虑以下几个点：</p><ul><li><code>set</code>是一条指令条操作一条数据，<code>mset</code>是一条指令操作多条记录。<strong>指令的传输和响应都需要耗时</strong></li><li>redis是单线程执行指令，在执行指令的时候需要耗时，如果<code>mset</code>包含的数据太多，<strong>会阻塞redis</strong></li><li>所以：一般少量数据两者影响不大，大量数据分割成合适的大小，再多次使用<code>mset</code>，这样能减少指令传输耗时和减少redis阻塞时间</li></ul><h3 id="扩展操作"><a href="#扩展操作" class="headerlink" title="扩展操作"></a>扩展操作</h3><h4 id="业务场景A"><a href="#业务场景A" class="headerlink" title="业务场景A"></a>业务场景A</h4><p>大型企业级应用中，分表操作时基本操作，使用多张表存储同类型数据，但是对应的主键id必须保证统一性，不能重复。Oracle数据库具有sequence设定，可以解决该问题，但是MySql数据库并不具有类似的机制，怎么解决？</p><p><strong>解决方案</strong></p><ul><li><p>设置数值数据增加指定范围的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">incr key  </span><br><span class="line">incrby key increment  </span><br><span class="line">incrbyfloat ket increment </span><br></pre></td></tr></table></figure></li><li><p>设置数值数据减少指定范围的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">decr key  </span><br><span class="line">decr key increment  </span><br></pre></td></tr></table></figure><p>string作为数值操作</p></li><li><p>string在redis内部存储默认就是一个字符串，当遇到增减类操作incr、decr时会转成数值型进行计算</p></li><li><p>redis所有的操作都是原子性的，采用单线程处理所有业务，命令是一个一个执行的，因此无需考虑并发带来的数据影响</p></li><li><p>注意：按数值进行操作的数据，如果原始数据不能转成数值，或超越了redis数值上线范围，将报错</p></li></ul><hr><h4 id="业务场景B"><a href="#业务场景B" class="headerlink" title="业务场景B"></a>业务场景B</h4><p>活动海选投票，只能通过微信投票，每个微信号每4小时只能投1票。</p><p>电商商家开启热门商品推荐，热门商品不能一直处于热门期，每个商品热门期持续3天，3天后自动取消热门</p><p>新闻网站会出现热点新闻，热点新闻最大的特征就是时效性，如何自动控制热点新闻的时效性</p><p><strong>解决方案</strong></p><ul><li><p>设置数据具有指定的生命周期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setex key seconds value  </span><br><span class="line">psetex key milliseconds value  </span><br></pre></td></tr></table></figure><p><strong>redis控制数据的生命周期，通过数据是否失效控制业务行为，适用于所有具有时效性限定控制的操作</strong></p></li></ul><hr><h4 id="业务场景C"><a href="#业务场景C" class="headerlink" title="业务场景C"></a>业务场景C</h4><p>主页高频访问信息显示控制，例如新浪微博大V主页显示粉丝数和微博数量</p><p><strong>解决方案</strong></p><ul><li><p>在redis中为大V用户设定用户信息，以用户主键和属性值为key，后台设定定时刷新策略即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg -&gt;  user:<span class="built_in">id</span>:544935942:fans  -&gt; 120658  </span><br><span class="line">eg -&gt;  user:<span class="built_in">id</span>:544935942:blogs -&gt; 6164  </span><br><span class="line">eg -&gt;  user:<span class="built_in">id</span>:544935942:focuss -&gt; 100  </span><br></pre></td></tr></table></figure></li><li><p>在redis中以json格式存储大V用户信息，定时刷新(也可以使用hash类型)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eg -&gt; user:<span class="built_in">id</span>:544935942 -&gt; &#123;<span class="built_in">id</span>:544935942,name:张三,fans:120658,blogs:6164,focuss:100&#125;  </span><br></pre></td></tr></table></figure></li><li><p><em>redis应用于各种结构性和非结构性高热度数据访问加速*</em></p></li></ul><h3 id="key的设置约定"><a href="#key的设置约定" class="headerlink" title="key的设置约定"></a>key的设置约定</h3><p>数据库中的热点数据key命名惯例，以<code>:</code>拼接</p><table><thead><tr><th></th><th>表名</th><th>主键名</th><th>主键值</th><th>字段名</th></tr></thead><tbody><tr><td>eg1：</td><td>order</td><td>id</td><td>20230415</td><td>name</td></tr><tr><td>eg2：</td><td>equip</td><td>id</td><td>82295157</td><td>type</td></tr><tr><td>eg3：</td><td>news</td><td>id</td><td>544935942</td><td>title</td></tr></tbody></table><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>数据操作不成功的反馈与数据正常操作之间的差异<ul><li>表示运行结果是否成功<ul><li>(integer)0 -&gt; false -&gt; 失败</li><li>(integer)1 -&gt; true -&gt; 成功</li></ul></li><li>表示运行结果值<ul><li>(integer)3 -&gt; 表示3个</li><li>(integer)1 -&gt; 表示1个</li></ul></li></ul></li><li>数据未获取到<ul><li>(nill) -&gt; null</li></ul></li><li>数据最大存储量<ul><li>512MB</li></ul></li><li>数值计算有最大范围</li></ul><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><ul><li>新的存储需求：对一系列存储的数据进行编组，方便管理，典型应用存储对象信息</li><li>需要的存储结构：一个存储空间保存多个键值对数据</li><li>hash存储结构优化<ul><li>如果field数量较少，存储结构优化为类数组结构</li><li>如果field数量较多，存储结构使用HashMap结构</li></ul></li></ul><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>添加&#x2F;修改单条数据：<code>hset key field value</code></li><li>获取指定field数据：<code>hget key field</code></li><li>获取全部field数据：<code>hgetall key</code></li><li>删除数据：<code>hdel key field1 field2 ...</code></li><li>添加&#x2F;修改多条数据：<code>hmset key field1 value1 field2 value2 ...</code></li><li>获取多条数据：<code>hmget key field1 field2 ...</code></li><li>获取hash表中字段的数量：<code>hlen key</code></li><li>获取hash表中是否存在指定的字段：<code>hexists key field</code></li></ul><h3 id="扩展操作-1"><a href="#扩展操作-1" class="headerlink" title="扩展操作"></a>扩展操作</h3><ul><li><p>获取hash表中所有的字段或字段值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hkeys key  </span><br><span class="line">hvals key  </span><br></pre></td></tr></table></figure></li><li><p>设置指定字段的数值数据增加指定范围的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hincrby key field increment  </span><br><span class="line">hincrbyfloat key field increment  </span><br></pre></td></tr></table></figure><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3></li><li><p>hash类型下的value只能存储字符串，不允许存储其他数据类型，不存在嵌套现象，如果数据未获取到，对应值为nil</p></li><li><p>每个hash可以存储2的32次方-1个键值对</p></li><li><p>hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性，但hash设计初衷不是为了存储大量对象而设计的，切记不可滥用，更不可以将hash作为对象列表使用</p></li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="业务场景A-1"><a href="#业务场景A-1" class="headerlink" title="业务场景A"></a>业务场景A</h4><p>电商网站购物车设计与实现</p><p>解决方案：</p><ul><li><p>仅分析购物车的redis存储模型：添加、浏览、更改数量、删除、清空</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">用户Id -&gt; Key  </span><br><span class="line">购物车商品Id/SkuId -&gt; field  </span><br><span class="line">购物车商品数量 -&gt; value  </span><br><span class="line">  </span><br><span class="line">添加商品 -&gt; hset  </span><br><span class="line">修改数量 -&gt; hset/hincrby  </span><br><span class="line">删除商品 -&gt; hdel  </span><br><span class="line">商品条目数 -&gt; hlen  </span><br><span class="line">商品总数 -&gt; <span class="built_in">sum</span>(hvals)  </span><br><span class="line">浏览商品 -&gt; hgetall  </span><br></pre></td></tr></table></figure><ul><li><p>按照上述的操作方式，可以发现redis中只存储了购物车的商品id和商品数量，并未存储商品信息，这样在查询整个购物车的时候，还需要二次查询商品信息，所以还需要做改进，可以将商品提取到单独一个hash中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">key -&gt; shoppingcart:product.info  </span><br><span class="line">field -&gt; 商品Id:info  </span><br><span class="line">value -&gt; 商品信息  </span><br><span class="line">  </span><br><span class="line">当用户添加商品到购物车的时候，通过 hsetnx key field value将商品存入shoppingcart:product.info，这样做可以避免重复添加商品到<span class="built_in">hash</span>中  </span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="业务场景B-1"><a href="#业务场景B-1" class="headerlink" title="业务场景B"></a>业务场景B</h4><p>销售手机充值卡的商家对移动、联通、电信的30元、50元、100元的商品退出抢购活动，每种商品抢购上线1000长</p><p>解决方案：</p><ul><li>以商家id作为key</li><li>将参与抢购的商品id作为field</li><li>将参与抢购的商品数量作为对应的value</li><li>抢购时使用降值得方式控制产品数量</li></ul><h3 id="string存对象-json-和hash寸对象"><a href="#string存对象-json-和hash寸对象" class="headerlink" title="string存对象(json)和hash寸对象"></a>string存对象(json)和hash寸对象</h3><ul><li><code>string</code>存对象讲究整体性，一次性存一次性取，讲究读为主</li><li><code>hash</code>存对象，用<code>field</code>把属性隔离开，主要讲究得是更新操作比较有灵活性，讲究写为主</li><li>说通俗一点，当一个对象不需要频繁修改，只是存储之后查出来展示，那么用<code>string</code>来存是可以的，如果一个对象经常需要对各个属性进行修改，那么就使用<code>hash</code>，<code>hash</code>可以修改指定<code>field</code>的值</li></ul><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><ul><li>数据存储需求：存储多个数据，并对数据进行存储空间的顺粗进行区分</li><li>需要的存储结构：一个存储空间保存多个数据，且通过数据可以体现进入顺序</li><li>list类型：保存多个数据，底层使用双向链表存储结构实现</li></ul><p>顺序表（查询快，增删慢），链表（查询慢，增删快），双向链表<br><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.8ada3v182u.webp" alt="顺序表-链表-双向链表.png"></p><h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><ul><li><p>添加&#x2F;修改数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lpush key value1 value2 ...  </span><br><span class="line">rpush key value1 value2 ...  </span><br></pre></td></tr></table></figure></li><li><p>获取数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lrange key start stop  (lrange key 0 -1 表示查询整个列表)  </span><br><span class="line">lindex key index  </span><br><span class="line">llen key  </span><br></pre></td></tr></table></figure></li><li><p>获取并移除数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lpop key  </span><br><span class="line">rpop key  </span><br></pre></td></tr></table></figure></li></ul><h3 id="扩展操作-2"><a href="#扩展操作-2" class="headerlink" title="扩展操作"></a>扩展操作</h3><ul><li><p>规定时间内获取并移除数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">blpop key1 key2 ... <span class="built_in">timeout</span>  </span><br><span class="line">brpop key1 key2 ... <span class="built_in">timeout</span>  </span><br></pre></td></tr></table></figure><p>就是当list没数据的时候，执行上面的命令会阻塞，等有其他客户端往上面监听的list添加数据，随后被取出，timeout为超时时间，单位为秒</p></li></ul><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="业务场景A-2"><a href="#业务场景A-2" class="headerlink" title="业务场景A"></a>业务场景A</h4><p>微信朋友圈点赞，要求按点赞顺序显示点赞好友信息，如果取消点赞，则移除对应好友信息</p><p>解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">朋友圈Id -&gt; key -&gt; 举例 -&gt; a01  </span><br><span class="line">用户点赞 -&gt; rpush -&gt; 举例 -&gt; rpush a01 zhangsan lisi wangwu  </span><br><span class="line">展示 -&gt; lrange key start stop -&gt; 举例 -&gt; lrang a01 0 -1  </span><br><span class="line">取消点赞 -&gt; lrem key count value -&gt; 举例 -&gt; lrem a01 1 lisi  </span><br></pre></td></tr></table></figure><h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><code>list</code>中保存的数据都是string类型，数据总容量也是有限的，最多2的32次方-1个元素</li><li><code>list</code>具有索引的概念，但是操作数据时通常以队列的形式进行入队出队操作，或以栈的形式进行入栈出栈操作</li><li>获取全部数据操作结束索引设置为-1</li><li>list可以对数据进行分页操作，通常第一页的信息来自list，第2页及更多的信息通过数据库的形式加载</li></ul><h3 id="比较典型的业务场景"><a href="#比较典型的业务场景" class="headerlink" title="比较典型的业务场景"></a>比较典型的业务场景</h3><ul><li>twitter、微博中个人用户的关注列表需要按照用户的关注顺序进行展示，粉丝列表需要将最近关注的粉丝列在前面</li><li>新闻、资讯类网站将最新的新闻或咨询按照发生的时间顺序展示</li><li>企业运营过程中，系统将产出大量的运营数据，保障堕胎服务器操作日志的统一顺序输出</li></ul><p>上面的解决方案</p><ul><li>依赖list的数据具有顺序的特征对信息进行管理</li><li>使用栈模型解决最新消息的问题</li><li>使用队列模式解决多路信息汇总合并的问题</li></ul><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><ul><li>存储需求：存储大量的数据，在查询方便提供更高的效率</li><li>需要的存储结构：能够保存大量的数据，高效的内部存储机制，便于查询</li><li>set类型：与hash存储结构完全相同，仅存储键，不存储值(nil)，并且值时不允许重复的</li></ul><h3 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>添加数据：<code>sadd key member1 member2 ...</code></li><li>获取全部数据：<code>smembers key</code></li><li>删除数据：<code>srem key member1 member2 ...</code></li><li>获取集合数据总量：<code>scard key</code></li><li>判断集合中是否包含指定数据：<code>sismember key member</code></li><li>随机获取集合中指定数量的数据：<code>srandmember key [count]</code></li><li>随机获取集合中某个数据并将该数据移出集合：<code>spop key ...</code></li></ul><h3 id="扩展操作-3"><a href="#扩展操作-3" class="headerlink" title="扩展操作"></a>扩展操作</h3><ul><li><p>求两个集合的交、并、差集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sinter key1 key2  </span><br><span class="line">sunion key1 key2  </span><br><span class="line">sdiff key1 key2  </span><br></pre></td></tr></table></figure></li><li><p>求两个集合的交、并、差集并存储到指定集合中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sinterstore destination key1 key2  </span><br><span class="line">sunionstore destination key1 key2  </span><br><span class="line">sdiffstore destination key1 key2  </span><br></pre></td></tr></table></figure></li><li><p>将指定数据从原始集合中移动到目标集合中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smove <span class="built_in">source</span> destination member  </span><br></pre></td></tr></table></figure><p><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.2dopwukw63.webp" alt="交并差.png"></p></li></ul><h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="业务场景A-3"><a href="#业务场景A-3" class="headerlink" title="业务场景A"></a>业务场景A</h4><p>每位用户首次使用今日头条会设置3项爱好的内容，但是后期为了增加用户的活跃度、兴趣点，必须让用户对其他信息类别主键产生兴趣，增加客户留存都，该如何实现？</p><p>业务分析</p><ul><li>系统分析出各个分类的最新或最热点信息条目并组织成set集合</li><li>随机挑选其中部分信息</li><li>配合用户关注信息分类中的热点信息组成展示的全信息集合</li></ul><p><strong>redis应用于随机推荐类信息检索，例如热点歌单推荐，热点新闻推荐，热点旅游线路，应用APP推荐，大V推荐等</strong></p><h4 id="业务场景B-2"><a href="#业务场景B-2" class="headerlink" title="业务场景B"></a>业务场景B</h4><p>脉脉之类的APP中共同好友的功能，这里通过两个set进行交并差集的运算可以满足需求</p><ul><li>redis应用于同类信息的关联搜索，二度关联搜索，深度关联搜索</li><li>显示共同关注（交集）（一度）</li><li>显示共同好友（交集）（一度）</li><li>由用户A出发，获取到好友用户B的好友信息列表（一度）</li><li>由用户A出发，获取到好友用户B的购物清单列表（二度）</li><li>由用户A出发，获取到好友用户B的游戏充值列表（二度）</li></ul><h4 id="业务场景C-1"><a href="#业务场景C-1" class="headerlink" title="业务场景C"></a>业务场景C</h4><p>集团公司共具有12000名员工，内部OA系统中具有700多个角色，3000多个业务操作，23000多中数据，每个员工具有一个或多个角色，如何快速进行业务操作的权限校验？</p><p>解决思路：</p><ul><li>依赖<code>set</code>集合数据不重复的特征，依赖<code>set</code>集合<code>hash</code>存储结构特征完成数据过滤与快速查询</li><li>根据用户id获取用户所有角色</li><li>根据用户所有角色获取用户所有操作权限放入set集合</li><li>根据用户所有角色获取用户所有数据权限放入set集合</li></ul><h4 id="业务场景D"><a href="#业务场景D" class="headerlink" title="业务场景D"></a>业务场景D</h4><p>统计网站的PV、UV、IP</p><p>解决思路：</p><ul><li>利用<code>set</code>集合的数据去重特转增，记录各种访问数据</li><li>建立<code>string</code>类型数据，利用<code>incr</code>统计日访问量</li><li>建立<code>set</code>模型，记录不同cookie数量(UV)</li><li>建立<code>set</code>模型，记录不同IP数量(IP)</li></ul><h4 id="业务场景E"><a href="#业务场景E" class="headerlink" title="业务场景E"></a>业务场景E</h4><p>黑白名单</p><p>解决思路：</p><ul><li>基于经营战略设定问题用户发现、鉴别规则</li><li>周期性更新满足规则的用户黑名单，加入<code>set</code>集合</li><li>用户行为信息达到后于黑名单进行比对，确认行为去向</li><li>黑名单过滤IP地址：应用于开放游客访问权限的信息源</li><li>黑名单过滤设备信息：应用于限定访问设备的信息源</li><li>黑名单过滤用户：应用于基于访问权限的信息源</li></ul><h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><code>set</code>类型不允许数据重复，如果添加的数据在<code>set</code>中已经存在，将只保留一份</li><li><code>set</code>虽然于<code>hash</code>的存储结构相同，但是无法启用<code>hash</code>中存储值的空间</li></ul><h2 id="sorted-set"><a href="#sorted-set" class="headerlink" title="sorted_set"></a>sorted_set</h2><ul><li>存储需求：数据排序有利于数据的有效展示，需要提供一种可以根据自身特征进行排序的方式</li><li>需要的存储结构：新的存储模型，可以保存可排序的数据</li><li>sorted_set类型：在set的存储结构上添加可排序字段</li></ul><h3 id="基础操作-1"><a href="#基础操作-1" class="headerlink" title="基础操作"></a>基础操作</h3><ul><li><p>添加数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd key score1 member \[score2 member\] ...  </span><br></pre></td></tr></table></figure></li><li><p>获取全部数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrang key start stop \[WITHSCORES\]  </span><br><span class="line">zrevrange key start stop \[WITHSCORES\]  </span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrem key member \[member ...\]  </span><br></pre></td></tr></table></figure></li><li><p>按条件获取数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrangebyscore key min max \[WITHSCORES\] \[LIMIT\]  </span><br><span class="line">zrevrangebyscore key max min \[WITHSCORES\]  </span><br></pre></td></tr></table></figure></li><li><p>按条件删除数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zremrangebyrank key start stop  </span><br><span class="line">zremrangebyscore key min max  </span><br></pre></td></tr></table></figure></li><li><p>获取集合数据总量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zcard key  </span><br><span class="line">zcard key min max  </span><br></pre></td></tr></table></figure></li><li><p>集合交、并操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zinterstore destination numkeys key \[key ...\]  </span><br><span class="line">zunionstore destination numkeys key \[key ...\]  </span><br></pre></td></tr></table></figure></li><li><p>获取数据对应的索引(排名)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zrank key memeber  </span><br><span class="line">zrevrank key member  </span><br></pre></td></tr></table></figure></li><li><p>score值获取与修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zscore key member  </span><br><span class="line">zincrby key increment member  </span><br></pre></td></tr></table></figure></li></ul><p><strong>注意：</strong></p><ul><li>min与max用于限定搜索查询的条件</li><li>start与stop用于限定查询访问，作用于索引，表示开始和结束索引</li><li>offset与count用于限定查询范围，作用于查询结果，表示开始位置和数据总量</li></ul><h3 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h3><h4 id="业务场景A-4"><a href="#业务场景A-4" class="headerlink" title="业务场景A"></a>业务场景A</h4><p>海选投票、各种TopN排行榜、聊天室活跃度统计、游戏好友亲密度</p><p>解决方案：通过获取索引</p><h4 id="业务场景B-3"><a href="#业务场景B-3" class="headerlink" title="业务场景B"></a>业务场景B</h4><p>体验VIP功能，当体验VIP到期后，如何有效管理此类信息，即便对于正式VIP用户也应该存在对应的管理方式。网站定期开启投票、讨论、限期进行，逾期作废，如何有效管理此类过期信息</p><p>解决方案：</p><ul><li>对基于时间线限定的任务处理，将处理时间记录为<code>score</code>值，利用顺序功能分区处理的先后顺序</li><li>记录下一个要处理的时间，当到期后处理对应任务，移除redis中的记录，并记录下一个要处理的时间</li><li>当新任务加入时，判断并更新当前下一个要处理的任务时间</li><li>为提升<code>sorted_set</code>的性能，通常将任务根据特征存储成若干个<code>sorted_set</code>，例如1小时内、1天内、周内、月内、季内、年内等，操作时逐级提升，将即将操作的若干任务纳入到1小时内处理的队伍中</li></ul><h4 id="业务场景C-2"><a href="#业务场景C-2" class="headerlink" title="业务场景C"></a>业务场景C</h4><p>任务&#x2F;消息权重设定应用：当任务或消息待处理，形成了任务队列或消息队列时，对于高优先级的任务要保障对其优先处理</p><p>解决方案：</p><ul><li>对于带权重的任务，优先处理权重高的任务，采用score记录权重即可</li></ul><h3 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><code>score</code>保存的数据存储空间是64位</li><li><code>score</code>保存的数据也可以是个双精度的double值，基于双精度浮点数的特征，可能会丢失精度，使用时要慎重</li><li><code>sorted_set</code>底层存储还是基于<code>set</code>结构的，因此数据不能重复，如果重复添加相同的数据，<code>score</code>值将被反复覆盖，保留最后一次修改的结果</li></ul><h1 id="实践案例"><a href="#实践案例" class="headerlink" title="实践案例"></a>实践案例</h1><h2 id="业务场景A-5"><a href="#业务场景A-5" class="headerlink" title="业务场景A"></a>业务场景A</h2><p>人工智能领域的语义识别与自动对话将是未来服务业机器人应答呼叫体系中的重要技术，百度自研用户评价语义识别服务，免费开放给企业试用，同时训练百度自己的模型。现对试用用户的使用行为进行限速，限制每个用户每分钟最多发起10次调用</p><p>解决方案：</p><ul><li>设计计数器，记录调用次数，用于控制业务执行次数，以用户id作为key，使用次数为value</li><li>在调用前获取次数，判断是否超过限定次数<ul><li>不超过次数的情况下，每次调用技术+1</li><li>超过次数则业务调用失败，计数-1</li></ul></li><li>为计时器设置生命周期为指定周期，例如1秒&#x2F;分钟，自动清空周期内使用次数</li></ul><p><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.5c100ctctw.webp" alt="业务场景A.png"></p><p>解决方案改良：</p><ul><li>取消最大值的判断，利用incr操作超过最大值抛出异常的形式替代每次判断是否大于最大值</li><li>判断值是否为nil<ul><li>如果是，设置为数值的Max-次数</li><li>如果不是，计数+1</li><li>业务调用失败，计数-1</li></ul></li><li>遇到异常即+操作超过上限，视为使用达到上限</li></ul><p><img src="https://filebed.fantasyke.cn/file/blogContent/redis/image.2krxsa7crt.webp" alt="业务场景A改良.png"></p><h2 id="业务场景B-4"><a href="#业务场景B-4" class="headerlink" title="业务场景B"></a>业务场景B</h2><p>使用微信的过程中，当微信接收消息后，会默认将最近接受的消息置顶，当多个好友及关注的订阅号同时发送消息时，该顺序会不停的进行交替。同时还可以将重要的会话设置为置顶。一旦用户里离线后，再次打开微信时，消息该按照什么样的顺序显示？</p><p>解决方案：</p><ul><li>依赖<code>list</code>的数据具有顺序的特征对消息进行管理，将<code>list</code>结构作为栈使用</li><li>对指定与普通会话分别创建独立的<code>list</code>分别管理</li><li>当某个<code>list</code>中接收到用户消息后，将消息发送方的<code>id</code>从<code>list</code>的一侧加入<code>list</code>(此处设定左侧)</li><li>多个<code>消息id</code>发出的消息反复入栈会出现问题，在入栈前无论是否具有当前<code>id</code>对应的消息，先删除对应<code>id</code></li><li>推送消息时先推送置顶会话<code>list</code>，再推送普通会话<code>list</code>，推送完成的<code>list</code>清除所有数据</li><li>消息的数量，也就是微信用户对话数量采用计数器的思路另行记录，伴随<code>list</code>操作同步更新</li></ul><h1 id="key通用操作"><a href="#key通用操作" class="headerlink" title="key通用操作"></a>key通用操作</h1><h2 id="key基本操作"><a href="#key基本操作" class="headerlink" title="key基本操作"></a>key基本操作</h2><ul><li>删除指定key：<code>del key</code></li><li>获取key是否存在：<code>exists key</code></li><li>获取key的类型：<code>type key</code></li></ul><h2 id="key的时效性控制"><a href="#key的时效性控制" class="headerlink" title="key的时效性控制"></a>key的时效性控制</h2><ul><li><p>为指定key设置有效期</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">expire key seconds  </span><br><span class="line">pexpire key milliseconds  </span><br><span class="line">expireat key timestamp  </span><br><span class="line">pexpireat key milliseconds-timestamp  </span><br></pre></td></tr></table></figure></li><li><p>获取key的有效实践</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ttl key  </span><br><span class="line">pttl key  </span><br></pre></td></tr></table></figure></li><li><p>切换key从时效性转换为永久性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">persist key  </span><br></pre></td></tr></table></figure><h2 id="key的查询模式"><a href="#key的查询模式" class="headerlink" title="key的查询模式"></a>key的查询模式</h2></li><li><p>查询key：<code>keys parttern</code>，查询模式规则：</p><ul><li><code>*</code>：匹配任意数量的任意符号</li><li><code>?</code>：匹配一个任意字符</li><li><code>[]</code>：匹配一个指定符号</li></ul><p>举例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">keys \* -&gt; 查询所有  </span><br><span class="line">keys it\* -&gt; 查询所有以it开头  </span><br><span class="line">keys \*save -&gt; 查询所有以save结尾  </span><br><span class="line">keys ??user -&gt; 查询所有前面两个任意字符，后面以user结尾  </span><br><span class="line">keys user:<span class="string">&quot; -&gt; 查询所有以user:开头，后面一个任意字符  </span></span><br><span class="line"><span class="string">keys u\[st\]er:1 -&gt;查询所有以u开头，以er:1结尾，中间包含字符s或t  </span></span><br></pre></td></tr></table></figure></li></ul><h2 id="key的其他操作"><a href="#key的其他操作" class="headerlink" title="key的其他操作"></a>key的其他操作</h2><ul><li><p>为key改名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rename key newkey  </span><br><span class="line">renamenx key newkey  </span><br></pre></td></tr></table></figure></li><li><p>对所有key排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>  </span><br></pre></td></tr></table></figure></li><li><p>其他key通用操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> @generic  </span><br></pre></td></tr></table></figure></li></ul><h1 id="数据库通用操作"><a href="#数据库通用操作" class="headerlink" title="数据库通用操作"></a>数据库通用操作</h1><h2 id="key的重复问题"><a href="#key的重复问题" class="headerlink" title="key的重复问题"></a>key的重复问题</h2><ul><li>key是由程序员定义的</li><li>redis在使用过程中，伴随着操作数据量的增加，会出现大量的数据以及对应的key</li><li>数据不区分种类、类别混在在一起，极易出现重复或冲突</li></ul><p>解决方案：</p><ul><li>redis为每个服务提供有16个数据库，编号从0到15</li><li>每个数据库之间的数据相互独立</li></ul><h2 id="基本操作-3"><a href="#基本操作-3" class="headerlink" title="基本操作"></a>基本操作</h2><ul><li><p>切换数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> index  </span><br></pre></td></tr></table></figure></li><li><p>其他操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quit  </span><br><span class="line">ping  </span><br><span class="line"><span class="built_in">echo</span> message  </span><br></pre></td></tr></table></figure></li></ul><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><ul><li><p>数据移动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move key db  </span><br></pre></td></tr></table></figure></li><li><p>数据清除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbsize --库里有多少个key  </span><br><span class="line">flushdb  --清空当前数据库  </span><br><span class="line">flushall --清空有数据库</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ进阶</title>
      <link href="/posts/8085bd15.html"/>
      <url>/posts/8085bd15.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><!-- - [消息是如何保障100%的投递成功](#消息是如何保障100的投递成功)  - [生产端的可靠性投递](#生产端的可靠性投递)- [幂等性/怎么避免重复消费](#幂等性怎么避免重复消费)  - [消费端-幂等性保障](#消费端-幂等性保障)  - [具体解决方案](#具体解决方案)- [Confirm确认消息](#confirm确认消息)  - [代码示例](#代码示例)    - [创建项目](#创建项目)    - [具体代码](#具体代码)- [Return返回消息](#return返回消息)  - [代码示例](#代码示例-1)    - [创建项目](#创建项目-1)    - [具体代码](#具体代码-1)- [自定义消费者](#自定义消费者)  - [代码示例](#代码示例-2)    - [创建项目](#创建项目-2)    - [具体代码](#具体代码-2)- [消息的限流](#消息的限流)  - [代码示例](#代码示例-3)    - [创建项目](#创建项目-3)      - [具体代码](#具体代码-3)- [消息的ACK与重回队列](#消息的ack与重回队列)  - [消费端的手工ACK和NACK](#消费端的手工ack和nack)  - [消费端的重回队列](#消费端的重回队列)  - [代码示例](#代码示例-4)    - [创建项目](#创建项目-4)- [TTL消息](#ttl消息)- [DLX–死信队列(Dead-Letter-Exchange)](#dlx死信队列dead-letter-exchange)- [ASP.NET Core做消费者](#aspnet-core做消费者)  - [代码示例](#代码示例-5) --><!-- > 源码：[https://github.com/xiejiamiao/AllSamples](https://github.com/xiejiamiao/AllSamples) --><h1 id="消息是如何保障100-的投递成功"><a href="#消息是如何保障100-的投递成功" class="headerlink" title="消息是如何保障100%的投递成功"></a>消息是如何保障100%的投递成功</h1><h2 id="生产端的可靠性投递"><a href="#生产端的可靠性投递" class="headerlink" title="生产端的可靠性投递"></a>生产端的可靠性投递</h2><ul><li><p>保障消息的成功发出</p></li><li><p>保障MQ节点的成功接受</p></li><li><p>发送端收到MQ节点(Broker)确认应答</p></li><li><p>完善的消息进行补偿机制</p><h2 id="具体解决方案"><a href="#具体解决方案" class="headerlink" title="具体解决方案"></a>具体解决方案</h2></li><li><p>消息落库，对消息状态进行达标。即在发送消息的时候将消息持久化到数据库中，然后进行状态维护</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.syyxe08gy.webp" alt="消息落库.png"></p><p>缺陷：需要对消息做持久化，这样在遇到高并发的场景，数据库压力大</p></li><li><p>消息的延迟投递，做二次确认，回调检查</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.58he2nd6n4.webp" alt="消息延迟投递.png"></p></li></ul><h1 id="幂等性-怎么避免重复消费"><a href="#幂等性-怎么避免重复消费" class="headerlink" title="幂等性&#x2F;怎么避免重复消费"></a>幂等性&#x2F;怎么避免重复消费</h1><p>幂等性：通俗的讲就是一个操作不管做多少次，结果永远都一样</p><h2 id="消费端-幂等性保障"><a href="#消费端-幂等性保障" class="headerlink" title="消费端-幂等性保障"></a>消费端-幂等性保障</h2><p>消费端实现幂等性，就意味着消费端永远不会消费多次，即使消费端收到多条一样的消息</p><h2 id="具体解决方案-1"><a href="#具体解决方案-1" class="headerlink" title="具体解决方案"></a>具体解决方案</h2><ul><li><p><code>唯一ID+指纹码</code>机制</p><ul><li>唯一ID+指纹码 机制，利用数据库主键去重</li><li>SELECT COUNT(1) FROM T _ORDER WHERE ID&#x3D;(唯一ID+指纹码)</li><li>好处：实现简单</li><li>坏处：高并发下有数据库写入的性能瓶颈</li><li>解决方案：跟进ID进行分库分表进行算法路由</li></ul></li><li><p>利用Redis的原子性去实现</p><ul><li>数据是否需要进行数据落库，如果落库的话，关键解决的问题是数据库和缓存如何做到原子性</li><li>如果数据不落库，那么都存在缓存中，如何设置定时同步的策略</li></ul></li></ul><h1 id="Confirm确认消息"><a href="#Confirm确认消息" class="headerlink" title="Confirm确认消息"></a>Confirm确认消息</h1><ul><li>消息的确定，是指生产者投递消息后，如果Broker收到消息，则会给生产者一个应答</li><li>生产者进行接受应答，用来确定这条消息是否正常的发送给Broker，这种方法也是消息的可靠性投递的核心保障</li></ul><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.175eo9a2kr.webp" alt="Confirm机制流程图.png"></p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>创建两个控制台应用程序</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ComfirmSample.Consumer  </span><br><span class="line">ComfirmSample.Producer  </span><br></pre></td></tr></table></figure><p>再分别通过nuget引入<code>RabbitMQ.Client</code></p><h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><p>ComfirmSample.Producer</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ComfirmSample.Producer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;\*\*\*\*\*\* Confirm Sample Producer \*\*\*\*\*\*&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">      &#123;  </span><br><span class="line">        HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">        Port = <span class="number">5672</span>,  </span><br><span class="line">        UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        VirtualHost = <span class="string">&quot;/&quot;</span>  </span><br><span class="line">      &#125;;  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> connection = connectionFactory.CreateConnection();  </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 指定消息投递模式=Confirm  </span></span><br><span class="line">      channel.ConfirmSelect();  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> exchangeName = <span class="string">&quot;test _confirm _exchange&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> routingKey = <span class="string">&quot;confirm.save&quot;</span>;  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> message = <span class="string">&quot;Hello RabbitMQ For Confirm Message&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(message);  </span><br><span class="line">        </span><br><span class="line">      channel.BasicPublish(exchangeName, routingKey, <span class="literal">null</span>, body);  </span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 添加确认监听  </span></span><br><span class="line">      channel.BasicAcks += (sender, ea) =&gt;  </span><br><span class="line">      &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;消息确认被MQ收到  DeliveryTag=<span class="subst">&#123;ea.DeliveryTag&#125;</span>&quot;</span>);  </span><br><span class="line">      &#125;;  </span><br><span class="line">      <span class="comment">// no ack-ed  </span></span><br><span class="line">      channel.BasicNacks += (sender, ea) =&gt;  </span><br><span class="line">      &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;消息发送失败  DeliveryTag=<span class="subst">&#123;ea.DeliveryTag&#125;</span>&quot;</span>);  </span><br><span class="line">      &#125;;  </span><br><span class="line">        </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;消息发送完成&quot;</span>);  </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;输入回车退出...&quot;</span>);  </span><br><span class="line">      Console.ReadLine();  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>ComfirmSample.Consumer</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client.Events;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ComfirmSample.Consumer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;\*\*\*\*\*\* Confirm Sample Consumer \*\*\*\*\*\*&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">      &#123;  </span><br><span class="line">        HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">        Port = <span class="number">5672</span>,  </span><br><span class="line">        UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        VirtualHost = <span class="string">&quot;/&quot;</span>  </span><br><span class="line">      &#125;;  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> connection = connectionFactory.CreateConnection();  </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> exchangeName = <span class="string">&quot;test _confirm _exchange&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> queueName = <span class="string">&quot;test _confirm _queue&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> routingKey = <span class="string">&quot;confirm.save&quot;</span>;  </span><br><span class="line">        </span><br><span class="line">      channel.ExchangeDeclare(exchangeName,ExchangeType.Direct,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">null</span>);  </span><br><span class="line">      channel.QueueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);  </span><br><span class="line">      channel.QueueBind(queueName, exchangeName, routingKey, <span class="literal">null</span>);  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);  </span><br><span class="line">      channel.BasicConsume(queueName, <span class="literal">true</span>, consumer);  </span><br><span class="line">      consumer.Received += (model, ea) =&gt;  </span><br><span class="line">      &#123;  </span><br><span class="line">        <span class="keyword">var</span> body = ea.Body;  </span><br><span class="line">        <span class="keyword">var</span> message = Encoding.UTF8.GetString(body.ToArray());  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;接收到消息：<span class="subst">&#123;message&#125;</span>&quot;</span>);  </span><br><span class="line">      &#125;;  </span><br><span class="line">        </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;输入回车退出...&quot;</span>);  </span><br><span class="line">      Console.ReadLine();  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h1 id="Return返回消息"><a href="#Return返回消息" class="headerlink" title="Return返回消息"></a>Return返回消息</h1><ul><li>Return Listener用于处理一些不可路由的消息</li><li>消息生产者通过指定一个<code>Exchange</code>和<code>RoutingKey</code>，把消息送达到某一个队列中去，然后消息监听者监听队列，进行消费处理操作</li><li>但是在某些情况下，如果我们在发送消息的时候，当前的<code>Exchange</code>不存在或者指定的路由key路由不到，这个时候如果我们需要监听这种不可达的消息，就要使用Return Listener</li><li><strong>Mandatory</strong>：如果为true，则监听器会接受到路由不可达的消息，然后进行后续处理，如果为false，那么broker端会自动删除该消息</li></ul><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.3yegwb5uo1.webp" alt="image.png"></p><h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="创建项目-1"><a href="#创建项目-1" class="headerlink" title="创建项目"></a>创建项目</h3><p>创建两个控制台应用程序</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReturnListenerSample.Consumer  </span><br><span class="line">ReturnListenerSample.Producer  </span><br></pre></td></tr></table></figure><p>再分别通过nuget引入<code>RabbitMQ.Client</code></p><h3 id="具体代码-1"><a href="#具体代码-1" class="headerlink" title="具体代码"></a>具体代码</h3><p>ReturnListenerSample.Producer</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ReturnListenerSample.Producer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>\[\] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;\*\*\*\*\*\* Return Listener Producer \*\*\*\*\*\*&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">      &#123;  </span><br><span class="line">        HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">        Port = <span class="number">5672</span>,  </span><br><span class="line">        UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        VirtualHost = <span class="string">&quot;/&quot;</span>  </span><br><span class="line">      &#125;;  </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> connection = connectionFactory.CreateConnection();  </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> exchangeName = <span class="string">&quot;return _listener _exchange&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> routingKey = <span class="string">&quot;order.save&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> routingKeyError = <span class="string">&quot;abc.save&quot;</span>;  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> message = <span class="string">&quot;Hello RabbitMQ For ReturnListener&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(message);  </span><br><span class="line">        </span><br><span class="line">      channel.BasicPublish(exchangeName,routingKey,mandatory:<span class="literal">true</span>,<span class="literal">null</span>,body);  </span><br><span class="line">      channel.BasicPublish(exchangeName, routingKeyError, mandatory: <span class="literal">true</span>, <span class="literal">null</span>, body);  </span><br><span class="line">        </span><br><span class="line">      channel.BasicReturn += (model, ea) =&gt;  </span><br><span class="line">      &#123;  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;---------- 消息发送失败 ----------&quot;</span>);  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;ReplyCode = <span class="subst">&#123;ea.ReplyCode&#125;</span>&quot;</span>);  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;ReplyText =<span class="subst">&#123;ea.ReplyText&#125;</span>&quot;</span>);  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Exchange = <span class="subst">&#123;ea.Exchange&#125;</span>&quot;</span>);  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;RoutingKey = <span class="subst">&#123;ea.RoutingKey&#125;</span>&quot;</span>);  </span><br><span class="line">      &#125;;  </span><br><span class="line">        </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;消息发送完成&quot;</span>);  </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;输入回车退出...&quot;</span>);  </span><br><span class="line">      Console.ReadLine();  </span><br><span class="line">      </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>ReturnListenerSample.Consumer</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client.Events;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ReturnListenerSample.Consumer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>\[\] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\*\*\*\*\*\* Return Listener Consumer \*\*\*\*\*\*&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">            &#123;  </span><br><span class="line">                HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">                Port = <span class="number">5672</span>,  </span><br><span class="line">                UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                VirtualHost = <span class="string">&quot;/&quot;</span>  </span><br><span class="line">            &#125;;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> connection = connectionFactory.CreateConnection();  </span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> exchangeName = <span class="string">&quot;return _listener _exchange&quot;</span>;  </span><br><span class="line">            <span class="keyword">var</span> routingKey = <span class="string">&quot;order.#&quot;</span>;  </span><br><span class="line">            <span class="keyword">var</span> queueName = <span class="string">&quot;return _listener _queue&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">            channel.ExchangeDeclare(exchangeName,ExchangeType.Topic,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">null</span>);  </span><br><span class="line">            channel.QueueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);  </span><br><span class="line">            channel.QueueBind(queueName,exchangeName,routingKey,<span class="literal">null</span>);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);  </span><br><span class="line">            channel.BasicConsume(queueName, <span class="literal">true</span>, consumer);  </span><br><span class="line">            consumer.Received += (model, ea) =&gt;  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">var</span> body = ea.Body;  </span><br><span class="line">                <span class="keyword">var</span> message = Encoding.UTF8.GetString(body.ToArray());  </span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;接收到消息  <span class="subst">&#123;message&#125;</span>&quot;</span>);  </span><br><span class="line">            &#125;;  </span><br><span class="line">  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;输入回车退出...&quot;</span>);  </span><br><span class="line">            Console.ReadLine();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义消费者"><a href="#自定义消费者" class="headerlink" title="自定义消费者"></a>自定义消费者</h1><p>自定义Consumer在日常工作中更常用，主要就是继承<code>DefaultBasicConsumer</code>这个类，然后<code>override HandleBasicDeliver()</code>这个方法即可</p><h2 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="创建项目-2"><a href="#创建项目-2" class="headerlink" title="创建项目"></a>创建项目</h3><p>创建两个控制台应用程序</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CustomerConsumer.Consumer  </span><br><span class="line">CustomerConsumer.Producer  </span><br></pre></td></tr></table></figure><p>再分别通过nuget引入<code>RabbitMQ.Client</code></p><p>在<code>CustomerConsumer.Consumer</code>中创建类<code>MyConsumer.cs</code></p><h3 id="具体代码-2"><a href="#具体代码-2" class="headerlink" title="具体代码"></a>具体代码</h3><p>CustomerConsumer.Producer.Program.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CustomerConsumer.Producer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>\[\] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\*\*\*\*\*\* Customer Consumer Producer \*\*\*\*\*\*&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">            &#123;  </span><br><span class="line">                HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">                Port = <span class="number">5672</span>,  </span><br><span class="line">                UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                VirtualHost = <span class="string">&quot;/&quot;</span>  </span><br><span class="line">            &#125;;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> connection = connectionFactory.CreateConnection();  </span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> exchangeName = <span class="string">&quot;customer _consumer _exchange&quot;</span>;  </span><br><span class="line">            <span class="keyword">var</span> routingKey = <span class="string">&quot;customer.save&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> message = <span class="string">&quot;Hello RabbitMQ For Customer _Consumer&quot;</span>;  </span><br><span class="line">            <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(message);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                channel.BasicPublish(exchangeName, routingKey, <span class="literal">true</span>, <span class="literal">null</span>, body);  </span><br><span class="line">            &#125;  </span><br><span class="line">   </span><br><span class="line">  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;消息发送完成&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CustomerConsumer.Consumer.MyConsumer.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CustomerConsumer.Consumer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyConsumer</span> : <span class="title">DefaultBasicConsumer</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IModel  _model;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyConsumer</span>(<span class="params">IModel model</span>):<span class="title">base</span>(<span class="params">model</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            _model = model;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">HandleBasicDeliver</span>(<span class="params"><span class="built_in">string</span> consumerTag, <span class="built_in">ulong</span> deliveryTag, <span class="built_in">bool</span> redelivered, <span class="built_in">string</span> exchange, <span class="built_in">string</span> routingKey,  </span></span></span><br><span class="line"><span class="params"><span class="function">            IBasicProperties properties, ReadOnlyMemory&lt;<span class="built_in">byte</span>&gt; body</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;consumerTag = <span class="subst">&#123;consumerTag&#125;</span>&quot;</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;deliveryTag = <span class="subst">&#123;deliveryTag&#125;</span>&quot;</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;redelivered = <span class="subst">&#123;redelivered&#125;</span>&quot;</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;exchange = <span class="subst">&#123;exchange&#125;</span>&quot;</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;routingKey = <span class="subst">&#123;routingKey&#125;</span>&quot;</span>);  </span><br><span class="line">            <span class="keyword">var</span> message = Encoding.UTF8.GetString(body.ToArray());  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;Message = <span class="subst">&#123;message&#125;</span>&quot;</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;===========================================&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CustomerConsumer.Consumer.Program.cs</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CustomerConsumer.Consumer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\*\*\*\*\*\* Customer Consumer Producer \*\*\*\*\*\*&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">            &#123;  </span><br><span class="line">                HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">                Port = <span class="number">5672</span>,  </span><br><span class="line">                UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                VirtualHost = <span class="string">&quot;/&quot;</span>  </span><br><span class="line">            &#125;;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> connection = connectionFactory.CreateConnection();  </span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> exchangeName = <span class="string">&quot;customer _consumer _exchange&quot;</span>;  </span><br><span class="line">            <span class="keyword">var</span> routingKey = <span class="string">&quot;customer.#&quot;</span>;  </span><br><span class="line">            <span class="keyword">var</span> queueName = <span class="string">&quot;customer _consumer _queue&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">            channel.ExchangeDeclare(exchangeName,ExchangeType.Topic,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">null</span>);  </span><br><span class="line">            channel.QueueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);  </span><br><span class="line">            channel.QueueBind(queueName, exchangeName, routingKey);  </span><br><span class="line">  </span><br><span class="line">            channel.BasicConsume(queueName, <span class="literal">true</span>, <span class="keyword">new</span> MyConsumer(channel));  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;输入回车退出...&quot;</span>);  </span><br><span class="line">            Console.ReadLine();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="消息的限流"><a href="#消息的限流" class="headerlink" title="消息的限流"></a>消息的限流</h1><p>为什么需要消费端限流：当消费端处理能力达不到生产端的生产速度，或当Broker中囤积了巨量消息，当消费端启动之后，巨量消息同一时间全部推送到消费端，会直接导致消费端崩溃，</p><p>RabbitMQ提供了一种Qos(服务质量保证)功能，即在非自动确认消息的前提下，如果一定数目的消息(通过基于consumer或者channel设置Qos的值)未被确认之前，不进行消费新的消息</p><p>主要操作方式就是调用<code>channel</code>上的<code>BasicQos</code>方法设置，其中参数意思如下：</p><ul><li><p>prefetchSize：表示单挑消息的最大限制，一般设置为0表示对单挑消息的体积大小不做限制</p></li><li><p>prefetchCount：表示Broker最多同时给一个消费者推送多少条消息，一旦有这么多条消息没有ack，则该consumer将block掉，知道有消息ack，Broker才会继续推消息</p></li><li><p>global：true&#x2F;false，是否将上面的设置应用于channel，简单点说就是上面限制是channel级别还是consumer级别</p></li><li><p><em>注意：这里的设置一定是在调用channel.BasicConsume()的时候设置consumer的autoAck&#x3D;false才有效，并且一般开发中都是将autoAck设置为false，然后在业务逻辑处理完之后再手动ack*</em></p></li></ul><h2 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="创建项目-3"><a href="#创建项目-3" class="headerlink" title="创建项目"></a>创建项目</h3><p>创建两个控制台应用程序</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ConsumerLimit.Consumer  </span><br><span class="line">ConsumerLimit.Producer  </span><br></pre></td></tr></table></figure><p>再分别通过nuget引入<code>RabbitMQ.Client</code></p><p>在<code>ConsumerLimit.Consumer</code>中创建类<code>MyConsumer.cs</code></p><h4 id="具体代码-3"><a href="#具体代码-3" class="headerlink" title="具体代码"></a>具体代码</h4><p>ConsumerLimit.Producer.Program</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsumerLimit.Producer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\*\*\*\*\*\*\*\*\*\* Consumer Limit Producer \*\*\*\*\*\*\*\*\*\*&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">            &#123;  </span><br><span class="line">                HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">                Port = <span class="number">5672</span>,  </span><br><span class="line">                UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                VirtualHost = <span class="string">&quot;/&quot;</span>  </span><br><span class="line">            &#125;;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> connection = connectionFactory.CreateConnection();  </span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> exchangeName = <span class="string">&quot;consumer _limit _exchange&quot;</span>;  </span><br><span class="line">            <span class="keyword">var</span> routingKey = <span class="string">&quot;order.saved&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> random = <span class="keyword">new</span> Random();  </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">var</span> message = <span class="string">$&quot;Hello RabbitMQ For Consumer Limit <span class="subst">&#123;random.Next(<span class="number">1</span>,<span class="number">100</span>)&#125;</span>&quot;</span>;  </span><br><span class="line">                <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(message);  </span><br><span class="line">                channel.BasicPublish(exchangeName, routingKey, <span class="literal">null</span>, body);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;消息发送完成&quot;</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;输入回车退出...&quot;</span>);  </span><br><span class="line">            Console.ReadLine();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConsumerLimit.Consumer.MyConsumer</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> System.Threading;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsumerLimit.Consumer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyConsumer</span>:<span class="title">DefaultBasicConsumer</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IModel  _channel;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyConsumer</span>(<span class="params">IModel channel</span>):<span class="title">base</span>(<span class="params">channel</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            _channel = channel;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">HandleBasicDeliver</span>(<span class="params"><span class="built_in">string</span> consumerTag, <span class="built_in">ulong</span> deliveryTag, <span class="built_in">bool</span> redelivered, <span class="built_in">string</span> exchange, <span class="built_in">string</span> routingKey,  </span></span></span><br><span class="line"><span class="params"><span class="function">            IBasicProperties properties, ReadOnlyMemory&lt;<span class="built_in">byte</span>&gt; body</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            Console.WriteLine();  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;====================&quot;</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;接收到消息：<span class="subst">&#123;Encoding.UTF8.GetString(body.ToArray())&#125;</span>&quot;</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;consumerTag = <span class="subst">&#123;consumerTag&#125;</span>&quot;</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;deliveryTag = <span class="subst">&#123;deliveryTag&#125;</span>&quot;</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;redelivered = <span class="subst">&#123;redelivered&#125;</span>&quot;</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;exchange = <span class="subst">&#123;exchange&#125;</span>&quot;</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;routingKey = <span class="subst">&#123;routingKey&#125;</span>&quot;</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;正在模拟业务操作...&quot;</span>);  </span><br><span class="line">            Thread.Sleep(<span class="number">2000</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;业务处理完毕&quot;</span>);  </span><br><span class="line">            _channel.BasicAck(deliveryTag,<span class="literal">false</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;====================&quot;</span>);  </span><br><span class="line">            Console.WriteLine();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConsumerLimit.Consumer.Program</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> System.Threading;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client.Events;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsumerLimit.Consumer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\*\*\*\*\*\*\*\*\*\* Consumer Limit Consumer \*\*\*\*\*\*\*\*\*\*&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">            &#123;  </span><br><span class="line">                HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">                Port = <span class="number">5672</span>,  </span><br><span class="line">                UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                VirtualHost = <span class="string">&quot;/&quot;</span>  </span><br><span class="line">            &#125;;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> connection = connectionFactory.CreateConnection();  </span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> exchangeName = <span class="string">&quot;consumer _limit _exchange&quot;</span>;  </span><br><span class="line">            <span class="keyword">var</span> routingKey = <span class="string">&quot;order.#&quot;</span>;  </span><br><span class="line">            <span class="keyword">var</span> queueName = <span class="string">&quot;consumer _limit _queue&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">            channel.ExchangeDeclare(exchangeName, ExchangeType.Topic, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">null</span>);  </span><br><span class="line">            channel.QueueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);  </span><br><span class="line">            channel.QueueBind(queueName, exchangeName, routingKey, <span class="literal">null</span>);  </span><br><span class="line">  </span><br><span class="line">            channel.BasicConsume(queueName, <span class="literal">false</span>, <span class="keyword">new</span> MyConsumer(channel));  </span><br><span class="line">            channel.BasicQos(prefetchSize:<span class="number">0</span>,prefetchCount:<span class="number">1</span>,<span class="keyword">global</span>:<span class="literal">false</span>);  </span><br><span class="line">  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;输入回车退出...&quot;</span>);  </span><br><span class="line">            Console.ReadLine();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="消息的ACK与重回队列"><a href="#消息的ACK与重回队列" class="headerlink" title="消息的ACK与重回队列"></a>消息的ACK与重回队列</h1><h2 id="消费端的手工ACK和NACK"><a href="#消费端的手工ACK和NACK" class="headerlink" title="消费端的手工ACK和NACK"></a>消费端的手工ACK和NACK</h2><ul><li>ACK&#x3D;消息已经成功处理了</li><li>NACK&#x3D;消息我处理失败了(Broker会进行重新投递)</li></ul><p>使用场景：</p><ul><li>消费端进行消费的时候，如果由于业务异常可以进行NACK，当尝试到足够的次数都一直处理失败，则返回记录日志后续做补偿，然后返回ACK</li><li>由于服务器宕机等严重问题，Broker即没收到ACK也没有收到NACK，那么Broker也会进行重新推送消息，这时如果处理完消息，返回ACK可以保障Broker知道消费端已经成功消费</li></ul><h2 id="消费端的重回队列"><a href="#消费端的重回队列" class="headerlink" title="消费端的重回队列"></a>消费端的重回队列</h2><ul><li>消费端重回队列是为了对没有处理成功的消息，把消息重新会递给Broker</li><li>一般在实际应用中，都会关闭重回队列，也就是设置为False</li></ul><h2 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="创建项目-4"><a href="#创建项目-4" class="headerlink" title="创建项目"></a>创建项目</h3><p>创建两个控制台应用程序</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">AckSample.Consumer  </span><br><span class="line">AckSample.Producer  </span><br><span class="line">``</span><br><span class="line">再分别通过nuget引入`RabbitMQ.Client`</span><br><span class="line"></span><br><span class="line">在`AckSample.Consumer`中创建类`MyConsumer.cs`</span><br><span class="line"></span><br><span class="line"><span class="meta">### 具体代码</span></span><br><span class="line"></span><br><span class="line">AckSample.Producer.Program</span><br><span class="line"></span><br><span class="line">```csharp</span><br><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AckSample.Producer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\*\*\*\*\*\*\*\*\*\* ACK Sample Producer \*\*\*\*\*\*\*\*\*\*&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">            &#123;  </span><br><span class="line">                HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">                Port = <span class="number">5672</span>,  </span><br><span class="line">                UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                VirtualHost = <span class="string">&quot;/&quot;</span>  </span><br><span class="line">            &#125;;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> connection = connectionFactory.CreateConnection();  </span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> exchangeName = <span class="string">&quot;ack _sample _exchange&quot;</span>;  </span><br><span class="line">            <span class="keyword">var</span> routingKey = <span class="string">&quot;order.saved&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> random =<span class="keyword">new</span> Random();  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">var</span> properties = channel.CreateBasicProperties();  </span><br><span class="line">                properties.DeliveryMode = <span class="number">2</span>;  </span><br><span class="line">                properties.ContentEncoding = <span class="string">&quot;UTF-8&quot;</span>;  </span><br><span class="line">                properties.Headers = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;() &#123;&#123;<span class="string">&quot;num&quot;</span>, random.Next(<span class="number">0</span>, <span class="number">10</span>).ToString()&#125;&#125;;  </span><br><span class="line">  </span><br><span class="line">                <span class="keyword">var</span> message = <span class="string">$&quot;Hello RabbitMQ For ACK  -&gt;  <span class="subst">&#123;i&#125;</span>&quot;</span>;  </span><br><span class="line">                <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(message);  </span><br><span class="line">  </span><br><span class="line">                channel.BasicPublish(exchangeName, routingKey, properties, body);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;输入回车退出...&quot;</span>);  </span><br><span class="line">            Console.ReadLine();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AckSample.Consumer.MyConsumer</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> System.Threading;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line"><span class="keyword">using</span> Console = System.Console;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AckSample.Consumer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyConsumer</span>:<span class="title">DefaultBasicConsumer</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IModel _channel;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyConsumer</span>(<span class="params">IModel channel</span>):<span class="title">base</span>(<span class="params">channel</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            _channel = channel;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">HandleBasicDeliver</span>(<span class="params"><span class="built_in">string</span> consumerTag, <span class="built_in">ulong</span> deliveryTag, <span class="built_in">bool</span> redelivered, <span class="built_in">string</span> exchange, <span class="built_in">string</span> routingKey,  </span></span></span><br><span class="line"><span class="params"><span class="function">            IBasicProperties properties, ReadOnlyMemory&lt;<span class="built_in">byte</span>&gt; body</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            Console.WriteLine();  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;====================&quot;</span>);  </span><br><span class="line">            <span class="keyword">var</span> stringNum = properties.Headers[<span class="string">&quot;num&quot;</span>];  </span><br><span class="line">            <span class="keyword">var</span> byteNum = stringNum <span class="keyword">as</span> <span class="built_in">byte</span>[];  </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;接收到消息  num=<span class="subst">&#123;Encoding.UTF8.GetString(byteNum)&#125;</span>  <span class="subst">&#123;Encoding.UTF8.GetString(body.ToArray())&#125;</span>&quot;</span>);  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;......模拟业务操作......&quot;</span>);  </span><br><span class="line">            <span class="keyword">var</span> num = <span class="built_in">int</span>.Parse(Encoding.UTF8.GetString(byteNum));  </span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                Console.WriteLine(<span class="string">&quot;......业务处理失败......&quot;</span>);  </span><br><span class="line">                _channel.BasicNack(deliveryTag, <span class="literal">false</span>, <span class="literal">true</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                Console.WriteLine(<span class="string">&quot;......业务处理成功......&quot;</span>);  </span><br><span class="line">                _channel.BasicAck(deliveryTag,<span class="literal">false</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;====================&quot;</span>);  </span><br><span class="line">            Console.WriteLine();  </span><br><span class="line">            Thread.Sleep(<span class="number">2000</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">```   </span><br><span class="line">AckSample.Consumer.Program</span><br><span class="line">```csharp</span><br><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AckSample.Consumer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\*\*\*\*\*\*\*\*\*\* ACK Sample Consumer \*\*\*\*\*\*\*\*\*\*&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">            &#123;  </span><br><span class="line">                HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">                Port = <span class="number">5672</span>,  </span><br><span class="line">                UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                VirtualHost = <span class="string">&quot;/&quot;</span>  </span><br><span class="line">            &#125;;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> connection = connectionFactory.CreateConnection();  </span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> exchangeName = <span class="string">&quot;ack _sample _exchange&quot;</span>;  </span><br><span class="line">            <span class="keyword">var</span> queueName = <span class="string">&quot;ack _sample _queue&quot;</span>;  </span><br><span class="line">            <span class="keyword">var</span> routingKey = <span class="string">&quot;order.saved&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">            channel.ExchangeDeclare(exchangeName, ExchangeType.Topic, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">null</span>);  </span><br><span class="line">            channel.QueueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);  </span><br><span class="line">            channel.QueueBind(queueName,exchangeName,routingKey);  </span><br><span class="line">  </span><br><span class="line">            channel.BasicConsume(queueName, <span class="literal">false</span>, <span class="keyword">new</span> MyConsumer(channel));  </span><br><span class="line">  </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;输入回车退出...&quot;</span>);  </span><br><span class="line">            Console.ReadLine();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="TTL消息"><a href="#TTL消息" class="headerlink" title="TTL消息"></a>TTL消息</h1><p>主要就是两点，TTL可以针对消息本身也可以针对消息队列</p><p>消息本身通过消息的<code>Properties</code>中设置<code>Expiration</code>属性来设置过期时间</p><p>Queue通过声明的时候在<code>arguments</code>字典参数里添加<code>x-message-ttl</code>这个键值对来设置进入该消息队列的消息有效期</p><h1 id="DLX–死信队列-Dead-Letter-Exchange"><a href="#DLX–死信队列-Dead-Letter-Exchange" class="headerlink" title="DLX–死信队列(Dead-Letter-Exchange)"></a>DLX–死信队列(Dead-Letter-Exchange)</h1><p>利用DLX，当消息在一个队列变成死信(dead message)之后，它能被重新publish到另一个Exchange，这个Exchange就是DLX</p><p>消息编程死信的情况：</p><ul><li>消息被拒绝(basic.reject&#x2F;basic.nack)，并且requeue&#x3D;false(不再重回队列)</li><li>消息TTL过期</li><li>队列达到最大长度</li></ul><p>死信队列</p><ul><li>DLX也是一个正常的Exchange，和一般的Exchange没有区别，它能在仍和的队列上被指定，实际上就是设置某个队列的属性</li><li>当这个队列中有死信时，RabbitMQ就会自动的将这个消息重新发布到设置的Exchange上去，进而被路由到另一个队列</li><li>可以监听这个队列中消息做相应的处理，这个特性可以弥补RabbitMQ以前支持的immediate参数的功能</li></ul><p>死信队列设置：</p><ul><li>首先需要设置死信队列的exchange和queue，然后进行绑定<ul><li>Exchange：dlx.exchange</li><li>Queue：dlx.queue</li><li>RoutingKey：#</li></ul></li><li>然后进行正常声明交换机、队列、绑定，只不过需要在队列上的arguments字典上加一个键值对：<code>x-dead-letter-exchange:dlx.exchange</code></li></ul><h1 id="ASP-NET-Core做消费者"><a href="#ASP-NET-Core做消费者" class="headerlink" title="ASP.NET Core做消费者"></a>ASP.NET Core做消费者</h1><p>主要思路：创建一个<code>HostedService</code>服务类，继承<code>BackgroundService</code>，<code>override ExecuteAsync</code>方法，然后在里面做消息监听，最后在<code>Startup.ConfigureServices</code>中注册这个<code>HostedService</code></p><h2 id="代码示例-5"><a href="#代码示例-5" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;  </span><br><span class="line"><span class="keyword">using</span> System.Linq;  </span><br><span class="line"><span class="keyword">using</span> System.Threading;  </span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;  </span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line"><span class="keyword">using</span> WebSiteConsumerSample.Consumers;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// ReSharper disable UnusedMember.Global  </span></span><br><span class="line"><span class="comment">// ReSharper disable InconsistentNaming  </span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WebSiteConsumerSample.BackgroundServices</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConsumeRabbitMQHostedService</span> : <span class="title">BackgroundService</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;ConsumeRabbitMQHostedService&gt;  _logger;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;SolutionMessageConsumer&gt;  _consumerLogger;  </span><br><span class="line">        <span class="keyword">private</span> IConnection  _connection;  </span><br><span class="line">        <span class="keyword">private</span> IModel  _channel;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span>  _exchangeName;  </span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span>  _queueName;  </span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span>  _routingKey;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ConsumeRabbitMQHostedService</span>(<span class="params">ILogger&lt;ConsumeRabbitMQHostedService&gt; logger,ILogger&lt;SolutionMessageConsumer&gt; consumerLogger</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            _logger = logger;  </span><br><span class="line">            _consumerLogger = consumerLogger;  </span><br><span class="line">            InitRabbitMq();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitRabbitMq</span>()</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">            &#123;  </span><br><span class="line">                HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">                Port = <span class="number">5672</span>,  </span><br><span class="line">                UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">                VirtualHost = <span class="string">&quot;/&quot;</span>  </span><br><span class="line">            &#125;;  </span><br><span class="line">  </span><br><span class="line">            _connection = connectionFactory.CreateConnection();  </span><br><span class="line">            _channel =  _connection.CreateModel();  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">var</span> exchangeName = <span class="string">&quot;dimsum _solution _exchange&quot;</span>;  </span><br><span class="line">            <span class="keyword">var</span> queueName = <span class="string">&quot;dimsum _solution _queue&quot;</span>;  </span><br><span class="line">            <span class="keyword">var</span> routingKey = <span class="string">&quot;solution.#&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">            _exchangeName = exchangeName;  </span><br><span class="line">            _queueName = queueName;  </span><br><span class="line">            _routingKey = routingKey;  </span><br><span class="line">  </span><br><span class="line">            _channel.ExchangeDeclare(exchangeName, ExchangeType.Topic, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">null</span>);  </span><br><span class="line">            _channel.QueueDeclare(queueName, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);  </span><br><span class="line">            _channel.QueueBind(queueName, exchangeName, routingKey, <span class="literal">null</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">ExecuteAsync</span>(<span class="params">CancellationToken stoppingToken</span>)</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">await</span> Task.CompletedTask;  </span><br><span class="line">            stoppingToken.ThrowIfCancellationRequested();  </span><br><span class="line">            _channel.BasicConsume( _queueName, <span class="literal">false</span>, <span class="keyword">new</span> SolutionMessageConsumer( _channel,  _consumerLogger));  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            _channel.Dispose();  </span><br><span class="line">            _connection.Dispose();  </span><br><span class="line">            <span class="keyword">base</span>.Dispose();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>在<code>Startup.ConfigureServices</code>中添加</p><p>1  </p><p>services.AddHostedService<ConsumeRabbitMQHostedService>();</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ基础</title>
      <link href="/posts/2ef47cbd.html"/>
      <url>/posts/2ef47cbd.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><!-- - [主流消息中间件](#主流消息中间件)  - [ActiveMQ](#activemq)  - [Kafka](#kafka)  - [RocketMQ](#rocketmq)  - [RabbitMQ](#rabbitmq)- [RabbitMQ核心概念及AMQP协议](#rabbitmq核心概念及amqp协议)  - [为什么用RabbitMQ](#为什么用rabbitmq)  - [RabbitMQ高性能的原因](#rabbitmq高性能的原因)  - [什么是AMQP](#什么是amqp)  - [AMQP核心概念](#amqp核心概念)  - [RabbitMQ整体架构](#rabbitmq整体架构)  - [RabbitMQ消息流转](#rabbitmq消息流转)- [RabbitMQ常用命令](#rabbitmq常用命令)  - [rabbitmq-server](#rabbitmq-server)  - [rabbitmq-plugins](#rabbitmq-plugins)- [消息生产与消费](#消息生产与消费)  - [重要概念](#重要概念)  - [创建项目](#创建项目)  - [具体代码](#具体代码)  - [运行测试](#运行测试)- [Exchange–交换机](#exchange交换机)  - [Exchange属性(交换机属性)](#exchange属性交换机属性)  - [Direct Exchange](#direct-exchange)    - [代码示例](#代码示例)      - [创建项目](#创建项目-1)      - [具体代码](#具体代码-1)  - [Topic Exchange](#topic-exchange)    - [代码示例](#代码示例-1)      - [创建项目](#创建项目-2)      - [具体代码](#具体代码-2)  - [Fanout Exchange](#fanout-exchange)    - [代码示例](#代码示例-2)      - [创建项目](#创建项目-3)      - [具体代码](#具体代码-3)- [Binding–绑定](#binding绑定)- [Queue–消息队列](#queue消息队列)- [Message–消息](#message消息)- [Virtual Hots–虚拟主机](#virtual-hots虚拟主机) --><!-- > 源码：[https://github.com/xiejiamiao/AllSamples](https://github.com/xiejiamiao/AllSamples) --><h1 id="主流消息中间件"><a href="#主流消息中间件" class="headerlink" title="主流消息中间件"></a>主流消息中间件</h1><p><strong>衡量MQ指标：服务性能、数据存储、集群架构</strong></p><h2 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h2><ul><li>ActiveMQ是Apache出品，最流行的、能力最强劲的开源消息总线，并且它是一个完全支持JMS规范的消息中间件</li><li>其丰富的API、多种集群构建模式使得它称为业界老牌消息中间件，在中小型企业中应用广泛</li><li>性能比较一般，面对大数量高并发的情况容易出现堵塞、消息堆积过多导致延迟</li><li>适合并发量不高的场景</li></ul><p>ActiveMQ的集群模式：<br><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.5fkly2609k.webp" alt="ActiveMQ集群模式.png"></p><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p>Kafka是LinkedIn开源的分布式发布-订阅消息系统，目前归属于Apache顶级项目。Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量(配置不高的单机服务器也能支撑每秒100K的吞吐数据量)，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务</p><p>Kafka集群模式：<br><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.syyxd7efm.webp" alt="Kafka集群模式.png"></p><h2 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h2><p>RocketMQ是阿里开源的消息中间件，目前也已经孵化为Apache顶级项目，它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ思路起源于Kafka，它对消息的可靠传输和事务性做了优化，目前在阿里集团被广泛应用于交易、充值、流计算、消息推送、日志流式处理、binglog分布等场景</p><p>RocketMQ集群模式：<br><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.3uuuyl8nv6.webp" alt="RocketMQ集群模式.png"></p><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布&#x2F;订阅）、可靠性、安全。AMQP协议更多用在企业系统内，对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。</p><p>RabbitMQ高可用负载均衡集群模式：<br><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.9dczeqgtfh.webp" alt="RbbitMQ高可用负载均衡集群.png"></p><h1 id="RabbitMQ核心概念及AMQP协议"><a href="#RabbitMQ核心概念及AMQP协议" class="headerlink" title="RabbitMQ核心概念及AMQP协议"></a>RabbitMQ核心概念及AMQP协议</h1><p><strong>RabbitMQ</strong>是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用之间共享数据，RabbitMQ是使用Erlang语言来编写的，并且RabbitMQ是基于AMQP协议的。</p><h2 id="为什么用RabbitMQ"><a href="#为什么用RabbitMQ" class="headerlink" title="为什么用RabbitMQ"></a>为什么用RabbitMQ</h2><ul><li>与<code>SpringAMQP</code>完美的整合、API丰富</li><li>集群模式丰富，表达式配置，HA模式，镜像队列模型</li><li>保证数据不丢失的前提下做到高可靠性、可用性</li></ul><h2 id="RabbitMQ高性能的原因"><a href="#RabbitMQ高性能的原因" class="headerlink" title="RabbitMQ高性能的原因"></a>RabbitMQ高性能的原因</h2><p><strong>Erlang语言</strong>最初在于交换机领域的架构模式，这使得RabbitMQ在Broker之间进行数据交互的性能是非常优秀的</p><p><strong>Erlang</strong>的优点：有着与原生Socket一样的延迟</p><h2 id="什么是AMQP"><a href="#什么是AMQP" class="headerlink" title="什么是AMQP"></a>什么是AMQP</h2><ul><li>AMQP全称：Advance Message Queuing Protocol（高级消息队列协议）</li><li>AMQP定义：具有现代特征的二进制协议。是一个提供统一消息的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</li><li>AMQP协议模型：<br><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.1lbuf3nraq.webp" alt="AMQP协议模型.png"></li></ul><h2 id="AMQP核心概念"><a href="#AMQP核心概念" class="headerlink" title="AMQP核心概念"></a>AMQP核心概念</h2><ul><li><strong>Server</strong>：又称Broker，接受客户端的连接，实现AMQP实体服务</li><li><strong>Connection</strong>：连接，应用程序域Broker的网络连接</li><li><strong>Channel</strong>：网络信道，几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道。客户端可建立多个Channel，每个Channel代表一个会话任务</li><li><strong>Message</strong>：消息，服务器和应用程序之间传送的数据，有<code>Properties</code>和<code>Body</code>组成，Properties可以对消息进行修饰，比如消息的优先级、延迟等高级特性；Body则是消息体内容</li><li><strong>Virtual host</strong>：虚拟主机，用于进行逻辑隔离，最上层的消息路由。一个Virtual host里面可以有若干个Exchange和Queue，同一个Virtual host里面不能有相同名称的Exchange和Queue</li><li><strong>Exchange</strong>：交换机，接受消息，根据路由键转发消息到绑定的队列</li><li><strong>Binding</strong>：Exchange和Queue之间的虚拟连接，bingding中可以包含routing key</li><li><strong>Routing key</strong>：一个路由规则，虚拟机可用它来确定如何路由一个特定消息</li><li><strong>Queue</strong>：也成为Message Queue，消息队列，保存消息并将它们转发给消费者</li></ul><h2 id="RabbitMQ整体架构"><a href="#RabbitMQ整体架构" class="headerlink" title="RabbitMQ整体架构"></a>RabbitMQ整体架构</h2><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.86to64rpy0.webp" alt="RabbitMQ整体架构.png"></p><h2 id="RabbitMQ消息流转"><a href="#RabbitMQ消息流转" class="headerlink" title="RabbitMQ消息流转"></a>RabbitMQ消息流转</h2><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.7w6uczc9lq.webp" alt="RabbitMQ消息流转.png"></p><h1 id="RabbitMQ常用命令"><a href="#RabbitMQ常用命令" class="headerlink" title="RabbitMQ常用命令"></a>RabbitMQ常用命令</h1><h2 id="rabbitmq-server"><a href="#rabbitmq-server" class="headerlink" title="rabbitmq-server"></a>rabbitmq-server</h2><ul><li><p>启动并后台运行：<code>rabbitmq-server start &amp;</code></p></li><li><p>停止服务：<code>rabbitmq-server stop</code></p><h2 id="rabbitmqctl"><a href="#rabbitmqctl" class="headerlink" title="rabbitmqctl"></a>rabbitmqctl</h2></li><li><p>启动应用：<code>rabbitmqctl start_app</code></p></li><li><p>停止应用：<code>rabbitmqctl stop_app</code></p></li><li><p>节点状态：<code>rabbitmqctl status</code></p><h3 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h3></li><li><p>添加用户：<code>rabbitmqctl add_user username password</code></p></li><li><p>列出所有用户：<code>rabbitmqctl list_users</code></p></li><li><p>删除用户：<code>rabbitmqctl delete_user username</code></p></li><li><p>清除用户权限：<code>rabbitmqctl clear_permissions -p vhostpath username</code></p></li><li><p>列出用户权限：<code>rabbitmqctl list_user_permissions username</code></p></li><li><p>修改密码：<code>rabbitmqctl change_password username newpassword</code></p></li><li><p>设置用户权限：<code>rabbitmqctl set_permissions -p vhostpath username &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></p><h3 id="virtual-host相关"><a href="#virtual-host相关" class="headerlink" title="virtual host相关"></a>virtual host相关</h3></li><li><p>创建虚拟主机：<code>rabbitmqctl add_vhost vhostpath</code></p></li><li><p>列出所有虚拟主机：<code>rabbitmqctl list_vhosts</code></p></li><li><p>列出虚拟主机上所有权限：<code>rabbitmqctl list_permissions -p vhostpath</code></p></li><li><p>删除虚拟主机：<code>rabbitmqctl delete_vhost vhostpath</code></p><h3 id="queue相关"><a href="#queue相关" class="headerlink" title="queue相关"></a>queue相关</h3></li><li><p>查看所有队列信息：<code>rabbitmqctl list_queues</code></p></li><li><p>清楚队列里的消息：<code>rabbitmqctl -p vhostpath purge_queue blue</code></p><h3 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h3></li><li><p>移除所有数据：<code>rabbitmqctl reset</code>(要在<code>rabbitmqctl stop_app</code>之后使用)</p></li><li><p>组成集群命令：<code>rabbitmqctl join_cluster &lt;clusternode&gt; [--ram]</code></p></li><li><p>查看集群状态：<code>rabbitmqctl cluster_status</code></p></li><li><p>修改集群节点的存储形式：<code>rabbitmqctl change_cluster_node_type disc | ram</code></p></li><li><p>忘记节点(摘除节点)：<code>rabbitmqctl forget_cluster_node [--offline]</code></p></li><li><p>修改节点名称：<code>rabbitmqctl rename_cluster_node oldnode1 newnode1 [oldnode2] [newnode2...]</code></p></li></ul><h2 id="rabbitmq-plugins"><a href="#rabbitmq-plugins" class="headerlink" title="rabbitmq-plugins"></a>rabbitmq-plugins</h2><ul><li>列出当前所有插件：<code>rabbitmq-plugins list</code></li><li>启动控制台：<code>rabbitmq-plugins enable rabbitmq_management</code></li></ul><h1 id="消息生产与消费"><a href="#消息生产与消费" class="headerlink" title="消息生产与消费"></a>消息生产与消费</h1><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><ul><li><code>ConnectionFactory</code>：获取连接工厂</li><li><code>Connection</code>：一个连接</li><li><code>Channel</code>：数据通信信道，可发送和接收消息</li><li><code>Queue</code>：具体的消息存储队列</li><li><code>Producer</code>：消息生产者</li><li><code>Consumer</code>：消息消费者</li></ul><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建两个控制台应用程序，名字分别为：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BasicConsumer  </span><br><span class="line">BasicProducer  </span><br></pre></td></tr></table></figure><p>在两个项目分别通过nuget引入<code>RabbitMQ.Client</code></p><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><p>BasicProducer.Program代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BasicProducer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">      <span class="comment">// 1.创建一个ConnectionFactory  </span></span><br><span class="line">      <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory  </span><br><span class="line">      &#123;  </span><br><span class="line">        HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">        Port = <span class="number">5672</span>,  </span><br><span class="line">        UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        VirtualHost = <span class="string">&quot;/&quot;</span>  </span><br><span class="line">      &#125;;  </span><br><span class="line">      <span class="comment">// 2.通过连接工厂创建连接  </span></span><br><span class="line">      <span class="keyword">using</span> (<span class="keyword">var</span> connection = connectionFactory.CreateConnection())  </span><br><span class="line">      &#123;  </span><br><span class="line">        <span class="comment">// 3.通过connection创建Channel  </span></span><br><span class="line">        <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">        <span class="comment">// 4.通过channel发送数据  </span></span><br><span class="line">        <span class="keyword">var</span> message = <span class="string">&quot;Hello RabbitMQ&quot;</span>;  </span><br><span class="line">        <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(message);  </span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">          channel.BasicPublish(exchange: <span class="string">&quot;&quot;</span>, routingKey: <span class="string">&quot;test001&quot;</span>, basicProperties: <span class="literal">null</span>, body: body);  </span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;发送完毕&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>BasicConsumer.Program代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client.Events;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BasicConsumer</span>  </span><br><span class="line">&#123;  </span><br><span class="line"> <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line"> &#123;  </span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="comment">// 1.创建一个ConnectionFactory  </span></span><br><span class="line">    <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory  </span><br><span class="line">    &#123;  </span><br><span class="line">      HostName = <span class="string">&quot;127.0.0.1&quot;</span>,   </span><br><span class="line">      Port = <span class="number">5672</span>,  </span><br><span class="line">      UserName = <span class="string">&quot;admin&quot;</span>,   </span><br><span class="line">      Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">      VirtualHost = <span class="string">&quot;/&quot;</span>  </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="comment">// 2.通过连接工厂创建连接  </span></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> connection = connectionFactory.CreateConnection())  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">// 3.通过connection创建Channel  </span></span><br><span class="line">        <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">        <span class="comment">// 4.声明一个队列  </span></span><br><span class="line">        <span class="keyword">var</span> queue = channel.QueueDeclare(queue: <span class="string">&quot;test001&quot;</span>, durable: <span class="literal">true</span>, exclusive: <span class="literal">false</span>, autoDelete: <span class="literal">true</span>, arguments: <span class="literal">null</span>);  </span><br><span class="line">        <span class="comment">// 5.创建消费者  </span></span><br><span class="line">        <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);  </span><br><span class="line">        <span class="comment">// 6.设置Channel  </span></span><br><span class="line">        channel.BasicConsume(queue: <span class="string">&quot;test001&quot;</span>, autoAck: <span class="literal">true</span>, consumer: consumer);  </span><br><span class="line">        <span class="comment">// 7.获取消息  </span></span><br><span class="line">        consumer.Received += (model, ea) =&gt;  </span><br><span class="line">        &#123;  </span><br><span class="line">          <span class="keyword">var</span> body = ea.Body;  </span><br><span class="line">          <span class="keyword">var</span> message = Encoding.UTF8.GetString(body.ToArray());  </span><br><span class="line">          Console.WriteLine(<span class="string">$&quot;接收到消息:<span class="subst">&#123;message&#125;</span>&quot;</span>);  </span><br><span class="line">        &#125;;  </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;输入回车键键退出&quot;</span>);  </span><br><span class="line">        Console.ReadLine();  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p><strong>注意：先运行Consumer，再运行Producer</strong>，可以看到Consumer端接收到了Producer端发出的5条消息</p><h1 id="Exchange–交换机"><a href="#Exchange–交换机" class="headerlink" title="Exchange–交换机"></a>Exchange–交换机</h1><p>Exchange：接受消息，并根据路由键转发消息所绑定的队列<br><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.4qrce1j5os.webp" alt="Exchange.png"></p><h2 id="Exchange属性-交换机属性"><a href="#Exchange属性-交换机属性" class="headerlink" title="Exchange属性(交换机属性)"></a>Exchange属性(交换机属性)</h2><ul><li>Name：交换机名字</li><li>Type：交换机类型 <code>direct</code>、<code>topic</code>、<code>fanout</code>、<code>headers</code></li><li>Durability：是否需要持久化，true为持久化</li><li>Auto Delete：当最后一个绑定到Exchange上的队列删除后，自动删除该Exchange</li><li>Internal：当前Exchange是否用于RabbitMQ内部使用，默认为false</li><li>Arguments：扩展参数，用于扩展AMQP协议自制定化使用</li></ul><h2 id="Direct-Exchange"><a href="#Direct-Exchange" class="headerlink" title="Direct Exchange"></a>Direct Exchange</h2><p>所有发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue</p><p><strong>注意：Direct模式可以使用RabbitMQ自带的Exchange:default Exchange，所以不需要将Exchange进行任何绑定(bingding)操作，消息传递时，RouteKey必须完全匹配才会被队列接受，否则该消息会被抛弃</strong></p><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.3nrn35ngns.webp" alt="Direct Exchange.png"></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="创建项目-1"><a href="#创建项目-1" class="headerlink" title="创建项目"></a>创建项目</h4><p>创建两个控制台应用程序</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DirectExchange.Consumer  </span><br><span class="line">DirectExchange.Producer  </span><br></pre></td></tr></table></figure><p>再分别通过nuget引入<code>RabbitMQ.Client</code></p><h4 id="具体代码-1"><a href="#具体代码-1" class="headerlink" title="具体代码"></a>具体代码</h4><p>DirectExchange.Producer</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DirectExchange.Producer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Direct Exchange Producer Sample&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">      &#123;  </span><br><span class="line">        HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">        Port = <span class="number">5672</span>,  </span><br><span class="line">        UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        VirtualHost = <span class="string">&quot;/&quot;</span>,  </span><br><span class="line">        AutomaticRecoveryEnabled = <span class="literal">true</span>,  </span><br><span class="line">        NetworkRecoveryInterval = TimeSpan.FromSeconds(<span class="number">3</span>)  </span><br><span class="line">      &#125;;  </span><br><span class="line">      <span class="keyword">using</span> (<span class="keyword">var</span> connection = connectionFactory.CreateConnection())  </span><br><span class="line">      &#123;  </span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> channel = connection.CreateModel())  </span><br><span class="line">        &#123;  </span><br><span class="line">          <span class="keyword">var</span> exchangeName = <span class="string">&quot;test_direct_exchange&quot;</span>;  </span><br><span class="line">          <span class="keyword">var</span> routingKey = <span class="string">&quot;test.direct&quot;</span>;  </span><br><span class="line">            </span><br><span class="line">          <span class="keyword">var</span> message = <span class="string">&quot;Hello World RabbitMQ For Direct Exchange&quot;</span>;  </span><br><span class="line">          <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(message);  </span><br><span class="line">            </span><br><span class="line">          channel.BasicPublish(exchangeName, routingKey, <span class="literal">null</span>, body);  </span><br><span class="line">        &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">        </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;消息发送完毕&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>DirectExchange.Consumer</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client.Events;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DirectExchange.Consumer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Direct Exchange Consumer Sample&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">      &#123;  </span><br><span class="line">        HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">        Port = <span class="number">5672</span>,  </span><br><span class="line">        UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        VirtualHost = <span class="string">&quot;/&quot;</span>,  </span><br><span class="line">        AutomaticRecoveryEnabled = <span class="literal">true</span>,  </span><br><span class="line">        NetworkRecoveryInterval = TimeSpan.FromSeconds(<span class="number">3</span>)  </span><br><span class="line">      &#125;;  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> connection = connectionFactory.CreateConnection();  </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> exchangeName = <span class="string">&quot;test_direct_exchange&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> queueName = <span class="string">&quot;test_direct_queue&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> routingKey = <span class="string">&quot;test.direct&quot;</span>;  </span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 声明一个交换机  </span></span><br><span class="line">      channel.ExchangeDeclare(exchange: exchangeName, type: ExchangeType.Direct, durable: <span class="literal">true</span>, autoDelete: <span class="literal">false</span>, arguments: <span class="literal">null</span>);  </span><br><span class="line">      <span class="comment">// 声明一个队列  </span></span><br><span class="line">      channel.QueueDeclare(queue: queueName, durable: <span class="literal">true</span>, exclusive: <span class="literal">false</span>, autoDelete: <span class="literal">false</span>, arguments: <span class="literal">null</span>);  </span><br><span class="line">      <span class="comment">// 建立一个绑定关系  </span></span><br><span class="line">      channel.QueueBind(queue:queueName,exchange:exchangeName,routingKey:routingKey);  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);  </span><br><span class="line">      channel.BasicConsume(queue: queueName, autoAck: <span class="literal">true</span>, consumer);  </span><br><span class="line">      consumer.Received += (model, ea) =&gt;  </span><br><span class="line">      &#123;  </span><br><span class="line">        <span class="keyword">var</span> body = ea.Body;  </span><br><span class="line">        <span class="keyword">var</span> message = Encoding.UTF8.GetString(body.ToArray());  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;接收到消息：<span class="subst">&#123;message&#125;</span>&quot;</span>);  </span><br><span class="line">      &#125;;  </span><br><span class="line">        </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;输入回车键退出...&quot;</span>);  </span><br><span class="line">      Console.ReadLine();  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="Topic-Exchange"><a href="#Topic-Exchange" class="headerlink" title="Topic Exchange"></a>Topic Exchange</h2><p>所有发送到Topic Exchange的消息都会被转发到所有关系RouteKey中指定Topic的Queue上</p><p>Exchange将RouteKey和某个Topic进行模糊匹配，此时队列需要绑定一个Topic</p><p><em>注意：可以使用通配符进行模糊匹配</em></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">符号<span class="string">&quot;#&quot;</span>匹配一个或多个词  </span><br><span class="line">符号<span class="string">&quot;\*&quot;</span>匹配不多不少一个词  </span><br><span class="line">例如：<span class="string">&quot;log.#&quot;</span> 能够匹配到 <span class="string">&quot;log.info.oa&quot;</span>  </span><br><span class="line"> <span class="string">&quot;log.\*&quot;</span> 只能够匹配到 <span class="string">&quot;log.error&quot;</span>  </span><br></pre></td></tr></table></figure><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.7zqgap6y0v.webp" alt="Topic Exchange.png"></p><h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="创建项目-2"><a href="#创建项目-2" class="headerlink" title="创建项目"></a>创建项目</h4><p>创建两个控制台应用程序</p><p>TopicExchange.Consumer<br>TopicExchange.Producer  </p><p>再分别通过nuget引入<code>RabbitMQ.Client</code></p><h4 id="具体代码-2"><a href="#具体代码-2" class="headerlink" title="具体代码"></a>具体代码</h4><p>TopicExchange.Producer</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TopicExchange.Producer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>\[\] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;\*\*\*\* Topic Exchange Producer Sample \*\*\*\*&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">      &#123;  </span><br><span class="line">        HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">        Port = <span class="number">5672</span>,  </span><br><span class="line">        UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        VirtualHost = <span class="string">&quot;/&quot;</span>,  </span><br><span class="line">        AutomaticRecoveryEnabled = <span class="literal">true</span>,  </span><br><span class="line">        NetworkRecoveryInterval = TimeSpan.FromSeconds(<span class="number">3</span>)  </span><br><span class="line">      &#125;;  </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> connection = connectionFactory.CreateConnection();  </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> exchangeName = <span class="string">&quot;test_topic_exchange&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> routingKey1 = <span class="string">&quot;user.save&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> routingKey2 = <span class="string">&quot;user.update&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> routingKey3 = <span class="string">&quot;user.delete.abc&quot;</span>;  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> message = <span class="string">&quot;Hello World RabbitMQ For Topic Exchange Message&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(message);  </span><br><span class="line">        </span><br><span class="line">      channel.BasicPublish(exchange: exchangeName, routingKey: routingKey1, basicProperties: <span class="literal">null</span>, body);  </span><br><span class="line">      channel.BasicPublish(exchange: exchangeName, routingKey: routingKey2, basicProperties: <span class="literal">null</span>, body);  </span><br><span class="line">      channel.BasicPublish(exchange: exchangeName, routingKey: routingKey3, basicProperties: <span class="literal">null</span>, body);  </span><br><span class="line">        </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;消息发送完毕&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>TopicExchange.Consumer</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client.Events;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TopicExchange.Consumer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;\*\*\*\* Topic Exchange Consumer Sample \*\*\*\*&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">      &#123;  </span><br><span class="line">        HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">        Port = <span class="number">5672</span>,  </span><br><span class="line">        UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        VirtualHost = <span class="string">&quot;/&quot;</span>,  </span><br><span class="line">        AutomaticRecoveryEnabled = <span class="literal">true</span>,  </span><br><span class="line">        NetworkRecoveryInterval = TimeSpan.FromSeconds(<span class="number">3</span>)  </span><br><span class="line">      &#125;;  </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> connection = connectionFactory.CreateConnection();  </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> exchangeName = <span class="string">&quot;test_topic_exchange&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> queueName = <span class="string">&quot;test_topic_queue&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> routingKey = <span class="string">&quot;user.\*&quot;</span>;  </span><br><span class="line">      <span class="comment">// 声明交换机  </span></span><br><span class="line">      channel.ExchangeDeclare(exchange: exchangeName, type: ExchangeType.Topic, durable: <span class="literal">true</span>, autoDelete: <span class="literal">false</span>, arguments: <span class="literal">null</span>);  </span><br><span class="line">      <span class="comment">// 声明队列  </span></span><br><span class="line">      channel.QueueDeclare(queue: queueName, durable: <span class="literal">false</span>, exclusive: <span class="literal">false</span>, autoDelete: <span class="literal">false</span>, arguments: <span class="literal">null</span>);  </span><br><span class="line">      <span class="comment">// 建立绑定关系  </span></span><br><span class="line">      channel.QueueBind(queue: queueName, exchange: exchangeName, routingKey: routingKey);  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);  </span><br><span class="line">      channel.BasicConsume(queue: queueName, autoAck: <span class="literal">true</span>, consumer: consumer);  </span><br><span class="line">      consumer.Received += (model, ea) =&gt;  </span><br><span class="line">      &#123;  </span><br><span class="line">      <span class="keyword">var</span> body = ea.Body;  </span><br><span class="line">      <span class="keyword">var</span> message = Encoding.UTF8.GetString(body.ToArray());  </span><br><span class="line">        </span><br><span class="line">      Console.WriteLine(<span class="string">$&quot;接收到消息：<span class="subst">&#123;message&#125;</span>   RoutingKey=<span class="subst">&#123;ea.RoutingKey&#125;</span>&quot;</span>);  </span><br><span class="line">    &#125;;  </span><br><span class="line">      </span><br><span class="line">    Console.WriteLine(<span class="string">&quot;输入回车退出...&quot;</span>);  </span><br><span class="line">    Console.ReadLine();  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="Fanout-Exchange"><a href="#Fanout-Exchange" class="headerlink" title="Fanout Exchange"></a>Fanout Exchange</h2><p>不处理路由键，只需要简单的队列绑定到交换机上，发送到交换机上的消息都会被转发到与该交换机绑定的所有队列上，<strong>Fanout交换机转发消息是最快的</strong></p><p><img src="https://filebed.fantasyke.cn/file/blogContent/rabbitMQ/image.491apgi7ud.webp" alt="Fanout Exchange.png"></p><h3 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="创建项目-3"><a href="#创建项目-3" class="headerlink" title="创建项目"></a>创建项目</h4><p>创建两个控制台应用程序</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FanoutExchange.Consumer  </span><br><span class="line">FanoutExchange.Producer  </span><br></pre></td></tr></table></figure><p>再分别通过nuget引入<code>RabbitMQ.Client</code></p><h4 id="具体代码-3"><a href="#具体代码-3" class="headerlink" title="具体代码"></a>具体代码</h4><p>FanoutExchange.Producer</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">FanoutExchange.Producer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>\[\] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;\*\*\*\* Fanout Exchange Producer Sample \*\*\*\*&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">      &#123;  </span><br><span class="line">        HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">        Port = <span class="number">5672</span>,  </span><br><span class="line">        UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        VirtualHost = <span class="string">&quot;/&quot;</span>,  </span><br><span class="line">        AutomaticRecoveryEnabled = <span class="literal">true</span>,  </span><br><span class="line">        NetworkRecoveryInterval = TimeSpan.FromSeconds(<span class="number">3</span>)  </span><br><span class="line">      &#125;;  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> connection = connectionFactory.CreateConnection();  </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> exchangeName = <span class="string">&quot;test_fanout_exchange&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> message = <span class="string">&quot;Hello World RabbitMQ For Fanout Exchange&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> body = Encoding.UTF8.GetBytes(message);  </span><br><span class="line">      channel.BasicPublish(exchange: exchangeName, routingKey: <span class="string">&quot;&quot;</span>, basicProperties: <span class="literal">null</span>, body: body);  </span><br><span class="line">        </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;消息发送完毕&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>FanoutExchange.Consumer</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;  </span><br><span class="line"><span class="keyword">using</span> System.Text;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client;  </span><br><span class="line"><span class="keyword">using</span> RabbitMQ.Client.Events;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">FanoutExchange.Consumer</span>  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">class</span> <span class="title">Program</span>  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>\[\] <span class="keyword">args</span></span>)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;\*\*\*\* Fanout Exchange Consumer Sample \*\*\*\*&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> connectionFactory = <span class="keyword">new</span> ConnectionFactory()  </span><br><span class="line">      &#123;  </span><br><span class="line">        HostName = <span class="string">&quot;127.0.0.1&quot;</span>,  </span><br><span class="line">        Port = <span class="number">5672</span>,  </span><br><span class="line">        UserName = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        Password = <span class="string">&quot;admin&quot;</span>,  </span><br><span class="line">        VirtualHost = <span class="string">&quot;/&quot;</span>,  </span><br><span class="line">        AutomaticRecoveryEnabled = <span class="literal">true</span>,  </span><br><span class="line">        NetworkRecoveryInterval = TimeSpan.FromSeconds(<span class="number">3</span>)  </span><br><span class="line">      &#125;;  </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> connection = connectionFactory.CreateConnection();  </span><br><span class="line">      <span class="keyword">using</span> <span class="keyword">var</span> channel = connection.CreateModel();  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> exchangeName = <span class="string">&quot;test_fanout_exchange&quot;</span>;  </span><br><span class="line">      <span class="keyword">var</span> queueName = <span class="string">&quot;test_fanout_queue&quot;</span>;  </span><br><span class="line">      <span class="comment">// 声明  </span></span><br><span class="line">      channel.ExchangeDeclare(exchange: exchangeName, type: ExchangeType.Fanout, durable: <span class="literal">true</span>, autoDelete: <span class="literal">false</span>, arguments: <span class="literal">null</span>);  </span><br><span class="line">      channel.QueueDeclare(queue: queueName, durable: <span class="literal">true</span>, exclusive: <span class="literal">false</span>, autoDelete: <span class="literal">false</span>, arguments: <span class="literal">null</span>);  </span><br><span class="line">      channel.QueueBind(queue:queueName,exchange:exchangeName,<span class="string">&quot;&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">      <span class="keyword">var</span> consumer = <span class="keyword">new</span> EventingBasicConsumer(channel);  </span><br><span class="line">      channel.BasicConsume(queue: queueName, autoAck: <span class="literal">true</span>, consumer);  </span><br><span class="line">      consumer.Received += (model, ea) =&gt;  </span><br><span class="line">      &#123;  </span><br><span class="line">        <span class="keyword">var</span> body = ea.Body;  </span><br><span class="line">        <span class="keyword">var</span> message = Encoding.UTF8.GetString(body.ToArray());  </span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;接收到消息：<span class="subst">&#123;message&#125;</span>&quot;</span>);  </span><br><span class="line">      &#125;;  </span><br><span class="line">      Console.WriteLine(<span class="string">&quot;输入回车退出...&quot;</span>);  </span><br><span class="line">      Console.ReadLine();  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h1 id="Binding–绑定"><a href="#Binding–绑定" class="headerlink" title="Binding–绑定"></a>Binding–绑定</h1><ul><li>Exchange和Exchange、Queue之间的连接关系</li><li>Binding中可以包含RoutingKey或参数</li></ul><h1 id="Queue–消息队列"><a href="#Queue–消息队列" class="headerlink" title="Queue–消息队列"></a>Queue–消息队列</h1><ul><li>消息队列，实际存储消息数据</li><li>Durability：是否持久化，Durable：是，Transient：否</li><li>Auto Delete：如果是yes，则代表当最后一个监听被移除之后，该queue会被自动删除</li></ul><h1 id="Message–消息"><a href="#Message–消息" class="headerlink" title="Message–消息"></a>Message–消息</h1><ul><li>服务器和应用程序之间传送的数据</li><li>本质上就是一段数据，由Properties和Payload(Body)组成</li><li>常用属性：delivery mode、headers（自定义属性）</li><li>content_type、content_encoding、priority(优先级)</li><li>correlation_id（消息唯一ID）、reply_to（消息处理失败了返回哪个队列）、expiration（消息过期时间，多久时间没被消费就过期）、message_id</li><li>timestamp、type、user_id、app_id、cluster_id</li></ul><h1 id="Virtual-Hots–虚拟主机"><a href="#Virtual-Hots–虚拟主机" class="headerlink" title="Virtual Hots–虚拟主机"></a>Virtual Hots–虚拟主机</h1><ul><li>虚拟地址，用于进行逻辑隔离，最上层的消息路由</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/posts/5729df21.html"/>
      <url>/posts/5729df21.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机概念"><a href="#计算机概念" class="headerlink" title="计算机概念"></a>计算机概念</h1><h2 id="进"><a href="#进" class="headerlink" title="进"></a>进</h2><span id="more"></span><h1 id="计算机概念-1"><a href="#计算机概念-1" class="headerlink" title="计算机概念"></a>计算机概念</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><pre><code>程序在服务器运行时，占据的计算资源合计，称之为进程。进程之间不会相互干扰，但是进程间的通信比较困难（分布式）。</code></pre><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><pre><code>程序执行的最小单位，相应操作的最小执行流，线程也包含自己的计算资源。线程是属于进程的，一个进程可以有多个线程。</code></pre><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><pre><code>一个进程里面，有多个线程并发执行</code></pre><h1 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h1><h2 id="多线程Thread"><a href="#多线程Thread" class="headerlink" title="多线程Thread"></a>多线程Thread</h2><pre><code>`Thread`是一个类，就是一个封装，是.NET对线程对象的抽象封装，通过`Thread`去完成的操作，最终是通过像操作系统请求得到的执行流*   `CurrentThread`：当前线程–任何操作执行都是线程完成的，即获得运行当前这句话的线程*   `ManagerThreadId`：是.NET平台给Thread起的名字，就是一个`int`值，尽量不重复*   同步单线程方法：按顺序执行，每次调用完成后才能进下一行，是同一个线程运行的*   异步多线程方法：发起调用，不等待结果就直接进入下一行(主线程)，动作会由一个新线程来执行(子线程)</code></pre><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><h2 id="界面卡顿"><a href="#界面卡顿" class="headerlink" title="界面卡顿"></a>界面卡顿</h2><pre><code>*   同步单线程方法卡界面 —- 主(UI)线程线程忙于计算，所以不能相应*   异步多线程不卡界面 —- 计算任务交给子线程，主(UI)线程已经闲置，可以相应别的操作*   多线程对于C/S：点击按钮后能不卡死，例如：上传文件界面不卡死*   多线程对于B/S：例如：用户注册时同时发邮件/发短信/写日志</code></pre><h2 id="执行速度"><a href="#执行速度" class="headerlink" title="执行速度"></a>执行速度</h2><pre><code>*   同步单线程方法慢 —- 因为只有一个线程在计算*   异步多线程方法快 —- 因为多个线程并发计算*   多线程就是用资源换性能*   但是两者的速度差不是线性增长，例如1个线程耗时1000毫秒，5个线程不代表能做到耗时200毫秒。说明多线程的协调管理由额外的成本，同时资源也是由上限的*   所以：线程并不是越多越好</code></pre><h2 id="无序性"><a href="#无序性" class="headerlink" title="无序性"></a>无序性</h2><pre><code>*   启动无序：几乎同一时间向操作系统请求线程，因为线程时操作系统资源，CLR只能去申请，具体时什么顺序启动这个无法掌握*   执行时间不确定：同个线程同个任务耗时都不一样，更何况多个任务多个线程。这跟操作系统的资源调度策略有关*   结束无序：上面的都无序，结束时间怎么可能有序</code></pre><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><pre><code>使用多线程时，千万不要通过延时等方式去掌控顺序</code></pre><h1 id="多线程控制顺序"><a href="#多线程控制顺序" class="headerlink" title="多线程控制顺序"></a>多线程控制顺序</h1><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><h2 id="死循环IsCompleted等待"><a href="#死循环IsCompleted等待" class="headerlink" title="死循环IsCompleted等待"></a>死循环IsCompleted等待</h2><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><h2 id="EndInvoke获得返回值"><a href="#EndInvoke获得返回值" class="headerlink" title="EndInvoke获得返回值"></a>EndInvoke获得返回值</h2><h1 id="使用各个版本的多线程处理方式"><a href="#使用各个版本的多线程处理方式" class="headerlink" title="使用各个版本的多线程处理方式"></a>使用各个版本的多线程处理方式</h1><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Thread的API特别丰富，可以玩的很花哨，但是其实大部分人都玩不好，因为线程资源是操作系统管理的，相应并部灵敏，所以没那么好控制  </span></span><br><span class="line"><span class="comment">// Thread启动线程是没限制的，一个for循环启动几百万个线程，分分钟搞死服务器  </span></span><br><span class="line">ThreadStart threadHandler = () =&gt;  </span><br><span class="line">&#123;  </span><br><span class="line">  Console.WriteLine(<span class="string">$&quot;Thread Start。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);   </span><br><span class="line">  Thread.Sleep(<span class="number">2000</span>);  </span><br><span class="line">  Console.WriteLine(<span class="string">$&quot;Thread End。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">var</span> thread = <span class="keyword">new</span> Thread(threadHandler);  </span><br><span class="line">thread.Start();  </span><br></pre></td></tr></table></figure><h2 id="ThreadPool"><a href="#ThreadPool" class="headerlink" title="ThreadPool"></a>ThreadPool</h2><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPool：池化资源管理设计思想，线程是一种资源，以前要用到线程就去申请一个，使用完释放掉。  </span></span><br><span class="line"><span class="comment">// 这样是一种浪费，池化就是一个容器，容器提前申请一批线程，程序需要使用线程，直接找容器获取，用完再放回容器(通过控制资源的状态)，避免频繁的申请和销毁，容器自己还会根据限制的数量去申请和释放  </span></span><br><span class="line"><span class="comment">// 好处：1.线程服用，2.可以限制最大线程数量  </span></span><br><span class="line"><span class="comment">// 缺点：ThreadPool的API太少了，线程等待顺序控制比较弱，影响了实战  </span></span><br><span class="line">WaitCallback callback = o =&gt;  </span><br><span class="line">&#123;  </span><br><span class="line">  Console.WriteLine(<span class="string">$&quot;ThreadPool Start。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line">  Thread.Sleep(<span class="number">2000</span>);  </span><br><span class="line">  Console.WriteLine(<span class="string">$&quot;ThreadPool End。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line">&#125;;  </span><br><span class="line">ThreadPool.QueueUserWorkItem(callback);  </span><br></pre></td></tr></table></figure><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Task:多线程最佳实践  </span></span><br><span class="line"><span class="comment">// 优点：1.Task的线程券是线程池的线程  2.提供了丰富的API，非常适合开发实践  </span></span><br><span class="line">Action action = () =&gt;  </span><br><span class="line">&#123;  </span><br><span class="line">  Console.WriteLine(<span class="string">$&quot;Task Start。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line">  Thread.Sleep(<span class="number">2000</span>);  </span><br><span class="line">  Console.WriteLine(<span class="string">$&quot;Task End。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line">&#125;;  </span><br><span class="line">Task task = <span class="keyword">new</span> Task(action);  </span><br><span class="line">task.Start();  </span><br></pre></td></tr></table></figure><h2 id="Parallel"><a href="#Parallel" class="headerlink" title="Parallel"></a>Parallel</h2><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Parallel：并行编程  </span></span><br><span class="line"><span class="comment">// 可以同时执行多个操作，同时主线程也会参与计算，不会闲置。可以节约一个线程  </span></span><br><span class="line"><span class="comment">// 可以通过ParallelOptions的MaxDegreeOfParallelism控制最大并发数量  </span></span><br><span class="line">Parallel.Invoke(() =&gt;  </span><br><span class="line"> &#123;  </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Parallel 1 Start。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line">    Thread.Sleep(<span class="number">2000</span>);  </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Parallel 1 End。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line"> &#125;,  </span><br><span class="line"> () =&gt;  </span><br><span class="line"> &#123;  </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Parallel 2 Start。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line">    Thread.Sleep(<span class="number">2000</span>);  </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Parallel 2 End。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line"> &#125;,  </span><br><span class="line"> () =&gt;  </span><br><span class="line"> &#123;  </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Parallel 3 Start。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line">    Thread.Sleep(<span class="number">2000</span>);  </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;Parallel 3 End。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line"> &#125;);  </span><br></pre></td></tr></table></figure><h1 id="Task比较全面示例"><a href="#Task比较全面示例" class="headerlink" title="Task比较全面示例"></a>Task比较全面示例</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Coding</span>(<span class="params"><span class="built_in">string</span> dev, <span class="built_in">string</span> module</span>)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">var</span> random = <span class="keyword">new</span> Random();  </span><br><span class="line">  <span class="keyword">var</span> stopWatch = <span class="keyword">new</span> Stopwatch();  </span><br><span class="line">  stopWatch.Start();  </span><br><span class="line">  Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;dev&#125;</span>开发<span class="subst">&#123;module&#125;</span>模块 开始.......... ManagedThreadId=<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line">  Thread.Sleep(random.Next(<span class="number">1000</span>, <span class="number">5000</span>));  </span><br><span class="line">  stopWatch.Stop();  </span><br><span class="line">  Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;dev&#125;</span>开发<span class="subst">&#123;module&#125;</span>模块 完成.......... ManagedThreadId=<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>   共耗时<span class="subst">&#123;stopWatch.ElapsedMilliseconds&#125;</span>毫秒&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AllJob</span>()</span>  </span><br><span class="line">&#123;  </span><br><span class="line">  Console.WriteLine(<span class="string">&quot;谈需求...&quot;</span>);  </span><br><span class="line">  Console.WriteLine(<span class="string">&quot;选成员...&quot;</span>);  </span><br><span class="line">  Console.WriteLine(<span class="string">&quot;分配模块...&quot;</span>);  </span><br><span class="line">    </span><br><span class="line">  List&lt;Task&gt; tasks = <span class="keyword">new</span> List&lt;Task&gt;();  </span><br><span class="line">    </span><br><span class="line">  tasks.Add(Task.Run(() =&gt; Coding(<span class="string">&quot;张小三&quot;</span>, <span class="string">&quot;用户管理&quot;</span>)));  </span><br><span class="line">  tasks.Add(Task.Run(() =&gt; Coding(<span class="string">&quot;李筱思&quot;</span>, <span class="string">&quot;商品管理&quot;</span>)));  </span><br><span class="line">  tasks.Add(Task.Run(() =&gt; Coding(<span class="string">&quot;王小五&quot;</span>, <span class="string">&quot;订单管理&quot;</span>)));  </span><br><span class="line">  tasks.Add(Task.Run(() =&gt; Coding(<span class="string">&quot;赵小六&quot;</span>, <span class="string">&quot;售后管理&quot;</span>)));  </span><br><span class="line">    </span><br><span class="line">  TaskFactory taskFactory = <span class="keyword">new</span> TaskFactory();  </span><br><span class="line">  taskFactory.ContinueWhenAny(tasks.ToArray(), t =&gt;  </span><br><span class="line">  &#123;  </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;达到里程碑...  ManagerThreadId=<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line">  &#125;);  </span><br><span class="line">  <span class="comment">// 等待全部任务完成后，启动一个新的task来完成后续动作  </span></span><br><span class="line">  taskFactory.ContinueWhenAll(tasks.ToArray(), tArray =&gt;  </span><br><span class="line">  &#123;  </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;项目上线...  ManagerThreadId=<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;项目验收...  ManagerThreadId=<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;支付费用...  ManagerThreadId=<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);  </span><br><span class="line">  &#125;);  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 会阻塞当前线程，直到任一任务结束  </span></span><br><span class="line"> Task.WaitAny(tasks.ToArray());  </span><br><span class="line"> Console.WriteLine(<span class="string">&quot;达到里程碑...&quot;</span>);  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">// 等待上面所有的多线程都计算完毕  </span></span><br><span class="line"> <span class="comment">// 会阻塞当前线程，直到全部任务结束  </span></span><br><span class="line"> Task.WaitAll(tasks.ToArray());  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"> Console.WriteLine(<span class="string">&quot;项目上线...&quot;</span>);  </span><br><span class="line"> Console.WriteLine(<span class="string">&quot;项目验收...&quot;</span>);  </span><br><span class="line"> Console.WriteLine(<span class="string">&quot;支付费用...&quot;</span>);  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h1 id="多线程安全"><a href="#多线程安全" class="headerlink" title="多线程安全"></a>多线程安全</h1><pre><code>如果一段代码，单线程执行和多线程执行结果不一致，就表明由线程安全问题</code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码技巧 --- 使用dynamic简化反射</title>
      <link href="/posts/26352.html"/>
      <url>/posts/26352.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>dynamic</strong> 是 <code>Framework 4.0</code> 就出现特性，它的出现让 C# 具有了弱语言类型的特性。编译器在编译的时候不再对类型进行检查，默认 <strong>dynamic</strong> 对象支持开发者想要的任何特性。</p><span id="more"></span><h2 id="dynamic-介绍"><a href="#dynamic-介绍" class="headerlink" title="dynamic 介绍"></a>dynamic 介绍</h2><p>在C#中，dynamic是一种类型，它允许你在运行时动态地确定对象的类型。</p><p>使用dynamic类型可以使代码更加灵活，因为不需要在编译时知道对象的确切类型，而可以在运行时根据需要确定类型。</p><h3 id="确保dynamic对象调用有效"><a href="#确保dynamic对象调用有效" class="headerlink" title="确保dynamic对象调用有效"></a>确保dynamic对象调用有效</h3><p>但是正因为你不知道对象的确切类型，所以在编码时一定要注意，确保对象的类型和属性和方法的存在，否则代码可能会引发运行时异常。</p><p>比如以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">dynamic</span> dynamicObject = <span class="keyword">new</span> Person();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> attr1 = dynamicObject.Name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> attr2 = dynamicObject.GetAge();</span><br><span class="line"></span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Gender &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">MakeMoney</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述在编译时是不会报错的，但是在运行时，执行第二句是没问题的，因为得到的 <code>dynamicObject</code> 对象是有 <code>Name</code> ，<code>Gender</code> 两个属性的，但是执行第三句时就会抛出异常 <code>Microsoft.CSharp.RuntimeBinder.RuntimeBinderException</code> ，并提示 <code>does not contain a definition for &#39;GetAge&#39;</code>。</p><h3 id="dynamic-与-var"><a href="#dynamic-与-var" class="headerlink" title="dynamic 与 var"></a>dynamic 与 var</h3><p>有时候会将 <code>var</code> 关键字与 <code>dynamic</code> 进行对比，那么我觉得主要有以下几点：</p><ol><li><code>var</code> 用于在编译时推断变量类型，可以将其视为一种简写方式，将变量类型的声明推迟到编译时。而 <code>dynamic</code> 则是一种在运行时动态确定对象类型的类型。它允许您在运行时调用对象的属性和方法，而不需要在编译时确定对象的确切类型。</li><li><code>var</code>声明的变量在Visual Studio编译器中能够使用IntelliCode进行“智能提示”，因为Visual Studio编译器在此阶段是可以推断出其实际类型，而<code>dynamic</code> 类型的变量不可以进行”智能提示“。</li><li><code>var</code> 类型的变量可以使代码更加简洁和易于阅读，而使用 <code>dynamic</code> 类型的变量则可以使代码更加灵活和动态。</li></ol><h2 id="使用-dynamic-简化反射"><a href="#使用-dynamic-简化反射" class="headerlink" title="使用 dynamic 简化反射"></a>使用 dynamic 简化反射</h2><p>常规使用反射，调用上文中 <code>Person</code> 类 <code>MakeMoney()</code>方法，如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> method = <span class="keyword">typeof</span>(Person).GetMethod(<span class="string">&quot;MakeMoney&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> moneys = (<span class="built_in">int</span>)method.Invoke(person, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">那如果使用 **<span class="built_in">dynamic</span>** 进行简化，则像这样：</span><br><span class="line"></span><br><span class="line"><span class="built_in">dynamic</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> moneys = person.MakeMoney();</span><br></pre></td></tr></table></figure><p>这样使用 <strong>dynamic</strong> 后，代码更简洁，而且也减少了一次拆箱操作。</p><p><a href="https://niuery.com/post/58">基准测试工具 — BenchmarkDotNet</a>这篇文章中，介绍了使用 <strong>BenchmarkDotNet</strong> 来测试性能，接下来依然使用 <strong>BenchmarkDotNet</strong> 来测试以下，测试一下执行100000次，上述两种方式的区别：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    BenchmarkRunner.Run&lt;BenchmarkTest&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">SimpleJob(RunStrategy.ColdStart, iterationCount: 100000)</span>]</span><br><span class="line">[<span class="meta">MemoryDiagnoser</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BenchmarkTest</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Benchmark()</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">UseReflection</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> method = <span class="keyword">typeof</span>(Person).GetMethod(<span class="string">&quot;MakeMoney&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> moneys = (<span class="built_in">int</span>)method.Invoke(person, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> moneys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Benchmark()</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">UseDynamic</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dynamic</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> moneys = person.MakeMoney();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> moneys;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下 <strong>BenchmarkDotNet</strong> 测试结果，从报告中能看出来，使用 Dynamic 方式的方法的平均执行时间（Mean）和内存分配（AllLocated）时远小于使用反射实现的。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/6525a4af3162ab178d8351644358b473.image.png" alt="image.png"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在相同数量级的反射实现和使用 Dynamic 方式实现， Dynamic 方式在执行时间或内存分配或代码简洁都是有优势的，所以<strong>推荐使用 dynameic 来简化反射实现</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读 --- yield 关键字</title>
      <link href="/posts/18321.html"/>
      <url>/posts/18321.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>yield</strong>关键字是 C# 中的一种语言特性，用于在枚举器中简化迭代器的实现。它使得开发人员可以通过定义自己的迭代器来简化代码，而不必手动实现 IEnumerable 和 IEnumerator 接口。</p><span id="more"></span><p>使用 <code>yield</code> 关键字，可以将迭代器中的值一次一个地返回，而不必使用一个集合对象存储所有的值。当执行到<code>yield return</code>语句时，代码将会暂停执行，将返回值传递给迭代器的调用者，并将迭代器的状态保存下来。当下一次调用<code>MoveNext</code>方法时，代码将从之前的暂停点继续执行，直到遇到下一个<code>yield return</code>语句或者迭代器结束。</p><p>接下来探索一下 <code>yield</code> 的三种玩法：</p><h2 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h2><p>例如通过 <code>yield</code> 创建出一个 <code>IEnumerable</code> 以供 <code>foreach</code> 遍历，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="function"><span class="built_in">int</span> i <span class="keyword">in</span> <span class="title">EvenSequence</span>(<span class="params"><span class="number">5</span>, <span class="number">18</span></span>))</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.Write(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> IEnumerable&lt;<span class="built_in">int</span>&gt; <span class="title">EvenSequence</span>(<span class="params"><span class="built_in">int</span> start, <span class="built_in">int</span> end</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = start; i &lt;= end; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">yield</span> <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们定义了一个名为<code>EvenSequence</code>的方法，它返回一个实现了<code>IEnumerable&lt;int&gt;</code>接口的对象。在<code>EvenSequence</code>方法中，我们使用<code>yield return</code>语句来返回每个偶数值，并在每次暂停后保存方法的状态。</p><p>在<code>Main</code>方法中，我们使用<code>foreach</code>循环语句来遍历<code>EvenSequence</code>方法返回的集合对象，并输出每个偶数值。由于我们使用了 yield 关键字，即使我们没有显式地实现<code>IEnumerable</code>和<code>IEnumerator</code>接口，也能够遍历集合对象。</p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>另一个方面，<strong>异步编程中也常常使用yield来创建异步生成器</strong>。使用yield创建异步生成器可以让我们轻松地以异步方式生成一系列值，而无需显式地管理异步状态。如以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        AsynchronousIterate();</span><br><span class="line"></span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">AsynchronousIterate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> number <span class="keyword">in</span> <span class="title">GenerateNumbersAsync</span>())</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> IAsyncEnumerable&lt;<span class="built_in">int</span>&gt; <span class="title">GenerateNumbersAsync</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码定义了一个名为 <code>GenerateNumbersAsync</code> 的异步方法，该方法返回一个 <code>IAsyncEnumerable&lt;int&gt;</code> 类型的对象。在方法体中，我们使用一个 <code>for</code> 循环来生成一系列整数，并在每次迭代中异步等待1秒钟。紧接着，我们使用 <code>yield return</code> 语句将生成的整数返回给调用方。 要注意调用时使用异步迭代器（具有 <code>await</code> 关键字的<code>foreach</code>）来进行遍历&gt;。</p><p>上述输出则是一秒输出一个结果，知道全部输出。</p><h2 id="进阶举例场景"><a href="#进阶举例场景" class="headerlink" title="进阶举例场景"></a>进阶举例场景</h2><p>现在有这一样一个场景，有一大缸水，你手里有一个水瓢，，现在需要你把水缸里的水，全部移到另一个水缸。</p><p>前提条件：现在不知道缸里由具体多少水，也无法确定一瓢能舀多少，也无法确定你每一次舀水操作需要多长时间。</p><p>现在写一段代码，模拟这个过程。</p><p>拟定前提条件，如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Random Random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 假设水缸能盛水90~100</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">GetOneWaterTankCapacity</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Random.Next(<span class="number">150</span>, <span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 假设水瓢一次只能舀水2~5</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">GetOneWaterLadleCapacity</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> Random.Next(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 模拟舀水所消耗的时间(0.5s~2S)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;<span class="built_in">int</span>&gt; <span class="title">ScoopingWater</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> Task.Delay(Random.Next(<span class="number">500</span>, <span class="number">2000</span>));</span><br><span class="line">    <span class="keyword">return</span> GetOneWaterLadleCapacity();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始舀水，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 开始搬水</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">MoveWater</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//先确定缸里有多少水</span></span><br><span class="line">    <span class="keyword">var</span> WaterTankCapacity = GetOneWaterTankCapacity();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">foreach</span> (<span class="function"><span class="keyword">var</span> item <span class="keyword">in</span> <span class="title">CreateTasks</span>(<span class="params">WaterTankCapacity</span>))</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;这一瓢舀水量：<span class="subst">&#123;item.Result&#125;</span>\t<span class="subst">&#123;DateTime.Now&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;水全部舀完~\t<span class="subst">&#123;DateTime.Now&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">async</span> IAsyncEnumerable&lt;Task&lt;<span class="built_in">int</span>&gt;&gt; CreateTasks(<span class="built_in">int</span> waterTankCapacity)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> totle = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (totle &lt; waterTankCapacity)</span><br><span class="line">    &#123;</span><br><span class="line">        Task&lt;<span class="built_in">int</span>&gt; someWater = ScoopingWater();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> someWater;</span><br><span class="line"></span><br><span class="line">        totle += <span class="keyword">await</span> someWater;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终会每次随机舀水，花费随机时间，水全部舀完。</p><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">4 2023/5/11 23:06:29</span><br><span class="line">这一瓢舀水量：3 2023/5/11 23:06:30</span><br><span class="line">这一瓢舀水量：2 2023/5/11 23:06:32</span><br><span class="line">这一瓢舀水量：2 2023/5/11 23:06:34</span><br><span class="line">这一瓢舀水量：3 2023/5/11 23:06:35</span><br><span class="line">这一瓢舀水量：4 2023/5/11 23:06:36</span><br><span class="line">这一瓢舀水量：2 2023/5/11 23:06:37</span><br><span class="line">....</span><br><span class="line">水全部舀完~     2023/5/11 23:07:27</span><br></pre></td></tr></table></figure><p>通过上文例子，可以更深入理解 <code>yield</code> 创建的异步生成器。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>使用 <code>yield</code> 关键字可以将一个方法转换为一个返回可枚举对象或迭代器的方法，而不必手动实现 IEnumerable 和 IEnumerator 接口</li><li>使用 <code>yield</code> 来创建异步生成器，在某些场景下可以实现更高效、可靠的异步编程。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 解读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程 --- 异步方法的异常处理</title>
      <link href="/posts/52894.html"/>
      <url>/posts/52894.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>现在模拟一个异步方法抛出了异常：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">ThrowAfter</span>(<span class="params"><span class="built_in">int</span> ms, <span class="built_in">string</span> message</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> Task.Delay(ms);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考一下， <code>DontHandle()</code> 方法是否能够捕获到异常？</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DontHandle</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        ThrowAfter(<span class="number">1000</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是：不会捕获到异常！</p><p>因为 <code>DontHandle()</code> 方法在 <code>ThrowAfter()</code> 方法抛出异常之前，就已经执行完毕。</p><h2 id="异步方法的异常处理"><a href="#异步方法的异常处理" class="headerlink" title="异步方法的异常处理"></a>异步方法的异常处理</h2><p>那么上述代码怎么才能捕获到异常呢？</p><p>若想要捕获异常则必须通过 <code>await</code> 关键字等待 <code>ThrowAfter()</code> 方法执行完成。</p><p>将上文中的代码段进行修改：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">HandleoOnError</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> ThrowAfter(<span class="number">1000</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果就会输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">StartTwoTasks</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> ThrowAfter(<span class="number">1000</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">        <span class="keyword">await</span> ThrowAfter(<span class="number">1000</span>, <span class="string">&quot;second&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;StartTwoTasks is Complate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考一下输出是什么？</p><p>答案是：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">StartTwoTasksParallel</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Task t1 = ThrowAfter(<span class="number">1000</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;t1 is Complate&quot;</span>);</span><br><span class="line">        Task t2 = ThrowAfter(<span class="number">1000</span>, <span class="string">&quot;second&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;t2 is Complate&quot;</span>);</span><br><span class="line">        <span class="keyword">await</span> Task.WhenAll(t2, t1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">is Complate</span><br><span class="line">t2 is Complate</span><br><span class="line">second</span><br></pre></td></tr></table></figure><p>从输出可以看出来，使用 <code>WhenAll()</code> 方法，两个任务都是执行完成的，但是，捕获异常只能捕获 <code>WhenAll()</code>方法参数中，排在最前面的，且第一个抛出异常的任务的消息，</p><p>上述方式有缺陷，只能抛出一个异常的任务的消息，可以将上面的方式再进化一下，如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">StartTwoTasksParallelEx</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Task t1 = <span class="literal">null</span>;</span><br><span class="line">    Task t2 = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        t1 = ThrowAfter(<span class="number">1000</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">        t2 = ThrowAfter(<span class="number">1000</span>, <span class="string">&quot;second&quot;</span>);</span><br><span class="line">        <span class="keyword">await</span> Task.WhenAll(t2, t1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (t1.IsFaulted)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(t1.Exception.InnerException.Message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (t2.IsFaulted)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(t2.Exception.InnerException.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">StartTwoTasksParallelEx2</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Task t3 = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Task t1 = ThrowAfter(<span class="number">1000</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">        Task t2 = ThrowAfter(<span class="number">1000</span>, <span class="string">&quot;second&quot;</span>);</span><br><span class="line">        <span class="keyword">await</span> (t3 = Task.WhenAll(t2, t1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> t3.Exception.InnerExceptions)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;InnerException:&quot;</span> + item.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读 --- Span&lt;T&gt;</title>
      <link href="/posts/22096.html"/>
      <url>/posts/22096.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><code>Span</code> 是C# 中的一种结构体，它是一种内存安全的类型，可以用来表示连续的内存区域。<code>Span</code> 可以被用于访问和操作数组、堆上分配的内存和栈上分配的内存。使用 <code>Span</code> 可以避免不必要的内存拷贝，从而提高性能。</p><span id="more"></span><h2 id="引言-1"><a href="#引言-1" class="headerlink" title="引言"></a>引言</h2><p><code>Span&lt;T&gt;</code> 是C# 中的一种结构体，它是一种内存安全的类型，可以用来表示连续的内存区域。<code>Span&lt;T&gt;</code> 可以被用于访问和操作数组、堆上分配的内存和栈上分配的内存。使用 <code>Span&lt;T&gt;</code> 可以避免不必要的内存拷贝，从而提高性能。</p><h2 id="对数组使用Span"><a href="#对数组使用Span" class="headerlink" title="对数组使用Span"></a>对数组使用Span</h2><p>如果需要快速访问托管或非托管的连续内存，可以使用 <code>Span&lt;T&gt;</code>结构。<code>Span&lt;T&gt;</code> 结构表示存储连续的内存。所以使用它的数据结构一般也使用连续的内存。例如：</p><ul><li>数组</li><li>长字符串(实际上也是数组)</li></ul><p><strong>使用 <code>Span&lt;T&gt;</code>，可以直接访问数组元素。且数组的元素不会复制，可以直接使用它们，这样比复制效率要高</strong>。例如下面的代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span>[] source = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span>[] arr = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; source[<span class="number">0</span>], source[<span class="number">1</span>], source[<span class="number">2</span>] &#125;;</span><br><span class="line">    </span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">33</span>;</span><br><span class="line">    </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;The first element of source is <span class="subst">&#123;source[<span class="number">0</span>]&#125;</span>&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;The first element of arr is <span class="subst">&#123;arr[<span class="number">0</span>]&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Span&lt;<span class="built_in">int</span>&gt; span = <span class="keyword">new</span>(source);</span><br><span class="line">    </span><br><span class="line">    span[<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">    </span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;The first element of source is <span class="subst">&#123;arr[<span class="number">0</span>]&#125;</span>&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;The first element of span is <span class="subst">&#123;span[<span class="number">0</span>]&#125;</span>&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以先猜测以下上述代码的输出是什么？</p><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">is 1</span><br><span class="line">The first element of arr is 33</span><br><span class="line">The first element of source is 11</span><br><span class="line">The first element of span is 11</span><br></pre></td></tr></table></figure><p>上述代码段中，先声明了一个源数组 <code>source</code> 和一个数组 <code>arr</code> ,并将 <code>source</code> 的值复制给 <code>arr</code> 。然后修改 <code>arr</code> 中的第一个元素值为33，可以看到结果 <code>arr</code> 的第一个元素已经改变为33，<code>source</code> 保持不变。然后又声明了一个 <code>Span&lt;int&gt;</code> ，它引用 <code>source</code> 数组。因为<code>Span&lt;T&gt;</code>是直接访问数组元素，而不是复制元素，所以修改 <code>span</code> 中的第一个元素为11， <code>source</code> 中的第一个元素也被修改为11。</p><h2 id="创建切片"><a href="#创建切片" class="headerlink" title="创建切片"></a>创建切片</h2><p><code>Span&lt;T&gt;</code> 的一个强大特性是，可以使用它访问数组的部分或切片。使用切片时，不会复制数组元素，它们是从span 中直接访问的。</p><p>有如下代码段：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span>[] source = &#123; <span class="number">1</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">76</span>, <span class="number">88</span>, <span class="number">213</span> &#125;;</span><br><span class="line">    </span><br><span class="line">    Span&lt;<span class="built_in">int</span>&gt; span1 = <span class="keyword">new</span> Span&lt;<span class="built_in">int</span>&gt;(source, start: <span class="number">1</span>, length: <span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">    Span&lt;<span class="built_in">int</span>&gt; span2 = span1.Slice(start: <span class="number">1</span>, length: <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    DisplaySpan(<span class="string">&quot;span1 contains the elements:&quot;</span>, span1);</span><br><span class="line">    </span><br><span class="line">    DisplaySpan(<span class="string">&quot;span2 contains the elements:&quot;</span>, span2);</span><br><span class="line">    </span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DisplaySpan</span>(<span class="params"><span class="built_in">string</span> content, Span&lt;<span class="built_in">int</span>&gt; span1</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(content);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> span1)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(item + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Console.WriteLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的代码片段展示了创建切片的两种方法。</p><ol><li>除默认构造函数传参数组之外，另一种重载是直接使用构造函数传递源数组，起始位置和长度。例如上述代码中 <code>new Span&lt;int&gt;(source, start: 1, length: 4)</code> 它表示在源数组中从第2个元素开始访问数组的4个元素。</li><li>直接从span中再次切片，传入起始位置和长度，例如上述代码中<code>span1.Slice(start: 1, length: 3)</code>表示从span1中第2个元素开始包含3个元素的切片。</li></ol><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6,23,76,88,</span><br><span class="line">span2 contains the elements:23,76,88,</span><br></pre></td></tr></table></figure><p>这里使用时一定注意传入参数 <code>start</code> 和 <code>length</code> 后的越界问题。</p><h2 id="使用Span改变值"><a href="#使用Span改变值" class="headerlink" title="使用Span改变值"></a>使用Span改变值</h2><p>在文章开头，介绍了如何使用 <code>Span&lt;T&gt;</code> 的索引器，直接更改由 span 直接引用的数组元素，实际上它还有其他改变值的方法。</p><p>例如：</p><ul><li><p><code>Slice(int start, int length)</code>：返回一个新的 <code>Span&lt;T&gt;</code>，它表示从 <code>Span&lt;T&gt;</code> 的指定起始位置开始的指定长度部分。可以使用该方法来获取或更改 <code>Span&lt;T&gt;</code> 中的子集。</p></li><li><p><code>Clear()</code>：将 <code>Span&lt;T&gt;</code> 中的所有元素设置为默认值 <code>default&lt;T&gt;</code>。</p></li><li><p><code>Fill(T value)</code>：将 <code>Span&lt;T&gt;</code> 中的所有元素设置为指定的值。</p></li><li><p><code>CopyTo(Span&lt;T&gt; destination)</code>：将 <code>Span&lt;T&gt;</code> 中的所有元素复制到指定的目标 <code>Span&lt;T&gt;</code>。</p></li><li><p><code>CopyTo(T[] destination)</code>：将 <code>Span&lt;T&gt;</code> 中的所有元素复制到指定的目标数组。</p></li><li><p><code>Reverse()</code>：反转 <code>Span&lt;T&gt;</code> 中的元素顺序。</p></li><li><p><code>Sort()</code>：对 <code>Span&lt;T&gt;</code> 中的元素进行排序。</p></li></ul><p>请注意，这些方法都是按值传递的，而不是按引用传递的。这意味着在调用这些方法时，将复制 <code>Span&lt;T&gt;</code> 中的值。如果您想要修改原始 <code>Span&lt;T&gt;</code> 中的值，请使用引用传递方式，例如使用 <code>ref Span&lt;T&gt;</code> 参数。</p><h2 id="只读的Span"><a href="#只读的Span" class="headerlink" title="只读的Span"></a>只读的Span</h2><p>如果只需要对数组片段进行读访问，则可以使用 <code>ReadOnlySpan&lt;T&gt;</code>,可以使用它来读取内存块中的数据，而不必担心其他代码同时修改了该内存块。</p><p>对于 <code>ReadOnlySpan&lt;T&gt;</code> ，它的索引器是只读的，所以这种类型没有提供 <code>Clear</code> 和 <code>Fill</code> 方法，但是可以调用 <code>CopyTo()</code> 方法，将 <code>ReadOnlySpan&lt;T&gt;</code> 的内容复制到 <code>Span&lt;T&gt;</code> 。</p><p>此外，它支持隐式转换，由数组或 <code>Span&lt;T&gt;</code> 直接赋值给 <code>ReadOnlySpan&lt;T&gt;</code>，如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span>[] source = &#123; <span class="number">1</span>, <span class="number">6</span>, <span class="number">23</span>, <span class="number">76</span>, <span class="number">88</span>, <span class="number">213</span> &#125;;</span><br><span class="line"></span><br><span class="line">    Span&lt;<span class="built_in">int</span>&gt; span = <span class="keyword">new</span> Span&lt;<span class="built_in">int</span>&gt;(source);</span><br><span class="line"></span><br><span class="line">    DisplaySpan(<span class="string">&quot;span contains the elements:&quot;</span>, span);</span><br><span class="line"></span><br><span class="line">    ReadOnlySpan&lt;<span class="built_in">int</span>&gt; readOnlySpan = source;</span><br><span class="line"></span><br><span class="line">    DisplaySpan(<span class="string">&quot;readOnlySpan contains the elements:&quot;</span>, readOnlySpan);</span><br><span class="line"></span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DisplaySpan</span>(<span class="params"><span class="built_in">string</span> content, ReadOnlySpan&lt;<span class="built_in">int</span>&gt; span1</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.Write(content);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> span1)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(item + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1,6,23,76,88,213,</span><br><span class="line">readOnlySpan contains the elements:1,6,23,76,88,213,</span><br></pre></td></tr></table></figure><p>与 <code>Span&lt;T&gt;</code> 相比，<code>ReadOnlySpan&lt;T&gt;</code> 的一个重要的限制是不允许修改其包含的内存块。这使得 <code>ReadOnlySpan&lt;T&gt;</code> 更适合于读取内存块中的数据，而不是修改它们。</p>]]></content>
      
      
      <categories>
          
          <category> 解读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读 --- 深拷贝</title>
      <link href="/posts/38304.html"/>
      <url>/posts/38304.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>深拷贝是指创建一个新对象，该对象的值与原始对象完全相同，但在内存中具有不同的地址。这意味着如果您对原始对象进行更改，则不会影响到复制的对象</p><span id="more"></span><p>常见的C#常见的深拷贝方式有以下4类：</p><ol><li>各种形式的序列化及反序列化。</li><li>通过反射机制获取该对象的所有字段和属性信息。遍历所有字段和属性，递归将源对象中的值复制到目标对象中。</li><li>新建对象，手动复制所有成员变量。</li><li>实现 <code>ICloneable</code> 接口，重写 <code>Colne</code> 方法。方法内部可以调用上面任意实现方法。</li></ol><h3 id="序列化、反序列化"><a href="#序列化、反序列化" class="headerlink" title="序列化、反序列化"></a>序列化、反序列化</h3><h4 id="使用二进制序列化和反序列化"><a href="#使用二进制序列化和反序列化" class="headerlink" title="使用二进制序列化和反序列化"></a>使用二进制序列化和反序列化</h4><p>可以使用 <code>BinaryFormatter</code> 类将对象序列化成二进制形式并保存到文件或内存流中，然后再使用 <code>BinaryFormatter</code> 反序列化对象，这样就可以得到该对象的一个完全独立的副本。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeepCopy</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MemoryStream stream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">    BinaryFormatter formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">    formatter.Serialize(stream, obj);</span><br><span class="line">    stream.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">    T copy = (T)formatter.Deserialize(stream);</span><br><span class="line">    stream.Close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-XML-序列化和反序列化"><a href="#使用-XML-序列化和反序列化" class="headerlink" title="使用 XML 序列化和反序列化"></a>使用 XML 序列化和反序列化</h4><p>可以使用 <code>XmlSerializer</code> 类将对象序列化成 <code>XML</code> 形式并保存到文件或内存流中，然后再使用 <code>XmlSerializer</code> 反序列化对象，这样也可以得到该对象的一个完全独立的副本。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeepCopy</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    XmlSerializer serializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">    MemoryStream stream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">    serializer.Serialize(stream, obj);</span><br><span class="line">    stream.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">    T copy = (T)serializer.Deserialize(stream);</span><br><span class="line">    stream.Close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-DataContractSerializer-序列化和反序列化"><a href="#使用-DataContractSerializer-序列化和反序列化" class="headerlink" title="使用 DataContractSerializer 序列化和反序列化"></a>使用 DataContractSerializer 序列化和反序列化</h4><p>可以使用 DataContractSerializer 类将对象序列化成 XML 或二进制形式并保存到文件或内存流中，然后再使用 DataContractSerializer 反序列化对象。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Json;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeepCopy</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DataContractSerializer serializer = <span class="keyword">new</span> DataContractSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">    MemoryStream stream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">    serializer.WriteObject(stream, obj);</span><br><span class="line">    stream.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">    T copy = (T)serializer.ReadObject(stream);</span><br><span class="line">    stream.Close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用-Json-NET-或-System-Text-Json-序列化和反序列化"><a href="#使用-Json-NET-或-System-Text-Json-序列化和反序列化" class="headerlink" title="使用 Json.NET 或 System.Text.Json 序列化和反序列化"></a>使用 Json.NET 或 System.Text.Json 序列化和反序列化</h4><p>可以使用 JsonConvert 类将对象序列化成 JSON 字符串，然后再使用 JsonConvert 反序列化对象。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeepCopy</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> json = JsonConvert.SerializeObject(obj);</span><br><span class="line">    T copy = JsonConvert.DeserializeObject&lt;T&gt;(json);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Text.Json;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeepCopy</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> jsonString = JsonSerializer.Serialize&lt;T&gt;(obj);</span><br><span class="line">    <span class="comment">// 将 JSON 字符串反序列化为对象</span></span><br><span class="line">    <span class="keyword">var</span> deserializedPerson = JsonSerializer.Deserialize&lt;T&gt;(jsonString);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deserializedPerson;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h4 id="使用反射实现深拷贝"><a href="#使用反射实现深拷贝" class="headerlink" title="使用反射实现深拷贝"></a>使用反射实现深拷贝</h4><p>通过反射生成对象，通过反射机制获取该对象的所有字段和属性信息。遍历所有字段和属性，以递归方式将源对象中的值复制到目标对象中。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">DeepCopy</span>&lt;<span class="title">T</span>&gt;(<span class="params">T obj</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Type type = obj.GetType();</span><br><span class="line">    <span class="built_in">object</span> copy = Activator.CreateInstance(type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有字段和属性信息，并将源对象中的值复制到目标对象中</span></span><br><span class="line">    <span class="keyword">foreach</span> (FieldInfo fieldInfo <span class="keyword">in</span> type.GetFields(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">object</span> <span class="keyword">value</span> = fieldInfo.GetValue(obj);</span><br><span class="line">        fieldInfo.SetValue(copy, DeepCopy(<span class="keyword">value</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (PropertyInfo propertyInfo <span class="keyword">in</span> type.GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!propertyInfo.CanWrite || !propertyInfo.CanRead)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">object</span> <span class="keyword">value</span> = propertyInfo.GetValue(obj);</span><br><span class="line">        propertyInfo.SetValue(copy, DeepCopy(<span class="keyword">value</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (T)copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手动赋值"><a href="#手动赋值" class="headerlink" title="手动赋值"></a>手动赋值</h3><h4 id="手动复制所有成员变量"><a href="#手动复制所有成员变量" class="headerlink" title="手动复制所有成员变量"></a>手动复制所有成员变量</h4><p>可以手动编写代码复制对象中的所有成员变量，这需要对对象结构有很好的了解，并且比较繁琐，容易漏掉某些成员。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">DeepCopy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Person copy = <span class="keyword">new</span> Person();</span><br><span class="line">        copy.Name = <span class="keyword">this</span>.Name;</span><br><span class="line">        copy.Age = <span class="keyword">this</span>.Age;</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ICloneable-接口"><a href="#ICloneable-接口" class="headerlink" title="ICloneable 接口"></a>ICloneable 接口</h3><h4 id="实现-ICloneable-接口"><a href="#实现-ICloneable-接口" class="headerlink" title="实现 ICloneable 接口"></a>实现 ICloneable 接口</h4><p>可以在对象中实现 <code>ICloneable</code> 接口，并重写 <code>Clone</code> 方法来实现深拷贝。重写的 <code>Clone</code> 方法内可以调用上述任何一种方案。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span> : <span class="title">ICloneable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Person copy = <span class="keyword">new</span> Person();</span><br><span class="line">        copy.Name = <span class="keyword">this</span>.Name;</span><br><span class="line">        copy.Age = <span class="keyword">this</span>.Age;</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h3><p>还有一种方式是使用第三方库实现深拷贝，例如 AutoMapper、ValueInjecter 等。这些库可以自动复制对象中的所有成员变量，从而实现深拷贝。<br>其中比较常用的包括：</p><ul><li><p>AutoMapper：这是一个非常流行的对象映射库，可以用于将一个对象的属性值复制到另一个对象中，从而实现对象深拷贝。</p></li><li><p>Newtonsoft.Json：这是一个广泛使用的 JSON 序列化&#x2F;反序列化库，它也提供了一些方法来实现对象深拷贝。</p></li><li><p>Cloneable：这是一个专门为 .NET 平台设计的对象克隆库，它提供了多种深拷贝和浅拷贝的方式。</p></li><li><p>FastDeepCloner：这是一个高性能的对象复制库，它支持对任意类型进行深拷贝，并且提供了多种可配置选项。</p></li></ul><p>可以需要根据自己的具体需求选择适合自己的库。如果只是需要简单的深拷贝操作，那么 AutoMapper 和 Newtonsoft.Json 都是不错的选择；如果需要更加高效、灵活的操作，那么可以考虑使用 FastDeepCloner 或 Cloneable 等库。</p>]]></content>
      
      
      <categories>
          
          <category> 解读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 策略模式</title>
      <link href="/posts/29684.html"/>
      <url>/posts/29684.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>策略模式</strong>是一种行为设计模式，它允许在运行时选择算法的行为。该模式定义了一系列算法，将它们封装成独立的类，并使它们可以互相替换。这使得算法可以独立于使用它们的客户端而变化。</p><span id="more"></span><p>在策略模式中，有三个主要的角色：</p><ul><li><strong>环境（Context）</strong>：它是使用策略的对象，它维护一个对策略对象的引用，并将客户端请求委托给该对象执行。</li><li><strong>抽象策略（Strategy）</strong>：它定义了所有具体策略所遵循的接口，通常由一个抽象类或者接口实现。</li><li><strong>具体策略（Concrete Strategy）</strong>：它实现了抽象策略中定义的接口，提供了算法的具体实现。</li></ul><p>接下里使用c#创建一个购物车，为产品计算不同的折扣：</p><h3 id="抽象策略类"><a href="#抽象策略类" class="headerlink" title="抽象策略类"></a>抽象策略类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象策略类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">DiscountStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">decimal</span> <span class="title">CalculateDiscount</span>(<span class="params"><span class="built_in">decimal</span> price</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体策略类"><a href="#具体策略类" class="headerlink" title="具体策略类"></a>具体策略类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChristmasDiscount</span> : <span class="title">DiscountStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">decimal</span> <span class="title">CalculateDiscount</span>(<span class="params"><span class="built_in">decimal</span> price</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> price * <span class="number">0.3</span>m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SpringFestivalDiscount</span> : <span class="title">DiscountStrategy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">decimal</span> <span class="title">CalculateDiscount</span>(<span class="params"><span class="built_in">decimal</span> price</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> price * <span class="number">0.5</span>m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环境类"><a href="#环境类" class="headerlink" title="环境类"></a>环境类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShoppingCart</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> DiscountStrategy discountStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShoppingCart</span>(<span class="params">DiscountStrategy discountStrategy</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.discountStrategy = discountStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">decimal</span> <span class="title">CalculateTotalPrice</span>(<span class="params"><span class="built_in">decimal</span> price</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> price - <span class="keyword">this</span>.discountStrategy.CalculateDiscount(price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文例子中，我们定义了一个抽象策略类<code>DiscountStrategy</code>，它定义了一个<code>CalculateDiscount</code>方法。然后我们定义了两个具体策略类<code>ChristmasDiscount</code>和 <code>SpringFestivalDiscount</code>，它们分别实现了<code>CalculateDiscount</code>方法以提供具体的折扣计算逻辑。</p><p>最后，我们定义了一个环境类<code>ShoppingCart</code>，它持有一个<code>DiscountStrategy</code>对象，并在计算购物车中物品的总价时，使用持有的<code>DiscountStrategy</code>对象来计算折扣。客户端可以在运行时选择不同的具体策略对象作为<code>DiscountStrategy</code>，以便在计算购物车物品总价时选择不同的折扣算法。</p><p>接下假设有一个Prada包的价格是12000，可以分别计算一下圣诞节折扣价和春节折扣价：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decimal</span> pradaBag = <span class="number">12000</span>;</span><br><span class="line">DiscountStrategy christmasDiscount = <span class="keyword">new</span> ChristmasDiscount();</span><br><span class="line">DiscountStrategy springFestivalDiscount = <span class="keyword">new</span> SpringFestivalDiscount();</span><br><span class="line"></span><br><span class="line">ShoppingCart christmasShoppingCart = <span class="keyword">new</span> ShoppingCart(christmasDiscount);</span><br><span class="line">ShoppingCart springFestivalShoppingCart = <span class="keyword">new</span> ShoppingCart(springFestivalDiscount);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> discountedPrice = christmasShoppingCart.CalculateTotalPrice(pradaBag);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Prada bag christmas discount price is &quot;</span> + discountedPrice);</span><br><span class="line"></span><br><span class="line">discountedPrice = springFestivalShoppingCart.CalculateTotalPrice(pradaBag);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Prada bag  Spring Festival discount price is &quot;</span> + discountedPrice);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">is 8400.0</span><br><span class="line">Prada bag  Spring Festival discount price is 6000.0</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>策略模式的核心是抽象策略类和具体策略类。抽象策略类定义了一个接口或抽象类，具体策略类实现了这个接口或抽象类，并实现了具体的算法或行为。在使用策略模式时，我们首先创建一个策略接口或抽象类，然后定义多个具体策略类实现这个接口或抽象类。</p><p>在程序运行时，我们可以动态地切换不同的具体策略类，从而实现不同的算法或行为。这种灵活性使得策略模式非常适合那些需要在运行时根据不同条件选择不同算法的场合。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解读 --- Task、ValueTask</title>
      <link href="/posts/24438.html"/>
      <url>/posts/24438.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>Task</strong>和<strong>ValueTask</strong>都是用于异步编程的类型。它们都表示一项异步操作的结果，并可以在操作完成后检索该结果。</p><p>Task是.NET Framework中异步编程模型（APM）的核心类型之一。它是一个通用类型，可表示任何类型的异步操作。通过使用Task，您可以开始执行异步操作并返回一个表示该操作的任务，然后可以等待该任务以获取操作结果。Task还提供了各种方法来管理任务的执行，例如等待多个任务完成、取消任务等等。</p><p>ValueTask与Task不同，ValueTask是一个值类型，而不是一个引用类型。在创建和处理ValueTask时，不需要分配额外的堆内存。如果异步操作非常快速并且几乎总是同步完成，则ValueTask可能比Task更有效率。但是，对于较长时间运行的异步操作，使用ValueTask可能会导致性能下降，因为它可能需要分配堆内存来存储大量的状态信息。</p><span id="more"></span><blockquote><p>参考资料</p><p>[1] <a href="https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask/">https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask/</a></p><p>[2] <a href="https://rubikscode.net/2018/06/11/asynchronous-programming-in-net-benefits-and-tradeoffs-of-using-valuetask/">https://rubikscode.net/2018/06/11/asynchronous-programming-in-net-benefits-and-tradeoffs-of-using-valuetask/</a></p><p>[3] <a href="https://blog.scooletz.com/2018/05/14/task-async-await-valuetask-ivaluetasksource-and-how-to-keep-your-sanity-in-modern-net-world/">https://blog.scooletz.com/2018/05/14/task-async-await-valuetask-ivaluetasksource-and-how-to-keep-your-sanity-in-modern-net-world/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 解读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 原型模式</title>
      <link href="/posts/52975.html"/>
      <url>/posts/52975.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>原型模式</strong>是一种创建型设计模式，它允许我们创建一个对象的副本，而不需要显式地使用构造函数来创建一个新的对象。这种模式通常用于创建那些具有复杂创建过程或需要大量资源的对象。</p><span id="more"></span><p>在原型模式中，我们首先定义一个原型接口，该接口包含一个克隆方法。然后我们创建一个原型对象，该对象实现了原型接口并提供了自己的克隆方法。最后，我们可以使用原型对象的克隆方法来创建新的对象，而无需重新实例化原型对象。</p><h3 id="IClone接口"><a href="#IClone接口" class="headerlink" title="IClone接口"></a>IClone接口</h3><p>需要定义一个<code>IClone</code>接口。这个类中应该包含一个 <code>Clone</code> 方法，用于克隆自身。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IClone</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="keyword">class</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Clone</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原型类"><a href="#原型类" class="headerlink" title="原型类"></a>原型类</h3><p>定义一个具体原型类，它实现<code>IClone</code>接口，并实现了<code>Clone</code>方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcretePrototype</span> : <span class="title">IClone</span>&lt;<span class="title">ConcretePrototype</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcretePrototype</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConcretePrototype <span class="title">Clone</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (ConcretePrototype)<span class="keyword">this</span>.MemberwiseClone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetName</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Name: <span class="subst">&#123;_name&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在具体原型类中，我们实现了 <code>Clone</code> 方法，并使用了 <code>MemberwiseClone</code> 方法来复制对象。此外，我们还添加了一个 <code>SetName</code> 方法和一个 <code>PrintName</code> 方法，用于演示对象的复制和修改。</p><p>:::tip{title&#x3D;”提示”}</p><ol><li>使用 <code>Clone</code> 方法来复制对象。需要注意的是，在复制对象时，我们需要使用 <code>MemberwiseClone</code> 方法或其他<strong>深拷贝</strong>方法来复制对象本身，而不是复制它的引用。此外，如果需要复制对象的引用类型成员，我们需要在具体原型类中对它们进行<strong>深拷贝</strong>。</li><li>原型模式是在内存二进制流的拷贝，要比直接<code>new</code>一个对象性能好很多，特别是要在一个循环体内产生大量的对象时，原型模式可以更好地体现其优点。</li><li>执行<code>Clone</code>方法复制对象时，<strong>不执行其构造函数</strong>。<br>:::</li></ol><p>接下来，我们可以使用具体原型类来创建新的对象。具体地说，我们可以先创建一个原型对象，然后调用它的 Clone 方法来复制它，并修改复制出的对象的状态。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ConcretePrototype(<span class="string">&quot;prototype&quot;</span>);</span><br><span class="line"></span><br><span class="line">ConcretePrototype clone = (ConcretePrototype)prototype.Clone();</span><br><span class="line"></span><br><span class="line">prototype.PrintName(); <span class="comment">// Name: prototype</span></span><br><span class="line"></span><br><span class="line">clone.PrintName(); <span class="comment">// Name: prototype</span></span><br><span class="line"></span><br><span class="line">clone.SetName(<span class="string">&quot;clone&quot;</span>);</span><br><span class="line"></span><br><span class="line">prototype.PrintName(); <span class="comment">// Name: prototype</span></span><br><span class="line"></span><br><span class="line">clone.PrintName(); <span class="comment">// Name: clone</span></span><br></pre></td></tr></table></figure><p>在这段代码中，我们首先创建了一个名为 <code>prototype</code> 的具体原型对象，并输出它的名字。然后，我们调用了 <code>prototype</code> 的 <code>Clone</code> 方法来复制它，并将结果保存在名为 <code>clone</code> 的变量中。接着，我们修改了 <code>clone</code> 的名字为 “clone”，并分别输出 <code>prototype</code> 和 <code>clone</code> 的名字，以证明它们是不同的对象。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原型模式适用于以下情况：</p><ul><li>当需要创建的对象的类型由程序在运行时确定时，原型模式比工厂模式更加灵活。</li><li>当需要创建的对象的创建过程较为复杂，或者需要初始化较长时间时，原型模式可以避免重复创建对象的开销。</li><li>当需要创建的对象与其它对象具有相似的属性和方法时，原型模式可以避免重复编写相同的代码。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.Docker Compose</title>
      <link href="/posts/3433bce8.html"/>
      <url>/posts/3433bce8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h1 id="Docker-Compose-1"><a href="#Docker-Compose-1" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用 <strong>Docker</strong> 的时候，定义 <strong>Dockerfile</strong> 文件，然后使用 <code>docker build</code>、<code>docker run</code> 等命令操作容器。</p><p>然而微服务架构的应用系统一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停，这样效率很低，也不方便管理。</p><blockquote><p>使用 Docker Compose 可以轻松、高效的管理容器，它是一个用于定义和运行多容器 Docker 的应用程序工具。</p></blockquote><h3 id="yaml-官方示例"><a href="#yaml-官方示例" class="headerlink" title="yaml 官方示例"></a>yaml 官方示例</h3><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#compose-file-structure-and-examples">https://docs.docker.com/compose/compose-file/compose-file-v3/#compose-file-structure-and-examples</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3.9&quot;</span></span><br><span class="line">services:</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:alpine</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;6379&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      - frontend</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: <span class="number">2</span></span><br><span class="line">      update_config:</span><br><span class="line">        parallelism: <span class="number">2</span></span><br><span class="line">        delay: <span class="number">10</span>s</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on<span class="literal">-failure</span></span><br><span class="line">  db:</span><br><span class="line">    image: postgres:<span class="number">9.4</span></span><br><span class="line">    volumes:</span><br><span class="line">      - db<span class="literal">-data</span>:/var/lib/postgresql/<span class="keyword">data</span></span><br><span class="line">    networks:</span><br><span class="line">      - backend</span><br><span class="line">    deploy:</span><br><span class="line">      placement:</span><br><span class="line">        max_replicas_per_node: <span class="number">1</span></span><br><span class="line">        constraints:</span><br><span class="line">          - <span class="string">&quot;node.role==manager&quot;</span></span><br><span class="line">  vote:</span><br><span class="line">    image: dockersamples/examplevotingapp_vote:before</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;5000:80&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      - frontend</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: <span class="number">2</span></span><br><span class="line">      update_config:</span><br><span class="line">        parallelism: <span class="number">2</span></span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on<span class="literal">-failure</span></span><br><span class="line">  result:</span><br><span class="line">    image: dockersamples/examplevotingapp_result:before</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;5001:80&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      - backend</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: <span class="number">1</span></span><br><span class="line">      update_config:</span><br><span class="line">        parallelism: <span class="number">2</span></span><br><span class="line">        delay: <span class="number">10</span>s</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on<span class="literal">-failure</span></span><br><span class="line">  worker:</span><br><span class="line">    image: dockersamples/examplevotingapp_worker</span><br><span class="line">    networks:</span><br><span class="line">      - frontend</span><br><span class="line">      - backend</span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: <span class="number">1</span></span><br><span class="line">      labels: [<span class="type">APP</span>=<span class="type">VOTING</span>]</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on<span class="literal">-failure</span></span><br><span class="line">        delay: <span class="number">10</span>s</span><br><span class="line">        max_attempts: <span class="number">3</span></span><br><span class="line">        window: <span class="number">120</span>s</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - <span class="string">&quot;node.role==manager&quot;</span></span><br><span class="line">  visualizer:</span><br><span class="line">    image: dockersamples/visualizer:stable</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    stop_grace_period: <span class="number">1</span>m30s</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - <span class="string">&quot;node.role==manager&quot;</span></span><br><span class="line">networks:</span><br><span class="line">  frontend:</span><br><span class="line">  backend:</span><br><span class="line">volumes:</span><br><span class="line">  db<span class="literal">-data</span>:</span><br></pre></td></tr></table></figure><p><strong>depends_on</strong>：依赖关系，如 web 依赖 redis 和 db，通过 depends_on 表明关系。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3.9&quot;</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">      - redis</span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">  db:</span><br><span class="line">    image: postgres</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Docker Compose 是 Docker 的一个开源项目，目前托管到了 GitHub，需要前往 GitHub 下载。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">curl</span> <span class="literal">-L</span> <span class="string">&quot;https://github.com/docker/compose/releases/download/2.2.3/docker-compose-<span class="variable">$</span>(uname -s)-<span class="variable">$</span>(uname -m)&quot;</span> <span class="literal">-o</span> /usr/local/bin/docker<span class="literal">-compose</span></span><br><span class="line"></span><br><span class="line">chmod +x /usr/local/bin/docker<span class="literal">-compose</span></span><br></pre></td></tr></table></figure><blockquote><p>由于存放在 GitHub，国内网络限制导致不太稳定，不推荐使用。</p></blockquote><p>推荐使用 <a href="https://www.daocloud.io/">道客</a> 提供的 <a href="http://get.daocloud.io/#install-compose">Docker 极速下载</a> 进行安装。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">curl</span> <span class="literal">-L</span> https://get.daocloud.io/docker/compose/releases/download/v2.<span class="number">2.3</span>/docker<span class="literal">-compose-</span>`uname <span class="literal">-s</span>`-`uname <span class="literal">-m</span>` &gt; /usr/local/bin/docker<span class="literal">-compose</span></span><br><span class="line"></span><br><span class="line">chmod +x /usr/local/bin/docker<span class="literal">-compose</span></span><br></pre></td></tr></table></figure><blockquote><p>安装</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># curl -L https://get.daocloud.io/docker/compose/releases/download/v2.2.3/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line"><span class="number">100</span>   <span class="number">423</span>  <span class="number">100</span>   <span class="number">423</span>    <span class="number">0</span>     <span class="number">0</span>    <span class="number">394</span>      <span class="number">0</span>  <span class="number">0</span>:<span class="number">00</span>:<span class="number">01</span>  <span class="number">0</span>:<span class="number">00</span>:<span class="number">01</span> <span class="literal">--</span>:<span class="literal">--</span>:<span class="literal">--</span>   <span class="number">394</span></span><br><span class="line"><span class="number">100</span> <span class="number">23.5</span>M  <span class="number">100</span> <span class="number">23.5</span>M    <span class="number">0</span>     <span class="number">0</span>  <span class="number">8670</span>k      <span class="number">0</span>  <span class="number">0</span>:<span class="number">00</span>:<span class="number">02</span>  <span class="number">0</span>:<span class="number">00</span>:<span class="number">02</span> <span class="literal">--</span>:<span class="literal">--</span>:<span class="literal">--</span> <span class="number">20.3</span>M</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># cd /usr/local/bin/</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">bin</span>]<span class="comment"># ls</span></span><br><span class="line">docker<span class="literal">-compose</span></span><br></pre></td></tr></table></figure><p>这样即表示安装成功。</p><blockquote><p>授权</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># chmod +x /usr/local/bin/docker-compose</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><h3 id="docker-compose-version"><a href="#docker-compose-version" class="headerlink" title="docker-compose version"></a>docker-compose version</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">bin</span>]<span class="comment"># docker-compose version</span></span><br><span class="line">Docker Compose version v2.<span class="number">2.3</span></span><br></pre></td></tr></table></figure><p>显示了版本即代表 Docker Compose 安装完成。</p><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> /usr/local/bin/docker<span class="literal">-compose</span></span><br></pre></td></tr></table></figure><p>由于 <strong>Linux 一切皆文件</strong>，删除此文件夹即可完成 Docker Compose 的卸载。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><blockquote><p>创建项目目录</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">sail</span>]<span class="comment"># mkdir docker-compose</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">sail</span>]<span class="comment"># cd docker-compose</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><blockquote><p>创建 app.py</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">sail</span>]<span class="comment"># mkdir docker-compose</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">sail</span>]<span class="comment"># cd docker-compose</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">import redis</span><br><span class="line">from flask import Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">cache = redis.Redis(host=<span class="string">&#x27;redis&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line">def get_hit_count():</span><br><span class="line">    retries = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> cache.incr(<span class="string">&#x27;hits&#x27;</span>)</span><br><span class="line">        except redis.exceptions.ConnectionError as exc:</span><br><span class="line">            <span class="keyword">if</span> retries == <span class="number">0</span>:</span><br><span class="line">                raise exc</span><br><span class="line">            retries -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">@app.route(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">def hello():</span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;</span>.format(count)</span><br></pre></td></tr></table></figure><p>redis 是应用容器中 redis 容器的主机名，在同一网络下可以通过服务名访问，端口默认 6379。</p><blockquote><p>创建 requirements.txt</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment"># vim requirements.txt</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment"># cat requirements.txt </span></span><br><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure><blockquote><p>创建 Dockerfile</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment"># vim Dockerfile</span></span><br><span class="line"></span><br><span class="line">FROM python:<span class="number">3.7</span><span class="literal">-alpine</span></span><br><span class="line">WORKDIR /code</span><br><span class="line">ENV FLASK_APP=app.py</span><br><span class="line">ENV FLASK_RUN_HOST=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line">RUN apk add <span class="literal">--no-cache</span> gcc musl<span class="literal">-dev</span> linux<span class="literal">-headers</span></span><br><span class="line"><span class="built_in">COPY</span> requirements.txt requirements.txt</span><br><span class="line">RUN pip install <span class="literal">-r</span> requirements.txt</span><br><span class="line">EXPOSE <span class="number">5000</span></span><br><span class="line"><span class="built_in">COPY</span> . .</span><br><span class="line">CMD [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>创建 docker-compose.yml</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment"># vim docker-compose.yml</span></span><br><span class="line"></span><br><span class="line">version: <span class="string">&quot;3.3&quot;</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">  redis:</span><br><span class="line">    image: <span class="string">&quot;redis:alpine&quot;</span></span><br></pre></td></tr></table></figure><p>这个文件定义了两个服务：web 和 redis。</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h3 id="docker-compose-up"><a href="#docker-compose-up" class="headerlink" title="docker-compose up"></a>docker-compose up</h3><blockquote><p>运行应用</p></blockquote><p>在项目目录中，运行 <code>docker-compose up</code> 来启动应用程序。</p><blockquote><p>第一次启动需要安装很多环境，比较缓慢。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment"># docker-compose up</span></span><br><span class="line">[+] Running <span class="number">7</span>/<span class="number">7</span></span><br><span class="line"> ⠿ redis Pulled                                                                                                                                                                                              <span class="number">14.1</span>s</span><br><span class="line">   ⠿ <span class="number">59</span>bf1c3509f3 Pull complete                                                                                                                                                                               <span class="number">3.0</span>s</span><br><span class="line">   ⠿ <span class="number">719</span>adce26c52 Pull complete                                                                                                                                                                               <span class="number">3.1</span>s</span><br><span class="line">   ⠿ b8f35e378c31 Pull complete                                                                                                                                                                               <span class="number">3.3</span>s</span><br><span class="line">   ⠿ d034517f789c Pull complete                                                                                                                                                                               <span class="number">9.0</span>s</span><br><span class="line">   ⠿ <span class="number">3772</span>d4d76753 Pull complete                                                                                                                                                                               <span class="number">9.0</span>s</span><br><span class="line">   ⠿ <span class="number">211</span>a7f52febb Pull complete                                                                                                                                                                               <span class="number">9.1</span>s</span><br><span class="line">Sending build context to Docker daemon     <span class="number">725</span>B</span><br><span class="line">Step <span class="number">1</span>/<span class="number">10</span> : FROM python:<span class="number">3.7</span><span class="literal">-alpine</span></span><br><span class="line"><span class="number">3.7</span><span class="literal">-alpine</span>: Pulling from library/python</span><br><span class="line"><span class="number">59</span>bf1c3509f3: Already exists </span><br><span class="line"><span class="number">8786870</span>f2876: Pull complete </span><br><span class="line"><span class="number">45</span>d4696938d0: Pull complete </span><br><span class="line">ef84af58b2c5: Pull complete </span><br><span class="line">c3c9b71b9a69: Pull complete </span><br><span class="line">Digest: sha256:d64e0124674d64e78cc9d7378a1130499ced66a7a00db0521d0120a2e88ac9e4</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> python:<span class="number">3.7</span><span class="literal">-alpine</span></span><br><span class="line"> <span class="literal">---</span>&gt; a1034fd13493</span><br><span class="line">Step <span class="number">2</span>/<span class="number">10</span> : WORKDIR /code</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> e23e4b173abf</span><br><span class="line">Removing intermediate container e23e4b173abf</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">41</span>eb64157cfc</span><br><span class="line">Step <span class="number">3</span>/<span class="number">10</span> : ENV FLASK_APP=app.py</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> cdefb769398d</span><br><span class="line">Removing intermediate container cdefb769398d</span><br><span class="line"> <span class="literal">---</span>&gt; ab741ac5cb17</span><br><span class="line">Step <span class="number">4</span>/<span class="number">10</span> : ENV FLASK_RUN_HOST=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">4976</span>c1da428c</span><br><span class="line">Removing intermediate container <span class="number">4976</span>c1da428c</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">5</span>a5c24d67db6</span><br><span class="line">Step <span class="number">5</span>/<span class="number">10</span> : RUN apk add <span class="literal">--no-cache</span> gcc musl<span class="literal">-dev</span> linux<span class="literal">-headers</span></span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">53043</span>bd38e33</span><br><span class="line">fetch https://dl<span class="literal">-cdn</span>.alpinelinux.org/alpine/v3.<span class="number">15</span>/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch https://dl<span class="literal">-cdn</span>.alpinelinux.org/alpine/v3.<span class="number">15</span>/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">(<span class="number">1</span>/<span class="number">13</span>) Installing libgcc (<span class="number">10.3</span>.<span class="number">1</span>_git20211027<span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">2</span>/<span class="number">13</span>) Installing libstdc++ (<span class="number">10.3</span>.<span class="number">1</span>_git20211027<span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">3</span>/<span class="number">13</span>) Installing binutils (<span class="number">2.37</span><span class="literal">-r3</span>)</span><br><span class="line">(<span class="number">4</span>/<span class="number">13</span>) Installing libgomp (<span class="number">10.3</span>.<span class="number">1</span>_git20211027<span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">5</span>/<span class="number">13</span>) Installing libatomic (<span class="number">10.3</span>.<span class="number">1</span>_git20211027<span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">6</span>/<span class="number">13</span>) Installing libgphobos (<span class="number">10.3</span>.<span class="number">1</span>_git20211027<span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">7</span>/<span class="number">13</span>) Installing gmp (<span class="number">6.2</span>.<span class="number">1</span><span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">8</span>/<span class="number">13</span>) Installing isl22 (<span class="number">0.22</span><span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">9</span>/<span class="number">13</span>) Installing mpfr4 (<span class="number">4.1</span>.<span class="number">0</span><span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">10</span>/<span class="number">13</span>) Installing mpc1 (<span class="number">1.2</span>.<span class="number">1</span><span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">11</span>/<span class="number">13</span>) Installing gcc (<span class="number">10.3</span>.<span class="number">1</span>_git20211027<span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">12</span>/<span class="number">13</span>) Installing linux<span class="literal">-headers</span> (<span class="number">5.10</span>.<span class="number">41</span><span class="literal">-r0</span>)</span><br><span class="line">(<span class="number">13</span>/<span class="number">13</span>) Installing musl<span class="literal">-dev</span> (<span class="number">1.2</span>.<span class="number">2</span><span class="literal">-r7</span>)</span><br><span class="line">Executing busybox<span class="literal">-1</span>.<span class="number">34.1</span><span class="literal">-r3</span>.trigger</span><br><span class="line">OK: <span class="number">139</span> MiB <span class="keyword">in</span> <span class="number">48</span> packages</span><br><span class="line">Removing intermediate container <span class="number">53043</span>bd38e33</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">73</span>e9550df596</span><br><span class="line">Step <span class="number">6</span>/<span class="number">10</span> : <span class="built_in">COPY</span> requirements.txt requirements.txt</span><br><span class="line"> <span class="literal">---</span>&gt; c5a73d6f1fe1</span><br><span class="line">Step <span class="number">7</span>/<span class="number">10</span> : RUN pip install <span class="literal">-r</span> requirements.txt</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">826790</span>d0bfbb</span><br><span class="line">Collecting flask</span><br><span class="line">  Downloading Flask<span class="literal">-2</span>.<span class="number">0.2</span><span class="literal">-py3-none-any</span>.whl (<span class="number">95</span> kB)</span><br><span class="line">Collecting redis</span><br><span class="line">  Downloading redis<span class="literal">-4</span>.<span class="number">1.0</span><span class="literal">-py3-none-any</span>.whl (<span class="number">171</span> kB)</span><br><span class="line">Collecting itsdangerous&gt;=<span class="number">2.0</span></span><br><span class="line">  Downloading itsdangerous<span class="literal">-2</span>.<span class="number">0.1</span><span class="literal">-py3-none-any</span>.whl (<span class="number">18</span> kB)</span><br><span class="line">Collecting click&gt;=<span class="number">7.1</span>.<span class="number">2</span></span><br><span class="line">  Downloading click<span class="literal">-8</span>.<span class="number">0.3</span><span class="literal">-py3-none-any</span>.whl (<span class="number">97</span> kB)</span><br><span class="line">Collecting Werkzeug&gt;=<span class="number">2.0</span></span><br><span class="line">  Downloading Werkzeug<span class="literal">-2</span>.<span class="number">0.2</span><span class="literal">-py3-none-any</span>.whl (<span class="number">288</span> kB)</span><br><span class="line">Collecting Jinja2&gt;=<span class="number">3.0</span></span><br><span class="line">  Downloading Jinja2<span class="literal">-3</span>.<span class="number">0.3</span><span class="literal">-py3-none-any</span>.whl (<span class="number">133</span> kB)</span><br><span class="line">Collecting packaging&gt;=<span class="number">21.3</span></span><br><span class="line">  Downloading packaging<span class="literal">-21</span>.<span class="number">3</span><span class="literal">-py3-none-any</span>.whl (<span class="number">40</span> kB)</span><br><span class="line">Collecting deprecated&gt;=<span class="number">1.2</span>.<span class="number">3</span></span><br><span class="line">  Downloading Deprecated<span class="literal">-1</span>.<span class="number">2.13</span><span class="literal">-py2</span>.py3<span class="literal">-none-any</span>.whl (<span class="number">9.6</span> kB)</span><br><span class="line">Collecting importlib<span class="literal">-metadata</span>&gt;=<span class="number">1.0</span></span><br><span class="line">  Downloading importlib_metadata<span class="literal">-4</span>.<span class="number">10.0</span><span class="literal">-py3-none-any</span>.whl (<span class="number">17</span> kB)</span><br><span class="line">Collecting wrapt&lt;<span class="number">2</span>,&gt;=<span class="number">1.10</span></span><br><span class="line">  Downloading wrapt<span class="literal">-1</span>.<span class="number">13.3</span><span class="literal">-cp37-cp37m-musllinux_1_1_x86_64</span>.whl (<span class="number">78</span> kB)</span><br><span class="line">Collecting zipp&gt;=<span class="number">0.5</span></span><br><span class="line">  Downloading zipp<span class="literal">-3</span>.<span class="number">7.0</span><span class="literal">-py3-none-any</span>.whl (<span class="number">5.3</span> kB)</span><br><span class="line">Collecting ty<span class="built_in">ping-extensions</span>&gt;=<span class="number">3.6</span>.<span class="number">4</span></span><br><span class="line">  Downloading typing_extensions<span class="literal">-4</span>.<span class="number">0.1</span><span class="literal">-py3-none-any</span>.whl (<span class="number">22</span> kB)</span><br><span class="line">Collecting MarkupSafe&gt;=<span class="number">2.0</span></span><br><span class="line">  Downloading MarkupSafe<span class="literal">-2</span>.<span class="number">0.1</span><span class="literal">-cp37-cp37m-musllinux_1_1_x86_64</span>.whl (<span class="number">30</span> kB)</span><br><span class="line">Collecting pyparsing!=<span class="number">3.0</span>.<span class="number">5</span>,&gt;=<span class="number">2.0</span>.<span class="number">2</span></span><br><span class="line">  Downloading pyparsing<span class="literal">-3</span>.<span class="number">0.6</span><span class="literal">-py3-none-any</span>.whl (<span class="number">97</span> kB)</span><br><span class="line">Installing collected packages: zipp, ty<span class="built_in">ping-extensions</span>, wrapt, pyparsing, MarkupSafe, importlib<span class="literal">-metadata</span>, Werkzeug, packaging, Jinja2, itsdangerous, deprecated, click, redis, flask</span><br><span class="line">Successfully installed Jinja2<span class="literal">-3</span>.<span class="number">0.3</span> MarkupSafe<span class="literal">-2</span>.<span class="number">0.1</span> Werkzeug<span class="literal">-2</span>.<span class="number">0.2</span> click<span class="literal">-8</span>.<span class="number">0.3</span> deprecated<span class="literal">-1</span>.<span class="number">2.13</span> flask<span class="literal">-2</span>.<span class="number">0.2</span> importlib<span class="literal">-metadata-4</span>.<span class="number">10.0</span> itsdangerous<span class="literal">-2</span>.<span class="number">0.1</span> packaging<span class="literal">-21</span>.<span class="number">3</span> pyparsing<span class="literal">-3</span>.<span class="number">0.6</span> redis<span class="literal">-4</span>.<span class="number">1.0</span> ty<span class="built_in">ping-extensions</span><span class="literal">-4</span>.<span class="number">0.1</span> wrapt<span class="literal">-1</span>.<span class="number">13.3</span> zipp<span class="literal">-3</span>.<span class="number">7.0</span></span><br><span class="line">WARNING: Running pip as the <span class="string">&#x27;root&#x27;</span> user can result <span class="keyword">in</span> broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv</span><br><span class="line">WARNING: You are <span class="keyword">using</span> pip version 21.2.4; however, version 21.3.1 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">&#x27;/usr/local/bin/python -m pip install --upgrade pip&#x27;</span> command.</span><br><span class="line">Removing intermediate container <span class="number">826790</span>d0bfbb</span><br><span class="line"> <span class="literal">---</span>&gt; c1483947fad2</span><br><span class="line">Step <span class="number">8</span>/<span class="number">10</span> : EXPOSE <span class="number">5000</span></span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> cd59e0408b47</span><br><span class="line">Removing intermediate container cd59e0408b47</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">05</span>c632dea80d</span><br><span class="line">Step <span class="number">9</span>/<span class="number">10</span> : <span class="built_in">COPY</span> . .</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">8</span>c89b910e366</span><br><span class="line">Step <span class="number">10</span>/<span class="number">10</span> : CMD [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>]</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">1</span>d9d071fee96</span><br><span class="line">Removing intermediate container <span class="number">1</span>d9d071fee96</span><br><span class="line"> <span class="literal">---</span>&gt; de4639486b50</span><br><span class="line">Successfully built de4639486b50</span><br><span class="line">Successfully tagged docker<span class="literal">-compose_web</span>:latest</span><br><span class="line">Use <span class="string">&#x27;docker scan&#x27;</span> to run Snyk tests against images to find vulnerabilities and learn how to fix them</span><br><span class="line">[+] Running <span class="number">3</span>/<span class="number">3</span></span><br><span class="line"> ⠿ Network docker<span class="literal">-compose_default</span>    Created                                                                                                                                                                  <span class="number">0.3</span>s</span><br><span class="line"> ⠿ Container docker<span class="literal">-compose-redis-1</span>  Created                                                                                                                                                                  <span class="number">0.0</span>s</span><br><span class="line"> ⠿ Container docker<span class="literal">-compose-web-1</span>    Created                                                                                                                                                                  <span class="number">0.0</span>s</span><br><span class="line">Attaching to docker<span class="literal">-compose-redis-1</span>, docker<span class="literal">-compose-web-1</span></span><br><span class="line">docker<span class="literal">-compose-redis-1</span>  | <span class="number">1</span>:C <span class="number">07</span> Jan <span class="number">2022</span> <span class="number">08</span>:<span class="number">36</span>:<span class="number">26.687</span> <span class="comment"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class="line">docker<span class="literal">-compose-redis-1</span>  | <span class="number">1</span>:C <span class="number">07</span> Jan <span class="number">2022</span> <span class="number">08</span>:<span class="number">36</span>:<span class="number">26.687</span> <span class="comment"># Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started</span></span><br><span class="line">docker<span class="literal">-compose-redis-1</span>  | <span class="number">1</span>:C <span class="number">07</span> Jan <span class="number">2022</span> <span class="number">08</span>:<span class="number">36</span>:<span class="number">26.687</span> <span class="comment"># Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span></span><br><span class="line">docker<span class="literal">-compose-redis-1</span>  | <span class="number">1</span>:M <span class="number">07</span> Jan <span class="number">2022</span> <span class="number">08</span>:<span class="number">36</span>:<span class="number">26.687</span> * monotonic clock: POSIX clock_gettime</span><br><span class="line">docker<span class="literal">-compose-redis-1</span>  | <span class="number">1</span>:M <span class="number">07</span> Jan <span class="number">2022</span> <span class="number">08</span>:<span class="number">36</span>:<span class="number">26.688</span> * Running mode=standalone, port=<span class="number">6379</span>.</span><br><span class="line">docker<span class="literal">-compose-redis-1</span>  | <span class="number">1</span>:M <span class="number">07</span> Jan <span class="number">2022</span> <span class="number">08</span>:<span class="number">36</span>:<span class="number">26.688</span> <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">docker<span class="literal">-compose-redis-1</span>  | <span class="number">1</span>:M <span class="number">07</span> Jan <span class="number">2022</span> <span class="number">08</span>:<span class="number">36</span>:<span class="number">26.688</span> <span class="comment"># Server initialized</span></span><br><span class="line">docker<span class="literal">-compose-redis-1</span>  | <span class="number">1</span>:M <span class="number">07</span> Jan <span class="number">2022</span> <span class="number">08</span>:<span class="number">36</span>:<span class="number">26.688</span> <span class="comment"># WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span></span><br><span class="line">docker<span class="literal">-compose-redis-1</span>  | <span class="number">1</span>:M <span class="number">07</span> Jan <span class="number">2022</span> <span class="number">08</span>:<span class="number">36</span>:<span class="number">26.688</span> * Ready to accept connections</span><br><span class="line">docker<span class="literal">-compose-web-1</span>    |  * Serving Flask app <span class="string">&#x27;app.py&#x27;</span> (lazy loading)</span><br><span class="line">docker<span class="literal">-compose-web-1</span>    |  * Environment: production</span><br><span class="line">docker<span class="literal">-compose-web-1</span>    |    WARNING: This is a development server. <span class="keyword">Do</span> not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">docker<span class="literal">-compose-web-1</span>    |    Use a production WSGI server instead.</span><br><span class="line">docker<span class="literal">-compose-web-1</span>    |  * Debug mode: off</span><br><span class="line">docker<span class="literal">-compose-web-1</span>    |  * Running on all addresses.</span><br><span class="line">docker<span class="literal">-compose-web-1</span>    |    WARNING: This is a development server. <span class="keyword">Do</span> not use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">docker<span class="literal">-compose-web-1</span>    |  * Running on http://<span class="number">172.18</span>.<span class="number">0.2</span>:<span class="number">5000</span>/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><blockquote><p>查看镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY           TAG          IMAGE ID       CREATED          SIZE</span><br><span class="line">docker<span class="literal">-compose_web</span>   latest       <span class="number">6</span>df8b78250a1   <span class="number">44</span> seconds ago   <span class="number">185</span>MB</span><br><span class="line">redis                alpine       <span class="number">3900</span>abf41552   <span class="number">5</span> weeks ago      <span class="number">32.4</span>MB</span><br><span class="line">python               <span class="number">3.7</span><span class="literal">-alpine</span>   a1034fd13493   <span class="number">5</span> weeks ago      <span class="number">41.8</span>MB</span><br></pre></td></tr></table></figure><p>启动 Docker Compose 时，会自动拉取需要的镜像。</p><blockquote><p>查看容器</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE                COMMAND                  CREATED         STATUS         PORTS                    NAMES</span><br><span class="line"><span class="number">78</span>a6f8b03a49   docker<span class="literal">-compose_web</span>   <span class="string">&quot;flask run&quot;</span>              <span class="number">8</span> minutes ago   Up <span class="number">8</span> minutes   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5000</span>-&gt;<span class="number">5000</span>/tcp   docker<span class="literal">-compose-web-1</span></span><br><span class="line">b4da6da4364f   redis:alpine         <span class="string">&quot;docker-entrypoint.s…&quot;</span>   <span class="number">8</span> minutes ago   Up <span class="number">8</span> minutes   <span class="number">6379</span>/tcp                 docker<span class="literal">-compose-redis-1</span></span><br></pre></td></tr></table></figure><p>可以看到容器命名都带有数字，是因为需要集群管理，数字代表副本序号。</p><blockquote><p>查看网络</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME                     DRIVER    SCOPE</span><br><span class="line">b89f719e94e0   bridge                   bridge    local</span><br><span class="line"><span class="number">619</span>a5845a105   docker<span class="literal">-compose_default</span>   bridge    local</span><br><span class="line"><span class="number">28</span>d77e958643   host                     host      local</span><br><span class="line"><span class="number">801</span>fbbe1b38c   mynet                    bridge    local</span><br><span class="line">c3ff850e96f0   none                     null      local</span><br></pre></td></tr></table></figure><p>项目中的内容都在同个网络下。</p><blockquote><p>访问测试</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment"># curl localhost:5000</span></span><br><span class="line">Hello World! I have been seen <span class="number">1</span> times.</span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment"># curl localhost:5000</span></span><br><span class="line">Hello World! I have been seen <span class="number">2</span> times.</span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment"># curl localhost:5000</span></span><br><span class="line">Hello World! I have been seen <span class="number">3</span> times.</span><br></pre></td></tr></table></figure><p>Docker Compose 启动完成。</p><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><h3 id="docker-compose-stop"><a href="#docker-compose-stop" class="headerlink" title="docker-compose stop"></a>docker-compose stop</h3><blockquote><p>示例</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment"># docker-compose stop</span></span><br><span class="line">[+] Running <span class="number">2</span>/<span class="number">2</span></span><br><span class="line"> ⠿ Container docker<span class="literal">-compose-redis-1</span>  Stopped                                                                       <span class="number">0.2</span>s</span><br><span class="line"> ⠿ Container docker<span class="literal">-compose-web-1</span>    Stopped</span><br></pre></td></tr></table></figure><h3 id="停止并删除容器和网络"><a href="#停止并删除容器和网络" class="headerlink" title="停止并删除容器和网络"></a>停止并删除容器和网络</h3><h3 id="docker-compose-down"><a href="#docker-compose-down" class="headerlink" title="docker-compose down"></a>docker-compose down</h3><blockquote><p>示例</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment"># docker-compose down</span></span><br><span class="line">[+] Running <span class="number">3</span>/<span class="number">3</span></span><br><span class="line"> ⠿ Container docker<span class="literal">-compose-web-1</span>    Removed                                                                        <span class="number">10.2</span>s</span><br><span class="line"> ⠿ Container docker<span class="literal">-compose-redis-1</span>  Removed                                                                        <span class="number">0.2</span>s</span><br><span class="line"> ⠿ Network docker<span class="literal">-compose_default</span>    Removed</span><br><span class="line"> </span><br><span class="line"> [<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">docker</span>-<span class="type">compose</span>]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">b89f719e94e0   bridge    bridge    local</span><br><span class="line"><span class="number">28</span>d77e958643   host      host      local</span><br><span class="line"><span class="number">801</span>fbbe1b38c   mynet     bridge    local</span><br><span class="line">c3ff850e96f0   none      null      local</span><br></pre></td></tr></table></figure><p>可以看出，<strong>容器</strong>和<strong>网络</strong>都被删除了。</p><h2 id="更多配置"><a href="#更多配置" class="headerlink" title="更多配置"></a>更多配置</h2><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#compose-file-structure-and-examples">https://docs.docker.com/compose/compose-file/compose-file-v3/#compose-file-structure-and-examples</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.Docker网络</title>
      <link href="/posts/88ab1f41.html"/>
      <url>/posts/88ab1f41.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><h1 id="Docker网络-1"><a href="#Docker网络-1" class="headerlink" title="Docker网络"></a>Docker网络</h1><h2 id="Linux-网络"><a href="#Linux-网络" class="headerlink" title="Linux 网络"></a>Linux 网络</h2><blockquote><p>查看本地网络信息</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># ip addr</span></span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state UNKNOWN <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span>.<span class="number">0.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">2</span>: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc pfifo_fast state UP <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">00</span>:<span class="number">16</span>:<span class="number">3</span>e:<span class="number">30</span>:<span class="number">01</span>:<span class="number">20</span> brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet <span class="number">172.24</span>.<span class="number">19.94</span>/<span class="number">18</span> brd <span class="number">172.24</span>.<span class="number">63.255</span> scope global dynamic eth0</span><br><span class="line">       valid_lft <span class="number">310201059</span>sec preferred_lft <span class="number">310201059</span>sec</span><br><span class="line"><span class="number">3</span>: docker0: &lt;NO<span class="literal">-CARRIER</span>,BROADCAST,MULTICAST,UP&gt; mtu <span class="number">1500</span> qdisc noqueue state DOWN <span class="built_in">group</span> default </span><br><span class="line">    link/ether <span class="number">02</span>:<span class="number">42</span>:<span class="number">23</span>:ae:<span class="built_in">ac</span>:<span class="number">24</span> brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet <span class="number">172.17</span>.<span class="number">0.1</span>/<span class="number">16</span> brd <span class="number">172.17</span>.<span class="number">255.255</span> scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>有三个网卡信息：</p><ul><li><strong>lo</strong>：本地。</li><li><strong>ens</strong>：虚拟机或阿里云服务器地址。</li><li><strong>docker0</strong>：Docker 网络地址。</li></ul><h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2><p>在 Docker 安装后，主机会为 Docker 分配一个网卡，名为 <strong>docker0</strong> 。</p><p>该网卡使用<strong>桥接模式</strong>，使用的是 <strong>veth-pair</strong> 技术。</p><blockquote><p>启动两个容器</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker run -d -p 8081:8080 --name=tomcat01 tomcat</span></span><br><span class="line"><span class="number">29</span>a06eab16e73f34458b77a520081083fe536d8eb34eb67dbb9c6632fc720687</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker run -d -p 8082:8080 --name=tomcat02 tomcat</span></span><br><span class="line"><span class="number">442</span>add0d94cef631e0f531dff9d8f55b7e2f1aaeb088f742c3d8e240d4f9cc7d</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED          STATUS          PORTS                    NAMES</span><br><span class="line"><span class="number">442</span>add0d94ce   tomcat    <span class="string">&quot;catalina.sh run&quot;</span>   <span class="number">4</span> seconds ago    Up <span class="number">3</span> seconds    <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8082</span>-&gt;<span class="number">8080</span>/tcp   tomcat02</span><br><span class="line"><span class="number">29</span>a06eab16e7   tomcat    <span class="string">&quot;catalina.sh run&quot;</span>   <span class="number">15</span> seconds ago   Up <span class="number">14</span> seconds   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8081</span>-&gt;<span class="number">8080</span>/tcp   tomcat01</span><br></pre></td></tr></table></figure><blockquote><p>查看 Linux 网络</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">tomcat</span>]<span class="comment"># ip addr</span></span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state UNKNOWN <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span>.<span class="number">0.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">2</span>: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc pfifo_fast state UP <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">00</span>:<span class="number">16</span>:<span class="number">3</span>e:<span class="number">30</span>:<span class="number">01</span>:<span class="number">20</span> brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet <span class="number">172.24</span>.<span class="number">19.94</span>/<span class="number">18</span> brd <span class="number">172.24</span>.<span class="number">63.255</span> scope global dynamic eth0</span><br><span class="line">       valid_lft <span class="number">310199524</span>sec preferred_lft <span class="number">310199524</span>sec</span><br><span class="line"><span class="number">3</span>: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc noqueue state UP <span class="built_in">group</span> default </span><br><span class="line">    link/ether <span class="number">02</span>:<span class="number">42</span>:<span class="number">23</span>:ae:<span class="built_in">ac</span>:<span class="number">24</span> brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet <span class="number">172.17</span>.<span class="number">0.1</span>/<span class="number">16</span> brd <span class="number">172.17</span>.<span class="number">255.255</span> scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">7</span>: veth4a18f1b@if110: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc noqueue master docker0 state UP <span class="built_in">group</span> default </span><br><span class="line">    link/ether <span class="number">52</span>:<span class="number">69</span>:<span class="number">3</span>c:bc:<span class="number">83</span>:<span class="number">4</span>a brd ff:ff:ff:ff:ff:ff link<span class="literal">-netnsid</span> <span class="number">0</span></span><br><span class="line"><span class="number">9</span>: veth296fd0d@if112: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc noqueue master docker0 state UP <span class="built_in">group</span> default </span><br><span class="line">    link/ether <span class="number">76</span>:<span class="number">3</span>c:<span class="number">34</span>:e8:c4:<span class="number">90</span> brd ff:ff:ff:ff:ff:ff link<span class="literal">-netnsid</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Docker 每启动一个容器，就会分配一个 IP。</p><blockquote><p>查看容器的内部网络</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker exec -it tomcat01 ip addr</span></span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state UNKNOWN <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span>.<span class="number">0.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">6</span>: eth0@if7: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc noqueue state UP <span class="built_in">group</span> default </span><br><span class="line">    link/ether <span class="number">02</span>:<span class="number">42</span>:<span class="built_in">ac</span>:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> brd ff:ff:ff:ff:ff:ff link<span class="literal">-netnsid</span> <span class="number">0</span></span><br><span class="line">    inet <span class="number">172.17</span>.<span class="number">0.2</span>/<span class="number">16</span> brd <span class="number">172.17</span>.<span class="number">255.255</span> scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker exec -it tomcat02 ip addr</span></span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state UNKNOWN <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span>.<span class="number">0.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">8</span>: eth0@if9: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc noqueue state UP <span class="built_in">group</span> default </span><br><span class="line">    link/ether <span class="number">02</span>:<span class="number">42</span>:<span class="built_in">ac</span>:<span class="number">11</span>:<span class="number">00</span>:<span class="number">03</span> brd ff:ff:ff:ff:ff:ff link<span class="literal">-netnsid</span> <span class="number">0</span></span><br><span class="line">    inet <span class="number">172.17</span>.<span class="number">0.3</span>/<span class="number">16</span> brd <span class="number">172.17</span>.<span class="number">255.255</span> scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>可以看到容器内 IP 与本机 IP 成对出现，这就是 veth-pair 技术。</p><blockquote><p>容器访问 docker0 测试</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker exec -it tomcat01 ping 172.17.0.1</span></span><br><span class="line">PING <span class="number">172.17</span>.<span class="number">0.1</span> (<span class="number">172.17</span>.<span class="number">0.1</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of <span class="keyword">data</span>.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">172.17</span>.<span class="number">0.1</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.845</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">172.17</span>.<span class="number">0.1</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.139</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">172.17</span>.<span class="number">0.1</span>: icmp_seq=<span class="number">3</span> ttl=<span class="number">64</span> time=<span class="number">0.130</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">172.17</span>.<span class="number">0.1</span>: icmp_seq=<span class="number">4</span> ttl=<span class="number">64</span> time=<span class="number">0.134</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">172.17</span>.<span class="number">0.1</span>: icmp_seq=<span class="number">5</span> ttl=<span class="number">64</span> time=<span class="number">0.119</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">172.17</span>.<span class="number">0.1</span>: icmp_seq=<span class="number">6</span> ttl=<span class="number">64</span> time=<span class="number">0.082</span> ms</span><br></pre></td></tr></table></figure><p>容器与 docker0 之间是可以访问的。</p><blockquote><p>容器与容器之间访问</p></blockquote><p><strong>docker0</strong> 相当于一个路由器，各个容器都与 docker0 相连，容器之间的通信通过路由器来转发。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.6ikbd5gtdl.webp" alt="image.png"></p><p>Docker 中的所有网络接口都是虚拟的，相当于内网传递。</p><blockquote><p>只要删除容器，对应网络就会删除。</p></blockquote><h3 id="容器间网络连接"><a href="#容器间网络连接" class="headerlink" title="容器间网络连接"></a>容器间网络连接</h3><h3 id="docker-run-—link"><a href="#docker-run-—link" class="headerlink" title="docker run —link"></a>docker run —link</h3><p>每次重启容器或 Linux，IP 就会变化，固定 IP 互联网络就会失效。</p><p>如果能使用服务名来连接，而不考虑 IP，就会方便很多。</p><blockquote><p>测试使用容器名来 ping</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker exec -it tomcat01 ping tomcat02</span></span><br><span class="line">ping: tomcat02: Name or service not known</span><br></pre></td></tr></table></figure><p>容器之间无法通过容器名来连接。</p><blockquote><p>使用 –link 启动测试，先启动 tomcat01</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker run -d -P --name=tomcat01 tomcat0d39450a3253544ff5a9bf390b450a218b1055c4d1e60fc02b153ab58544d600</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 –-link 命令启动 tomcat02</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker run -d -P --name tomcat02 --link tomcat01 tomcat</span></span><br><span class="line"><span class="number">1901445346</span>baf10ddca6e8a639f0aed72b2cf758046e6da9c28426857c7bb3fd</span><br></pre></td></tr></table></figure><blockquote><p>在 tomcat02 访问 tomcat01</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">node1</span> ~]<span class="comment"># docker exec -it tomcat02 ping tomcat01</span></span><br><span class="line">PING tomcat01 (<span class="number">172.17</span>.<span class="number">0.2</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of <span class="keyword">data</span>.</span><br><span class="line"><span class="number">64</span> bytes from tomcat01 (<span class="number">172.17</span>.<span class="number">0.2</span>): icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.120</span> ms</span><br><span class="line"><span class="number">64</span> bytes from tomcat01 (<span class="number">172.17</span>.<span class="number">0.2</span>): icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.184</span> ms</span><br><span class="line">^C</span><br><span class="line"><span class="literal">---</span> tomcat01 ping statistics <span class="literal">---</span></span><br><span class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> received, <span class="number">0</span>% packet loss, time <span class="number">3</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">0.120</span>/<span class="number">0.152</span>/<span class="number">0.184</span>/<span class="number">0.032</span> ms</span><br></pre></td></tr></table></figure><p>在 tomcat01 访问 tomcat02 则无法访问。</p><blockquote><p>tomcat02 能够通过容器名访问 tomcat01，原理是 –link 通过 tomcat02 在自己容器 hosts 文件中配置了 tomcat01 IP 信息。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker exec -it tomcat02 cat /etc/hosts</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>    localhost</span><br><span class="line">::<span class="number">1</span>    localhost ip6<span class="literal">-localhost</span> ip6<span class="literal">-loopback</span></span><br><span class="line">fe00::<span class="number">0</span>    ip6<span class="literal">-localnet</span></span><br><span class="line">ff00::<span class="number">0</span>    ip6<span class="literal">-mcastprefix</span></span><br><span class="line">ff02::<span class="number">1</span>    ip6<span class="literal">-allnodes</span></span><br><span class="line">ff02::<span class="number">2</span>    ip6<span class="literal">-allrouters</span></span><br><span class="line"><span class="number">172.17</span>.<span class="number">0.2</span>    tomcat01 <span class="number">0</span>d39450a3253</span><br><span class="line"><span class="number">172.17</span>.<span class="number">0.3</span>    <span class="number">1901445346</span>ba</span><br></pre></td></tr></table></figure><p>所以 <code>--link</code> 本质就是修改 host 映射。</p><blockquote><p>这种方式已经不流行了，建议使用自定义网络实现。</p></blockquote><h3 id="查看Docker网络信息"><a href="#查看Docker网络信息" class="headerlink" title="查看Docker网络信息"></a>查看Docker网络信息</h3><h3 id="docker-network-ls"><a href="#docker-network-ls" class="headerlink" title="docker network ls"></a>docker network ls</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">f3eeb014197a   bridge    bridge    local</span><br><span class="line"><span class="number">28</span>d77e958643   host      host      local</span><br><span class="line">c3ff850e96f0   none      null      local</span><br></pre></td></tr></table></figure><ul><li><strong>bridge</strong>：桥接模式（默认）。自己创建也使用这种模式。</li><li><strong>host</strong>：和宿主即共享。</li><li><strong>none</strong>：不配置网络。</li></ul><h3 id="创建自定义网络"><a href="#创建自定义网络" class="headerlink" title="创建自定义网络"></a>创建自定义网络</h3><blockquote><p>启动容器</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker run -d -P --net bridge --name tomcat01 tomcat</span></span><br><span class="line">f048aad0addb07e861c138d167cd644c4c99f9d64c99c6b8ab3f7960fde1dce4</span><br></pre></td></tr></table></figure><p>在我们启动容器的时候默认会有一个网络设置。</p><blockquote><p>自定义网络，先使用 docker network –help 命令查询一下</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker network --help</span></span><br><span class="line">Usage:  docker network COMMAND</span><br><span class="line">Manage networks</span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  <span class="built_in">ls</span>          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  <span class="built_in">rm</span>          Remove one or more networks</span><br><span class="line">Run <span class="string">&#x27;docker network COMMAND --help&#x27;</span> <span class="keyword">for</span> more information on a command.</span><br></pre></td></tr></table></figure><h3 id="docker-network-create"><a href="#docker-network-create" class="headerlink" title="docker network create"></a>docker network create</h3><blockquote><p>参数</p></blockquote><ul><li><code>d</code>：网络模式</li><li><code>-subnet</code>：子网</li><li><code>-gateway</code>：网关</li></ul><blockquote><p>创建自定义网络</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker network create -d bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span></span><br><span class="line"><span class="number">801</span>fbbe1b38c81b12ce90aa9139561b5843dca64b4b17718b6e2622369f9be67</span><br></pre></td></tr></table></figure><blockquote><p>查看创建的网络</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">f3eeb014197a   bridge    bridge    local</span><br><span class="line"><span class="number">28</span>d77e958643   host      host      local</span><br><span class="line"><span class="number">801</span>fbbe1b38c   mynet     bridge    local</span><br><span class="line">c3ff850e96f0   none      null      local</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker network inspect 801fbbe1b38c</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;mynet&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;801fbbe1b38c81b12ce90aa9139561b5843dca64b4b17718b6e2622369f9be67&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2021-12-30T17:39:43.100705632+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;192.168.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;192.168.0.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>以下配置可以看出，自定义网络创建完成。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;192.168.0.0/16&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;192.168.0.1&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>启动镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker run -d -P --net=mynet --name=tomcat01 tomcat </span></span><br><span class="line">f3fad0c65fc3eb9a39b1189a25f5a7f664a0b9415df05cca5ee6edb6b7cc1915</span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker run -d -P --net=mynet --name=tomcat02 tomcat</span></span><br><span class="line"><span class="number">68</span>a78759663854c6d83a14fcc0cf45515e61c5e81d10799e96b22ef79c0d478f</span><br></pre></td></tr></table></figure><blockquote><p>连接测试</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker exec -it tomcat01 ping tomcat02</span></span><br><span class="line"><span class="number">64</span> bytes from tomcat02.mynet (<span class="number">192.168</span>.<span class="number">0.3</span>): icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.187</span> ms</span><br><span class="line"><span class="number">64</span> bytes from tomcat02.mynet (<span class="number">192.168</span>.<span class="number">0.3</span>): icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.147</span> ms</span><br><span class="line">^C</span><br><span class="line"><span class="literal">---</span> tomcat02 ping statistics <span class="literal">---</span></span><br><span class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> received, <span class="number">0</span>% packet loss, time <span class="number">4</span>ms</span><br><span class="line">rtt min/avg/max/mdev = <span class="number">0.147</span>/<span class="number">0.167</span>/<span class="number">0.187</span>/<span class="number">0.020</span> ms</span><br></pre></td></tr></table></figure><p>能够连通说明不同容器处于同一网络下。</p><blockquote><p>这种方式可以实现不同集群使用不同的网络，保证集群网络的安全。</p></blockquote><p>如 Redis 集群在 192.160.0.0&#x2F;16 网段下，MySQL 集群在 192.161.0.0&#x2F;16 网段下。</p><h3 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h3><h3 id="docker-network-connect"><a href="#docker-network-connect" class="headerlink" title="docker network connect"></a>docker network connect</h3><p>使用<code>docker network connect</code>实现一个容器链接到另一个网段。</p><blockquote><p>建立连接</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker run -d -P --name=tomcat02-net tomcat</span></span><br><span class="line"><span class="number">5</span>a02cd4172daccc5073907ee6b063560687db5ffdd5041b18fd3ff1055a8984c</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker network connect mynet tomcat02-net</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">f3eeb014197a   bridge    bridge    local</span><br><span class="line"><span class="number">28</span>d77e958643   host      host      local</span><br><span class="line"><span class="number">801</span>fbbe1b38c   mynet     bridge    local</span><br><span class="line">c3ff850e96f0   none      null      local</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker network inspect 801fbbe1b38c</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;mynet&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;801fbbe1b38c81b12ce90aa9139561b5843dca64b4b17718b6e2622369f9be67&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2021-12-30T17:39:43.100705632+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;192.168.0.0/16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;192.168.0.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="type">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;5a02cd4172daccc5073907ee6b063560687db5ffdd5041b18fd3ff1055a8984c&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat02-net&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;e6503138bcb91a7693576e324df75d1dff594f1c5aa3e08397802c38133eb0e9&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:c0:a8:00:05&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;192.168.0.5/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样也可以实现容器链接到自定义网络。</p><blockquote><p>查看容器详情</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED             STATUS             PORTS                     NAMES</span><br><span class="line"><span class="number">5</span>a02cd4172da   tomcat    <span class="string">&quot;catalina.sh run&quot;</span>   <span class="number">5</span> minutes ago       Up <span class="number">5</span> minutes       <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">49159</span>-&gt;<span class="number">8080</span>/tcp   tomcat02<span class="literal">-net</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker inspect 5a02cd4172da</span></span><br></pre></td></tr></table></figure><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.3nrn7d1um7.webp" alt="image.png"></p><p>这里也可以发现容器 tomcat02-net 已经与 mynet 建立了连接。</p><blockquote><p>测试连接</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker exec -it tomcat02 ping tomcat02-net</span></span><br><span class="line">PING tomcat02<span class="literal">-net</span> (<span class="number">192.168</span>.<span class="number">0.2</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of <span class="keyword">data</span>.</span><br><span class="line"><span class="number">64</span> bytes from tomcat02<span class="literal">-net</span>.mynet (<span class="number">192.168</span>.<span class="number">0.2</span>): icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.121</span> ms</span><br><span class="line"><span class="number">64</span> bytes from tomcat02<span class="literal">-net</span>.mynet (<span class="number">192.168</span>.<span class="number">0.2</span>): icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.064</span> ms</span><br><span class="line">^C</span><br><span class="line"><span class="literal">---</span> tomcat02<span class="literal">-net</span> ping statistics <span class="literal">---</span></span><br></pre></td></tr></table></figure><p>网络连通成功。</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.Dockerfile</title>
      <link href="/posts/961bb108.html"/>
      <url>/posts/961bb108.html</url>
      
        <content type="html"><![CDATA[<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h1 id="Dockerfile-1"><a href="#Dockerfile-1" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.5q7fvep4ep.webp" alt="image.png"></p><p>Dockerfile 是用来构建 Docker 镜像的文件，可以理解为<strong>命令参数脚本</strong>。</p><p>Dockerfile 是面向开发的，想要打包项目，就要编写 Dockerfile 文件。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>以上面的 centos 官方镜像的 Dockerfile 为例。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">ADD centos<span class="literal">-7-docker</span>.tar.xz /</span><br><span class="line">LABEL org.label<span class="literal">-schema</span>.schema<span class="literal">-version</span>=<span class="string">&quot;1.0&quot;</span> \</span><br><span class="line">    org.label<span class="literal">-schema</span>.name=<span class="string">&quot;CentOS Base Image&quot;</span> \</span><br><span class="line">    org.label<span class="literal">-schema</span>.vendor=<span class="string">&quot;CentOS&quot;</span> \</span><br><span class="line">    org.label<span class="literal">-schema</span>.license=<span class="string">&quot;GPLv2&quot;</span> \</span><br><span class="line">    org.label<span class="literal">-schema</span>.<span class="built_in">build-date</span>=<span class="string">&quot;20181204&quot;</span></span><br><span class="line">CMD [<span class="string">&quot;/bin/bash&quot;</span>]</span><br></pre></td></tr></table></figure><p>Docker Hub 中 99% 的镜像都是从<code>FROM scratch</code> 开始的。</p><blockquote><p>规则</p></blockquote><ul><li>每个指令都必须是大写字母。</li><li>按照从上到下顺序执行。</li><li><strong>#</strong> 表示注释。</li><li>每一条指令都会创建一个新的镜像层。</li></ul><blockquote><p>解释</p></blockquote><ul><li><code>FROM</code>：基础镜像，比如 centos。</li><li><code>MAINTAINER</code>：镜像是谁写的。建议以此格式：<code>姓名&lt;邮箱&gt;</code>。</li><li><code>RUN</code>：镜像构建时需要运行的命令。</li><li><code>ADD</code>：添加，比如添加一个 tomcat 压缩包。</li><li><code>WORKDIR</code>：镜像的工作目录。</li><li><code>VOLUME</code>：挂载的目录。</li><li><code>EXPOSE</code>：指定暴露端口，跟 -p 一个道理。</li><li><code>RUN</code>：最终要运行的。</li><li><code>CMD</code>：指定这个容器启动的时候要运行的命令，只有最后一个会生效，而且可被替代。</li><li><code>ENTRYPOINT</code>：指定这个容器启动的时候要运行的命令，可以追加命令。</li><li><code>ONBUILD</code>：当构建一个被继承Dockerfile 这个时候运行ONBUILD指定，触发指令。</li><li><code>COPY</code>：将文件拷贝到镜像中。</li><li><code>ENV</code>：构建的时候设置环境变量。</li></ul><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><h3 id="docker-build"><a href="#docker-build" class="headerlink" title="docker build"></a>docker build</h3><p>Dockerfile 编写好后，需要使用 <code>docker build</code> 命令运行。</p><blockquote><p>语法</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [参数] 路径 | 网络地址 | -</span><br></pre></td></tr></table></figure><blockquote><p>参数</p></blockquote><ul><li><code>-f</code>：指定要使用的Dockerfile路径。</li><li><code>-t</code>：镜像的名字及标签，通常 <strong>name:tag</strong> 或者 <strong>name</strong> 格式；可以在一次构建中为一个镜像设置多个标签。</li><li><code>-m</code>：设置内存最大值。</li></ul><blockquote><p>Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回报错信息。 </p></blockquote><h2 id="查看构建记录"><a href="#查看构建记录" class="headerlink" title="查看构建记录"></a>查看构建记录</h2><h3 id="docker-history"><a href="#docker-history" class="headerlink" title="docker history"></a>docker history</h3><blockquote><p>语法</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">history</span> 镜像</span><br></pre></td></tr></table></figure><h2 id="CMD-与-ENTRYPOINT-区别"><a href="#CMD-与-ENTRYPOINT-区别" class="headerlink" title="CMD 与 ENTRYPOINT 区别"></a>CMD 与 ENTRYPOINT 区别</h2><h3 id="CMD-命令演示"><a href="#CMD-命令演示" class="headerlink" title="CMD 命令演示"></a>CMD 命令演示</h3><blockquote><p>编写 Dockerfile</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># vim Dockerfile-cmd-test</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># cat Dockerfile-cmd-test </span></span><br><span class="line">FROM centos</span><br><span class="line">CMD [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>构建镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># docker build -f Dockerfile-cmd-test -t zmtest .</span></span><br><span class="line">Sending build context to Docker daemon  <span class="number">2.048</span>kB</span><br><span class="line">Step <span class="number">1</span>/<span class="number">2</span> : FROM centos</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">5</span>d0da3dc9764</span><br><span class="line">Step <span class="number">2</span>/<span class="number">2</span> : CMD [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">0</span>a743e929fff</span><br><span class="line">Removing intermediate container <span class="number">0</span>a743e929fff</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">1683</span>c0790d49</span><br><span class="line">Successfully built <span class="number">1683</span>c0790d49</span><br><span class="line">Successfully tagged zmtest:latest</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">zmtest           latest    <span class="number">1683</span>c0790d49   <span class="number">13</span> minutes ago   <span class="number">231</span>MB</span><br></pre></td></tr></table></figure><blockquote><p>运行镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># docker run zmtest</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br></pre></td></tr></table></figure><p>此时 Dockerfile 中编写的命令生效了。</p><blockquote><p>追加 -l 命令</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># docker run zmtest -l</span></span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:<span class="number">380</span>: starting container <span class="keyword">process</span> caused: exec: <span class="string">&quot;-l&quot;</span>: executable file not found <span class="keyword">in</span> <span class="variable">$PATH:</span> unknown.</span><br><span class="line">ERRO[<span class="number">0000</span>] error waiting <span class="keyword">for</span> container: context canceled</span><br></pre></td></tr></table></figure><p>没有达到预期的 <code>ls -al</code> 命令。</p><blockquote><p>CMD 是替换的方式， -l 不是命令，所以报错。</p></blockquote><h3 id="ENTRYPOINT-命令演示"><a href="#ENTRYPOINT-命令演示" class="headerlink" title="ENTRYPOINT 命令演示"></a>ENTRYPOINT 命令演示</h3><blockquote><p>编写 Dockerfile</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># vim Dockerfile-ent-test</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># cat Dockerfile-ent-test </span></span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>构建镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># docker build -f Dockerfile-ent-test -t ent-test .</span></span><br><span class="line">Sending build context to Docker daemon  <span class="number">3.072</span>kB</span><br><span class="line">Step <span class="number">1</span>/<span class="number">2</span> : FROM centos</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">5</span>d0da3dc9764</span><br><span class="line">Step <span class="number">2</span>/<span class="number">2</span> : ENTRYPOINT [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> a02d55ae0a00</span><br><span class="line">Removing intermediate container a02d55ae0a00</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">795973</span>a0ed43</span><br><span class="line">Successfully built <span class="number">795973</span>a0ed43</span><br><span class="line">Successfully tagged ent<span class="literal">-test</span>:latest</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">ent<span class="literal">-test</span>   latest    <span class="number">795973</span>a0ed43   <span class="number">22</span> seconds ago   <span class="number">231</span>MB</span><br></pre></td></tr></table></figure><blockquote><p>运行镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># docker run ent-test</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br></pre></td></tr></table></figure><p>此时 Dockerfile 中编写的命令也生效了。</p><blockquote><p>追加 -l 命令</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># docker run ent-test -l</span></span><br><span class="line">total <span class="number">56</span></span><br><span class="line">drwxr<span class="literal">-xr-x</span>   <span class="number">1</span> root root <span class="number">4096</span> Mar <span class="number">27</span> <span class="number">10</span>:<span class="number">26</span> .</span><br><span class="line">drwxr<span class="literal">-xr-x</span>   <span class="number">1</span> root root <span class="number">4096</span> Mar <span class="number">27</span> <span class="number">10</span>:<span class="number">26</span> ..</span><br><span class="line"><span class="literal">-rwxr-xr-x</span>   <span class="number">1</span> root root    <span class="number">0</span> Mar <span class="number">27</span> <span class="number">10</span>:<span class="number">26</span> .dockerenv</span><br><span class="line">lrwxrwxrwx   <span class="number">1</span> root root    <span class="number">7</span> Nov  <span class="number">3</span>  <span class="number">2020</span> bin -&gt; usr/bin</span><br><span class="line">drwxr<span class="literal">-xr-x</span>   <span class="number">5</span> root root  <span class="number">340</span> Mar <span class="number">27</span> <span class="number">10</span>:<span class="number">26</span> dev</span><br><span class="line">drwxr<span class="literal">-xr-x</span>   <span class="number">1</span> root root <span class="number">4096</span> Mar <span class="number">27</span> <span class="number">10</span>:<span class="number">26</span> etc</span><br><span class="line">drwxr<span class="literal">-xr-x</span>   <span class="number">2</span> root root <span class="number">4096</span> Nov  <span class="number">3</span>  <span class="number">2020</span> home</span><br><span class="line">lrwxrwxrwx   <span class="number">1</span> root root    <span class="number">7</span> Nov  <span class="number">3</span>  <span class="number">2020</span> lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   <span class="number">1</span> root root    <span class="number">9</span> Nov  <span class="number">3</span>  <span class="number">2020</span> lib64 -&gt; usr/lib64</span><br><span class="line">drwx<span class="literal">------</span>   <span class="number">2</span> root root <span class="number">4096</span> Sep <span class="number">15</span>  <span class="number">2021</span> lost+found</span><br><span class="line">drwxr<span class="literal">-xr-x</span>   <span class="number">2</span> root root <span class="number">4096</span> Nov  <span class="number">3</span>  <span class="number">2020</span> media</span><br><span class="line">drwxr<span class="literal">-xr-x</span>   <span class="number">2</span> root root <span class="number">4096</span> Nov  <span class="number">3</span>  <span class="number">2020</span> mnt</span><br><span class="line">drwxr<span class="literal">-xr-x</span>   <span class="number">2</span> root root <span class="number">4096</span> Nov  <span class="number">3</span>  <span class="number">2020</span> opt</span><br><span class="line">dr<span class="literal">-xr-xr-x</span> <span class="number">352</span> root root    <span class="number">0</span> Mar <span class="number">27</span> <span class="number">10</span>:<span class="number">26</span> proc</span><br><span class="line">dr<span class="literal">-xr-x---</span>   <span class="number">2</span> root root <span class="number">4096</span> Sep <span class="number">15</span>  <span class="number">2021</span> root</span><br><span class="line">drwxr<span class="literal">-xr-x</span>  <span class="number">11</span> root root <span class="number">4096</span> Sep <span class="number">15</span>  <span class="number">2021</span> run</span><br><span class="line">lrwxrwxrwx   <span class="number">1</span> root root    <span class="number">8</span> Nov  <span class="number">3</span>  <span class="number">2020</span> sbin -&gt; usr/sbin</span><br><span class="line">drwxr<span class="literal">-xr-x</span>   <span class="number">2</span> root root <span class="number">4096</span> Nov  <span class="number">3</span>  <span class="number">2020</span> srv</span><br><span class="line">dr<span class="literal">-xr-xr-x</span>  <span class="number">11</span> root root    <span class="number">0</span> Mar <span class="number">27</span> <span class="number">10</span>:<span class="number">26</span> sys</span><br><span class="line">drwxrwxrwt   <span class="number">7</span> root root <span class="number">4096</span> Sep <span class="number">15</span>  <span class="number">2021</span> tmp</span><br><span class="line">drwxr<span class="literal">-xr-x</span>  <span class="number">12</span> root root <span class="number">4096</span> Sep <span class="number">15</span>  <span class="number">2021</span> usr</span><br><span class="line">drwxr<span class="literal">-xr-x</span>  <span class="number">20</span> root root <span class="number">4096</span> Sep <span class="number">15</span>  <span class="number">2021</span> var</span><br></pre></td></tr></table></figure><p>运行了预期的 <code>ls -al</code> 命令。</p><blockquote><p>ENTRYPOINT 是追加的方式。</p></blockquote><p>Docker 中许多命令都十分相似，我们需要了解他们的区别，最好的方式就是这样对比测试。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="创建包含vim命令的centos镜像"><a href="#创建包含vim命令的centos镜像" class="headerlink" title="创建包含vim命令的centos镜像"></a>创建包含vim命令的centos镜像</h3><blockquote><p>编写 Dockerfile</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># vim Dockerfile-centos-my </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># cat Dockerfile-centos-my </span></span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER fantasy&lt;xxxxx@<span class="number">163</span>.com&gt;</span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line">RUN yum <span class="literal">-y</span> install vim</span><br><span class="line">RUN yum <span class="literal">-y</span> install net<span class="literal">-tools</span></span><br><span class="line">EXPOSE <span class="number">81</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;---end---&quot;</span></span><br><span class="line">CMD [<span class="string">&quot;/bin/bash&quot;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>构建镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># docker build -f Dockerfile-centos-my -t centos-my .</span></span><br><span class="line">Sending build context to Docker daemon  <span class="number">5.632</span>kB</span><br><span class="line">Step <span class="number">1</span>/<span class="number">10</span> : FROM centos</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">5</span>d0da3dc9764</span><br><span class="line">Step <span class="number">2</span>/<span class="number">10</span> : MAINTAINER fantasy&lt;xxxxxx@<span class="number">163</span>.com&gt;</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">8</span>b7340768878</span><br><span class="line">Removing intermediate container <span class="number">8</span>b7340768878</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">9616888</span>f3b10</span><br><span class="line">Step <span class="number">3</span>/<span class="number">10</span> : ENV MYPATH /usr/local</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">2</span>c73446a56ff</span><br><span class="line">Removing intermediate container <span class="number">2</span>c73446a56ff</span><br><span class="line"> <span class="literal">---</span>&gt; be89377d4c2c</span><br><span class="line">Step <span class="number">4</span>/<span class="number">10</span> : WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> db113c4f7cb2</span><br><span class="line">Removing intermediate container db113c4f7cb2</span><br><span class="line"> <span class="literal">---</span>&gt; fb41ece5d944</span><br><span class="line">Step <span class="number">5</span>/<span class="number">10</span> : RUN yum <span class="literal">-y</span> install vim</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> eccee60c0389</span><br><span class="line">CentOS Linux <span class="number">8</span> - AppStream                       <span class="number">12</span> MB/s | <span class="number">8.4</span> MB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">CentOS Linux <span class="number">8</span> - BaseOS                         <span class="number">1.7</span> MB/s | <span class="number">3.6</span> MB     <span class="number">00</span>:<span class="number">02</span>    </span><br><span class="line">CentOS Linux <span class="number">8</span> - Extras                          <span class="number">17</span> kB/s |  <span class="number">10</span> kB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">Last metadata expiration check: <span class="number">0</span>:<span class="number">00</span>:<span class="number">01</span> ago on Sat Dec <span class="number">25</span> <span class="number">05</span>:<span class="number">09</span>:<span class="number">40</span> <span class="number">2021</span>.</span><br><span class="line">Dependencies resolved.</span><br><span class="line">================================================================================</span><br><span class="line"> Package             Arch        Version                   Repository      Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> vim<span class="literal">-enhanced</span>        x86_64      <span class="number">2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8         appstream      <span class="number">1.4</span> M</span><br><span class="line">Installing dependencies:</span><br><span class="line"> gpm<span class="literal">-libs</span>            x86_64      <span class="number">1.20</span>.<span class="number">7</span><span class="literal">-17</span>.el8             appstream       <span class="number">39</span> k</span><br><span class="line"> vim<span class="literal">-common</span>          x86_64      <span class="number">2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8         appstream      <span class="number">6.3</span> M</span><br><span class="line"> vim<span class="literal">-filesystem</span>      noarch      <span class="number">2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8         appstream       <span class="number">49</span> k</span><br><span class="line"> which               x86_64      <span class="number">2.21</span><span class="literal">-16</span>.el8               baseos          <span class="number">49</span> k</span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install  <span class="number">5</span> Packages</span><br><span class="line">Total download size: <span class="number">7.8</span> M</span><br><span class="line">Installed size: <span class="number">30</span> M</span><br><span class="line">Downloading Packages:</span><br><span class="line">(<span class="number">1</span>/<span class="number">5</span>): gpm<span class="literal">-libs-1</span>.<span class="number">20.7</span><span class="literal">-17</span>.el8.x86_64.rpm        <span class="number">582</span> kB/s |  <span class="number">39</span> kB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">(<span class="number">2</span>/<span class="number">5</span>): vim<span class="literal">-filesystem-8</span>.<span class="number">0.1763</span><span class="literal">-16</span>.el8.noarch.rp <span class="number">1.2</span> MB/s |  <span class="number">49</span> kB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">(<span class="number">3</span>/<span class="number">5</span>): vim<span class="literal">-common-8</span>.<span class="number">0.1763</span><span class="literal">-16</span>.el8.x86_64.rpm     <span class="number">40</span> MB/s | <span class="number">6.3</span> MB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">(<span class="number">4</span>/<span class="number">5</span>): vim<span class="literal">-enhanced-8</span>.<span class="number">0.1763</span><span class="literal">-16</span>.el8.x86_64.rpm  <span class="number">7.1</span> MB/s | <span class="number">1.4</span> MB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">(<span class="number">5</span>/<span class="number">5</span>): which<span class="literal">-2</span>.<span class="number">21</span><span class="literal">-16</span>.el8.x86_64.rpm             <span class="number">252</span> kB/s |  <span class="number">49</span> kB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line"><span class="literal">--------------------------------------------------------------------------------</span></span><br><span class="line">Total                                           <span class="number">6.4</span> MB/s | <span class="number">7.8</span> MB     <span class="number">00</span>:<span class="number">01</span>     </span><br><span class="line">warning: /var/cache/dnf/appstream<span class="literal">-02e86d1c976ab532</span>/packages/gpm<span class="literal">-libs-1</span>.<span class="number">20.7</span><span class="literal">-17</span>.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID <span class="number">8483</span>c65d: NOKEY</span><br><span class="line">CentOS Linux <span class="number">8</span> - AppStream                      <span class="number">1.6</span> MB/s | <span class="number">1.6</span> kB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">Importing GPG key <span class="number">0</span>x8483C65D:</span><br><span class="line"> Userid     : <span class="string">&quot;CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;&quot;</span></span><br><span class="line"> Fingerprint: <span class="number">99</span>DB <span class="number">70</span>FA E1D7 CE22 <span class="number">7</span>FB6 <span class="number">4882</span> <span class="number">05</span>B5 <span class="number">55</span>B3 <span class="number">8483</span> C65D</span><br><span class="line"> From       : /etc/pki/rpm<span class="literal">-gpg</span>/RPM<span class="literal">-GPG-KEY-centosofficial</span></span><br><span class="line">Key imported successfully</span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded.</span><br><span class="line">Running transaction</span><br><span class="line">  Preparing        :                                                        <span class="number">1</span>/<span class="number">1</span> </span><br><span class="line">  Installing       : which<span class="literal">-2</span>.<span class="number">21</span><span class="literal">-16</span>.el8.x86_64                               <span class="number">1</span>/<span class="number">5</span> </span><br><span class="line">  Installing       : vim<span class="literal">-filesystem-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.noarch                <span class="number">2</span>/<span class="number">5</span> </span><br><span class="line">  Installing       : vim<span class="literal">-common-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64                    <span class="number">3</span>/<span class="number">5</span> </span><br><span class="line">  Installing       : gpm<span class="literal">-libs-1</span>.<span class="number">20.7</span><span class="literal">-17</span>.el8.x86_64                          <span class="number">4</span>/<span class="number">5</span> </span><br><span class="line">  Running scriptlet: gpm<span class="literal">-libs-1</span>.<span class="number">20.7</span><span class="literal">-17</span>.el8.x86_64                          <span class="number">4</span>/<span class="number">5</span> </span><br><span class="line">  Installing       : vim<span class="literal">-enhanced-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64                  <span class="number">5</span>/<span class="number">5</span> </span><br><span class="line">  Running scriptlet: vim<span class="literal">-enhanced-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64                  <span class="number">5</span>/<span class="number">5</span> </span><br><span class="line">  Running scriptlet: vim<span class="literal">-common-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64                    <span class="number">5</span>/<span class="number">5</span> </span><br><span class="line">  Verifying        : gpm<span class="literal">-libs-1</span>.<span class="number">20.7</span><span class="literal">-17</span>.el8.x86_64                          <span class="number">1</span>/<span class="number">5</span> </span><br><span class="line">  Verifying        : vim<span class="literal">-common-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64                    <span class="number">2</span>/<span class="number">5</span> </span><br><span class="line">  Verifying        : vim<span class="literal">-enhanced-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64                  <span class="number">3</span>/<span class="number">5</span> </span><br><span class="line">  Verifying        : vim<span class="literal">-filesystem-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.noarch                <span class="number">4</span>/<span class="number">5</span> </span><br><span class="line">  Verifying        : which<span class="literal">-2</span>.<span class="number">21</span><span class="literal">-16</span>.el8.x86_64                               <span class="number">5</span>/<span class="number">5</span> </span><br><span class="line">Installed:</span><br><span class="line">  gpm<span class="literal">-libs-1</span>.<span class="number">20.7</span><span class="literal">-17</span>.el8.x86_64         vim<span class="literal">-common-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64    </span><br><span class="line">  vim<span class="literal">-enhanced-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64 vim<span class="literal">-filesystem-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.noarch</span><br><span class="line">  which<span class="literal">-2</span>.<span class="number">21</span><span class="literal">-16</span>.el8.x86_64             </span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container eccee60c0389</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">9</span>f54f48660<span class="built_in">ac</span></span><br><span class="line">Step <span class="number">6</span>/<span class="number">10</span> : RUN yum <span class="literal">-y</span> install net<span class="literal">-tools</span></span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">6</span>caa7361b001</span><br><span class="line">Last metadata expiration check: <span class="number">0</span>:<span class="number">00</span>:<span class="number">08</span> ago on Sat Dec <span class="number">25</span> <span class="number">05</span>:<span class="number">09</span>:<span class="number">40</span> <span class="number">2021</span>.</span><br><span class="line">Dependencies resolved.</span><br><span class="line">================================================================================</span><br><span class="line"> Package         Architecture Version                        Repository    Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> net<span class="literal">-tools</span>       x86_64       <span class="number">2.0</span><span class="literal">-0</span>.<span class="number">52.20160912</span>git.el8       baseos       <span class="number">322</span> k</span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install  <span class="number">1</span> Package</span><br><span class="line">Total download size: <span class="number">322</span> k</span><br><span class="line">Installed size: <span class="number">942</span> k</span><br><span class="line">Downloading Packages:</span><br><span class="line">net<span class="literal">-tools-2</span>.<span class="number">0</span><span class="literal">-0</span>.<span class="number">52.20160912</span>git.el8.x86_64.rpm   <span class="number">1.0</span> MB/s | <span class="number">322</span> kB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line"><span class="literal">--------------------------------------------------------------------------------</span></span><br><span class="line">Total                                           <span class="number">449</span> kB/s | <span class="number">322</span> kB     <span class="number">00</span>:<span class="number">00</span>     </span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded.</span><br><span class="line">Running transaction</span><br><span class="line">  Preparing        :                                                        <span class="number">1</span>/<span class="number">1</span> </span><br><span class="line">  Installing       : net<span class="literal">-tools-2</span>.<span class="number">0</span><span class="literal">-0</span>.<span class="number">52.20160912</span>git.el8.x86_64              <span class="number">1</span>/<span class="number">1</span> </span><br><span class="line">  Running scriptlet: net<span class="literal">-tools-2</span>.<span class="number">0</span><span class="literal">-0</span>.<span class="number">52.20160912</span>git.el8.x86_64              <span class="number">1</span>/<span class="number">1</span> </span><br><span class="line">  Verifying        : net<span class="literal">-tools-2</span>.<span class="number">0</span><span class="literal">-0</span>.<span class="number">52.20160912</span>git.el8.x86_64              <span class="number">1</span>/<span class="number">1</span> </span><br><span class="line">Installed:</span><br><span class="line">  net<span class="literal">-tools-2</span>.<span class="number">0</span><span class="literal">-0</span>.<span class="number">52.20160912</span>git.el8.x86_64                                     </span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container <span class="number">6</span>caa7361b001</span><br><span class="line"> <span class="literal">---</span>&gt; a9431f90fd3f</span><br><span class="line">Step <span class="number">7</span>/<span class="number">10</span> : EXPOSE <span class="number">81</span></span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> ad67fa23940a</span><br><span class="line">Removing intermediate container ad67fa23940a</span><br><span class="line"> <span class="literal">---</span>&gt; b5bd21416741</span><br><span class="line">Step <span class="number">8</span>/<span class="number">10</span> : CMD <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> fb1d08538689</span><br><span class="line">Removing intermediate container fb1d08538689</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">5</span>c5def0bbb85</span><br><span class="line">Step <span class="number">9</span>/<span class="number">10</span> : CMD <span class="built_in">echo</span> <span class="string">&quot;---end---&quot;</span></span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> a9d955b6b389</span><br><span class="line">Removing intermediate container a9d955b6b389</span><br><span class="line"> <span class="literal">---</span>&gt; ad95558eb658</span><br><span class="line">Step <span class="number">10</span>/<span class="number">10</span> : CMD [<span class="string">&quot;/bin/bash&quot;</span>]</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">190651202</span>e7b</span><br><span class="line">Removing intermediate container <span class="number">190651202</span>e7b</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">7</span>d202bdf002b</span><br><span class="line">Successfully built <span class="number">7</span>d202bdf002b</span><br><span class="line">Successfully tagged centos<span class="literal">-my</span>:latest</span><br></pre></td></tr></table></figure><blockquote><p>查看构建的镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED              SIZE</span><br><span class="line">centos<span class="literal">-my</span>       latest    <span class="number">7</span>d202bdf002b   About a minute ago   <span class="number">323</span>MB</span><br></pre></td></tr></table></figure><blockquote><p>查看本地镜像的构建记录</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">dockerfile</span>]<span class="comment"># docker history centos-my</span></span><br><span class="line">IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT</span><br><span class="line"><span class="number">7</span>d202bdf002b   <span class="number">5</span> minutes ago   /bin/sh <span class="literal">-c</span> <span class="comment">#(nop)  CMD [&quot;/bin/bash&quot;]            0B        </span></span><br><span class="line">ad95558eb658   <span class="number">5</span> minutes ago   /bin/sh <span class="literal">-c</span> <span class="comment">#(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B        </span></span><br><span class="line"><span class="number">5</span>c5def0bbb85   <span class="number">5</span> minutes ago   /bin/sh <span class="literal">-c</span> <span class="comment">#(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B        </span></span><br><span class="line">b5bd21416741   <span class="number">5</span> minutes ago   /bin/sh <span class="literal">-c</span> <span class="comment">#(nop)  EXPOSE 81                    0B        </span></span><br><span class="line">a9431f90fd3f   <span class="number">5</span> minutes ago   /bin/sh <span class="literal">-c</span> yum <span class="literal">-y</span> install net<span class="literal">-tools</span>             <span class="number">27.3</span>MB    </span><br><span class="line"><span class="number">9</span>f54f48660<span class="built_in">ac</span>   <span class="number">5</span> minutes ago   /bin/sh <span class="literal">-c</span> yum <span class="literal">-y</span> install vim                   <span class="number">64.8</span>MB    </span><br><span class="line">fb41ece5d944   <span class="number">5</span> minutes ago   /bin/sh <span class="literal">-c</span> <span class="comment">#(nop) WORKDIR /usr/local            0B        </span></span><br><span class="line">be89377d4c2c   <span class="number">5</span> minutes ago   /bin/sh <span class="literal">-c</span> <span class="comment">#(nop)  ENV MYPATH=/usr/local        0B        </span></span><br><span class="line"><span class="number">9616888</span>f3b10   <span class="number">5</span> minutes ago   /bin/sh <span class="literal">-c</span> <span class="comment">#(nop)  MAINTAINER fantasy&lt;yifanfantasy…   0B        </span></span><br><span class="line"><span class="number">5</span>d0da3dc9764   <span class="number">3</span> months ago    /bin/sh <span class="literal">-c</span> <span class="comment">#(nop)  CMD [&quot;/bin/bash&quot;]            0B        </span></span><br><span class="line">&lt;missing&gt;      <span class="number">3</span> months ago    /bin/sh <span class="literal">-c</span> <span class="comment">#(nop)  LABEL org.label-schema.sc…   0B        </span></span><br><span class="line">&lt;missing&gt;      <span class="number">3</span> months ago    /bin/sh <span class="literal">-c</span> <span class="comment">#(nop) ADD file:805cb5e15fb6e0bb0…   231MB</span></span><br></pre></td></tr></table></figure><blockquote><p>运行测试</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> ~]<span class="comment"># docker run -it centos-my</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">530551</span><span class="type">bc2162</span> <span class="type">local</span>]<span class="comment"># pwd</span></span><br><span class="line">/usr/local</span><br><span class="line">[<span class="type">root</span>@<span class="number">530551</span><span class="type">bc2162</span> <span class="type">local</span>]<span class="comment"># vim test.java</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">530551</span><span class="type">bc2162</span> <span class="type">local</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>默认的工作目录正是 Dockerfile 中设置的 <code>/usr/local</code> ，且可以使用 <code>vim</code> 命令了。</p><h3 id="自定义tomcat环境镜像"><a href="#自定义tomcat环境镜像" class="headerlink" title="自定义tomcat环境镜像"></a>自定义tomcat环境镜像</h3><blockquote><p>编写 Dockerfile</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER fantasy&lt;xxxxxx@<span class="number">163</span>.com&gt;</span><br><span class="line"><span class="built_in">COPY</span> readme.txt /usr/local/readme.txt</span><br><span class="line">ENV MYPATH /usr/local/</span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line">ADD jdk<span class="literal">-8u301-linux-x64</span>.tar.gz <span class="variable">$MYPATH</span></span><br><span class="line">ADD apache<span class="literal">-tomcat-9</span>.<span class="number">0.55</span>.tar.gz <span class="variable">$MYPATH</span></span><br><span class="line">RUN yum <span class="literal">-y</span> install vim</span><br><span class="line">ENV JAVA_HOME <span class="variable">$MYPATH</span>/jdk1.<span class="number">8.0</span>_301<span class="literal">-amd64</span></span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line">ENV CATALINA_HOME <span class="variable">$MYPATH</span>/apache<span class="literal">-tomcat-9</span>.<span class="number">0.55</span></span><br><span class="line">ENV CATALINA_BASH <span class="variable">$MYPATH</span>/apache<span class="literal">-tomcat-9</span>.<span class="number">0.55</span></span><br><span class="line">ENV PATH <span class="variable">$PATH:</span><span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib</span><br><span class="line">EXPOSE <span class="number">8080</span></span><br><span class="line">CMD <span class="variable">$CATALINA_HOME</span>/bin/startup.sh &amp;&amp; tail <span class="operator">-F</span> <span class="variable">$CATALINA_HOME</span>/logs/catalina.out</span><br></pre></td></tr></table></figure><p>其中的 <strong>readme.txt</strong> 一般作为镜像说明文件，可以在里面编写镜像的信息。</p><blockquote><p>构建镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">tomcat</span>]<span class="comment"># docker build -t tomcat-test .</span></span><br><span class="line">Sending build context to Docker daemon  <span class="number">157.1</span>MB</span><br><span class="line">Step <span class="number">1</span>/<span class="number">15</span> : FROM centos</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">5</span>d0da3dc9764</span><br><span class="line">Step <span class="number">2</span>/<span class="number">15</span> : MAINTAINER fantasy&lt;xxxxxx@<span class="number">163</span>.com&gt;</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="keyword">Using</span> cache</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">9616888</span>f3b10</span><br><span class="line">Step <span class="number">3</span>/<span class="number">15</span> : <span class="built_in">COPY</span> readme.txt /usr/local/readme.txt</span><br><span class="line"> <span class="literal">---</span>&gt; da792df641f8</span><br><span class="line">Step <span class="number">4</span>/<span class="number">15</span> : ENV MYPATH /usr/local/</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> e4a5b13decd7</span><br><span class="line">Removing intermediate container e4a5b13decd7</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">7</span>b1e6970b4b3</span><br><span class="line">Step <span class="number">5</span>/<span class="number">15</span> : WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">835</span>dabd080dd</span><br><span class="line">Removing intermediate container <span class="number">835</span>dabd080dd</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">7</span>be17b1556ee</span><br><span class="line">Step <span class="number">6</span>/<span class="number">15</span> : ADD jdk<span class="literal">-8u301-linux-x64</span>.tar.gz <span class="variable">$MYPATH</span></span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">480721043</span>fda</span><br><span class="line">Step <span class="number">7</span>/<span class="number">15</span> : ADD apache<span class="literal">-tomcat-9</span>.<span class="number">0.55</span>.tar.gz <span class="variable">$MYPATH</span></span><br><span class="line"> <span class="literal">---</span>&gt; c7bfa13bfcd1</span><br><span class="line">Step <span class="number">8</span>/<span class="number">15</span> : RUN yum <span class="literal">-y</span> install vim</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">85532523</span>d784</span><br><span class="line">CentOS Linux <span class="number">8</span> - AppStream                      <span class="number">9.0</span> MB/s | <span class="number">8.4</span> MB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">CentOS Linux <span class="number">8</span> - BaseOS                         <span class="number">5.6</span> MB/s | <span class="number">3.6</span> MB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">CentOS Linux <span class="number">8</span> - Extras                          <span class="number">20</span> kB/s |  <span class="number">10</span> kB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">Dependencies resolved.</span><br><span class="line">================================================================================</span><br><span class="line"> Package             Arch        Version                   Repository      Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> vim<span class="literal">-enhanced</span>        x86_64      <span class="number">2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8         appstream      <span class="number">1.4</span> M</span><br><span class="line">Installing dependencies:</span><br><span class="line"> gpm<span class="literal">-libs</span>            x86_64      <span class="number">1.20</span>.<span class="number">7</span><span class="literal">-17</span>.el8             appstream       <span class="number">39</span> k</span><br><span class="line"> vim<span class="literal">-common</span>          x86_64      <span class="number">2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8         appstream      <span class="number">6.3</span> M</span><br><span class="line"> vim<span class="literal">-filesystem</span>      noarch      <span class="number">2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8         appstream       <span class="number">49</span> k</span><br><span class="line"> which               x86_64      <span class="number">2.21</span><span class="literal">-16</span>.el8               baseos          <span class="number">49</span> k</span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install  <span class="number">5</span> Packages</span><br><span class="line">Total download size: <span class="number">7.8</span> M</span><br><span class="line">Installed size: <span class="number">30</span> M</span><br><span class="line">Downloading Packages:</span><br><span class="line">(<span class="number">1</span>/<span class="number">5</span>): gpm<span class="literal">-libs-1</span>.<span class="number">20.7</span><span class="literal">-17</span>.el8.x86_64.rpm        <span class="number">973</span> kB/s |  <span class="number">39</span> kB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">(<span class="number">2</span>/<span class="number">5</span>): vim<span class="literal">-filesystem-8</span>.<span class="number">0.1763</span><span class="literal">-16</span>.el8.noarch.rp <span class="number">726</span> kB/s |  <span class="number">49</span> kB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">(<span class="number">3</span>/<span class="number">5</span>): vim<span class="literal">-enhanced-8</span>.<span class="number">0.1763</span><span class="literal">-16</span>.el8.x86_64.rpm   <span class="number">10</span> MB/s | <span class="number">1.4</span> MB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">(<span class="number">4</span>/<span class="number">5</span>): which<span class="literal">-2</span>.<span class="number">21</span><span class="literal">-16</span>.el8.x86_64.rpm             <span class="number">901</span> kB/s |  <span class="number">49</span> kB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">(<span class="number">5</span>/<span class="number">5</span>): vim<span class="literal">-common-8</span>.<span class="number">0.1763</span><span class="literal">-16</span>.el8.x86_64.rpm     <span class="number">27</span> MB/s | <span class="number">6.3</span> MB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line"><span class="literal">--------------------------------------------------------------------------------</span></span><br><span class="line">Total                                           <span class="number">6.6</span> MB/s | <span class="number">7.8</span> MB     <span class="number">00</span>:<span class="number">01</span>     </span><br><span class="line">warning: /var/cache/dnf/appstream<span class="literal">-02e86d1c976ab532</span>/packages/gpm<span class="literal">-libs-1</span>.<span class="number">20.7</span><span class="literal">-17</span>.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID <span class="number">8483</span>c65d: NOKEY</span><br><span class="line">CentOS Linux <span class="number">8</span> - AppStream                      <span class="number">1.6</span> MB/s | <span class="number">1.6</span> kB     <span class="number">00</span>:<span class="number">00</span>    </span><br><span class="line">Importing GPG key <span class="number">0</span>x8483C65D:</span><br><span class="line"> Userid     : <span class="string">&quot;CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;&quot;</span></span><br><span class="line"> Fingerprint: <span class="number">99</span>DB <span class="number">70</span>FA E1D7 CE22 <span class="number">7</span>FB6 <span class="number">4882</span> <span class="number">05</span>B5 <span class="number">55</span>B3 <span class="number">8483</span> C65D</span><br><span class="line"> From       : /etc/pki/rpm<span class="literal">-gpg</span>/RPM<span class="literal">-GPG-KEY-centosofficial</span></span><br><span class="line">Key imported successfully</span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded.</span><br><span class="line">Running transaction</span><br><span class="line">  Preparing        :                                                        <span class="number">1</span>/<span class="number">1</span> </span><br><span class="line">  Installing       : which<span class="literal">-2</span>.<span class="number">21</span><span class="literal">-16</span>.el8.x86_64                               <span class="number">1</span>/<span class="number">5</span> </span><br><span class="line">  Installing       : vim<span class="literal">-filesystem-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.noarch                <span class="number">2</span>/<span class="number">5</span> </span><br><span class="line">  Installing       : vim<span class="literal">-common-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64                    <span class="number">3</span>/<span class="number">5</span> </span><br><span class="line">  Installing       : gpm<span class="literal">-libs-1</span>.<span class="number">20.7</span><span class="literal">-17</span>.el8.x86_64                          <span class="number">4</span>/<span class="number">5</span> </span><br><span class="line">  Running scriptlet: gpm<span class="literal">-libs-1</span>.<span class="number">20.7</span><span class="literal">-17</span>.el8.x86_64                          <span class="number">4</span>/<span class="number">5</span> </span><br><span class="line">  Installing       : vim<span class="literal">-enhanced-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64                  <span class="number">5</span>/<span class="number">5</span> </span><br><span class="line">  Running scriptlet: vim<span class="literal">-enhanced-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64                  <span class="number">5</span>/<span class="number">5</span> </span><br><span class="line">  Running scriptlet: vim<span class="literal">-common-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64                    <span class="number">5</span>/<span class="number">5</span> </span><br><span class="line">  Verifying        : gpm<span class="literal">-libs-1</span>.<span class="number">20.7</span><span class="literal">-17</span>.el8.x86_64                          <span class="number">1</span>/<span class="number">5</span> </span><br><span class="line">  Verifying        : vim<span class="literal">-common-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64                    <span class="number">2</span>/<span class="number">5</span> </span><br><span class="line">  Verifying        : vim<span class="literal">-enhanced-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64                  <span class="number">3</span>/<span class="number">5</span> </span><br><span class="line">  Verifying        : vim<span class="literal">-filesystem-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.noarch                <span class="number">4</span>/<span class="number">5</span> </span><br><span class="line">  Verifying        : which<span class="literal">-2</span>.<span class="number">21</span><span class="literal">-16</span>.el8.x86_64                               <span class="number">5</span>/<span class="number">5</span> </span><br><span class="line">Installed:</span><br><span class="line">  gpm<span class="literal">-libs-1</span>.<span class="number">20.7</span><span class="literal">-17</span>.el8.x86_64         vim<span class="literal">-common-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64    </span><br><span class="line">  vim<span class="literal">-enhanced-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.x86_64 vim<span class="literal">-filesystem-2</span>:<span class="number">8.0</span>.<span class="number">1763</span><span class="literal">-16</span>.el8.noarch</span><br><span class="line">  which<span class="literal">-2</span>.<span class="number">21</span><span class="literal">-16</span>.el8.x86_64             </span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container <span class="number">85532523</span>d784</span><br><span class="line"> <span class="literal">---</span>&gt; e091ece0364d</span><br><span class="line">Step <span class="number">9</span>/<span class="number">15</span> : ENV JAVA_HOME <span class="variable">$MYPATH</span>/jdk1.<span class="number">8.0</span>_301<span class="literal">-amd64</span></span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">473066</span>cf57f4</span><br><span class="line">Removing intermediate container <span class="number">473066</span>cf57f4</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">0</span>a8963a2c1ab</span><br><span class="line">Step <span class="number">10</span>/<span class="number">15</span> : ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">78</span>a2cb9b06<span class="built_in">cd</span></span><br><span class="line">Removing intermediate container <span class="number">78</span>a2cb9b06<span class="built_in">cd</span></span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">3</span>dd34a2857b4</span><br><span class="line">Step <span class="number">11</span>/<span class="number">15</span> : ENV CATALINA_HOME <span class="variable">$MYPATH</span>/apache<span class="literal">-tomcat-9</span>.<span class="number">0.55</span></span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">4</span>ca540479e3d</span><br><span class="line">Removing intermediate container <span class="number">4</span>ca540479e3d</span><br><span class="line"> <span class="literal">---</span>&gt; fa38f4581510</span><br><span class="line">Step <span class="number">12</span>/<span class="number">15</span> : ENV CATALINA_BASH <span class="variable">$MYPATH</span>/apache<span class="literal">-tomcat-9</span>.<span class="number">0.55</span></span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">31</span>dc5b38478c</span><br><span class="line">Removing intermediate container <span class="number">31</span>dc5b38478c</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">8</span>ae919106bf6</span><br><span class="line">Step <span class="number">13</span>/<span class="number">15</span> : ENV PATH <span class="variable">$PATH:</span><span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> d3fe1f81fab7</span><br><span class="line">Removing intermediate container d3fe1f81fab7</span><br><span class="line"> <span class="literal">---</span>&gt; dd8b07b2adfd</span><br><span class="line">Step <span class="number">14</span>/<span class="number">15</span> : EXPOSE <span class="number">8080</span></span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">1</span>f1601f2dcc2</span><br><span class="line">Removing intermediate container <span class="number">1</span>f1601f2dcc2</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">9078648</span>b7a2e</span><br><span class="line">Step <span class="number">15</span>/<span class="number">15</span> : CMD <span class="variable">$CATALINA_HOME</span>/bin/startup.sh &amp;&amp; tail <span class="operator">-F</span> <span class="variable">$CATALINA_HOME</span>/logs/catalina.out</span><br><span class="line"> <span class="literal">---</span>&gt; Running <span class="keyword">in</span> <span class="number">6</span>a3b2aefaf44</span><br><span class="line">Removing intermediate container <span class="number">6</span>a3b2aefaf44</span><br><span class="line"> <span class="literal">---</span>&gt; <span class="number">23</span>a538c107a0</span><br><span class="line">Successfully built <span class="number">23</span>a538c107a0</span><br><span class="line">Successfully tagged tomcat<span class="literal">-test</span>:latest</span><br></pre></td></tr></table></figure><blockquote><p>查看镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">tomcat</span>]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">tomcat<span class="literal">-test</span>       latest    <span class="number">23</span>a538c107a0   <span class="number">25</span> minutes ago   <span class="number">673</span>MB</span><br></pre></td></tr></table></figure><blockquote><p>启动镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">tomcat</span>]<span class="comment"># docker run -d -p 8080:8080 --name fantasy-tomcat -v /home/fantasy/tomcat/webinfos:/usr/local/apache-tomcat-9.0.55/webinfos -v /home/fantasy/tomcat/logs:/usr/local/apache-tomcat-9.0.55/logs tomcat-test </span></span><br><span class="line"><span class="number">9</span>d391e13efdc495206429dbdb0392180a7bd3a4750cbc1419c31c80cd69c6b7b</span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">tomcat</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>启动时将 tomcat 的 <strong>webinfos</strong> 和 <strong>logs</strong> 目录都挂载到了本机。</p><blockquote><p>查看挂载目录</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">tomcat</span>]<span class="comment"># ls /home/fantasy/tomcat</span></span><br><span class="line">logs  webinfos</span><br></pre></td></tr></table></figure><p>这里找到了挂载到本机的两个目录，说明挂载成功了。</p><blockquote><p>进入容器</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">tomcat</span>]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS          PORTS                    NAMES</span><br><span class="line"><span class="number">9</span>d391e13efdc   tomcat<span class="literal">-test</span>   <span class="string">&quot;/bin/sh -c &#x27;<span class="variable">$CATALI</span>…&quot;</span>   <span class="number">24</span> minutes ago   Up <span class="number">24</span> minutes   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp   fantasy<span class="literal">-tomcat</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">tomcat</span>]<span class="comment"># docker exec -it 9d391e13efdc /bin/bash</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">9</span><span class="type">d391e13efdc</span> <span class="type">local</span>]<span class="comment"># ls</span></span><br><span class="line">apache<span class="literal">-tomcat-9</span>.<span class="number">0.55</span>  bin  etc    games  include    jdk1.<span class="number">8.0</span>_301  lib  lib64  libexec  readme.txt  sbin  share  src</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">tomcat</span>]<span class="comment"># docker exec -it 9d391e13efdc /bin/bash</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">9</span><span class="type">d391e13efdc</span> <span class="type">local</span>]<span class="comment"># ls</span></span><br><span class="line">apache<span class="literal">-tomcat-9</span>.<span class="number">0.55</span>  bin  etc    games  include    jdk1.<span class="number">8.0</span>_301  lib  lib64  libexec  readme.txt  sbin  share  src</span><br></pre></td></tr></table></figure><p>jdk 和 readme.txt 都是具备了的，且 tomcat 目录下的文件也是完整的。</p><blockquote><p>查看挂载文件</p></blockquote><p>这里以 logs 为例，我们先进入 tomcat 容器中的 logs 文件夹查看日志内容。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">9</span><span class="type">d391e13efdc</span> <span class="type">apache</span>-<span class="type">tomcat</span>-<span class="number">9.0</span><span class="type">.55</span>]<span class="comment"># cd logs</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">9</span><span class="type">d391e13efdc</span> <span class="type">logs</span>]<span class="comment"># ls</span></span><br><span class="line">catalina.out</span><br><span class="line">[<span class="type">root</span>@<span class="number">9</span><span class="type">d391e13efdc</span> <span class="type">logs</span>]<span class="comment"># cat catalina.out </span></span><br><span class="line">/usr/local//apache<span class="literal">-tomcat-9</span>.<span class="number">0.55</span>/bin/catalina.sh: line <span class="number">504</span>: /usr/local//jdk1.<span class="number">8.0</span>_301<span class="literal">-amd64</span>/bin/java: No such file or directory</span><br></pre></td></tr></table></figure><p>然后再退出查看主机上挂载的 logs 文件夹。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">9</span><span class="type">d391e13efdc</span> <span class="type">logs</span>]<span class="comment"># exit</span></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">tomcat</span>]<span class="comment"># cd /home/fantasy/tomcat/logs</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># ls</span></span><br><span class="line">catalina.out</span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># cat catalina.out </span></span><br><span class="line">/usr/local//apache<span class="literal">-tomcat-9</span>.<span class="number">0.55</span>/bin/catalina.sh: line <span class="number">504</span>: /usr/local//jdk1.<span class="number">8.0</span>_301<span class="literal">-amd64</span>/bin/java: No such file or directory</span><br></pre></td></tr></table></figure><p>两个地方 logs 下的文件内容一致，说明挂载成功。</p><h2 id="发布镜像到-Docker-Hub"><a href="#发布镜像到-Docker-Hub" class="headerlink" title="发布镜像到 Docker Hub"></a>发布镜像到 Docker Hub</h2><blockquote><p>注册账号</p></blockquote><p>如果没有 Docker Hub 账号，先注册账号：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><blockquote><p>登录 Docker Hub 账号</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker login -u fantasyke</span></span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><h3 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h3><h3 id="docker-push"><a href="#docker-push" class="headerlink" title="docker push"></a>docker push</h3><blockquote><p>直接发布镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker push centos-myUsing default tag: latestThe push refers to repository [docker.io/library/centos-my]de70c523870b: </span></span><br><span class="line">Preparing <span class="number">909</span>db45c4bc4: </span><br><span class="line">Preparing <span class="number">74</span>ddd0ec08fa: </span><br><span class="line">Preparing denied: requested access to the resource is denied</span><br></pre></td></tr></table></figure><p>访问资源被拒绝了。拒绝的原因是我们没有带标签，默认的 latest 标签是不能被识别的。</p><h3 id="指定镜像标签"><a href="#指定镜像标签" class="headerlink" title="指定镜像标签"></a>指定镜像标签</h3><h3 id="docker-tag"><a href="#docker-tag" class="headerlink" title="docker tag"></a>docker tag</h3><p>我们可以使用 <code>docker tag</code> 命令给镜像加一个标签。</p><blockquote><p>必须以 账号名&#x2F;镜像名:标签 的格式命令才能提交。</p></blockquote><p>找到之前打的测试镜像 <code>centos-my</code> IMAGE ID</p><blockquote><p>再次发布镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker tag 7d202bdf002b fantasyke/centos:1.0</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">fantasyke/centos   <span class="number">1.0</span>       <span class="number">7</span>d202bdf002b   <span class="number">29</span> hours ago   <span class="number">323</span>MB</span><br><span class="line">centos<span class="literal">-my</span>       latest    <span class="number">7</span>d202bdf002b   <span class="number">29</span> hours ago   <span class="number">323</span>MB</span><br></pre></td></tr></table></figure><p>这样就能发布成功了。且可以发现，<strong>镜像的发布也是分层发布的</strong>。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker push fantasyke/centos:1.0</span></span><br><span class="line"><span class="keyword">Using</span> default tag: latest</span><br><span class="line">The push refers to repository [<span class="type">docker.io</span>/<span class="type">library</span>/<span class="type">centos</span>-<span class="type">my</span>]</span><br><span class="line">The push refers to repository [<span class="type">docker.io</span>/<span class="type">fantasyke</span>/<span class="type">centos</span>]</span><br><span class="line"><span class="number">74</span>ddd0ec08fa: Mounted from library/centos</span><br><span class="line"><span class="number">1.0</span>: digest: sha256:<span class="number">58</span>c60ae4f5f1e27d7027ebc641f60f6768a474b617a30b48916fe02de14e0892 size: <span class="number">529</span></span><br></pre></td></tr></table></figure><p>这样就发布成功了。</p><h2 id="配置国内镜像站"><a href="#配置国内镜像站" class="headerlink" title="配置国内镜像站"></a>配置国内镜像站</h2><p>由于对国外网络的限制，发布镜像到 DockerHub 是比较缓慢的。</p><p>这里可以使用配置 <strong>Docker 国内镜像站</strong>的方式实现加速。</p><p>运行以下命令即可：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> ~]<span class="comment"># curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s XXXXXXX</span></span><br><span class="line">docker version &gt;= <span class="number">1.12</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;XXXXXXXXX&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">Success.</span><br><span class="line">You need to restart docker to take effect: sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> ~]<span class="comment"># systemctl restart docker</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>该脚本可以将 <code>--registry-mirror</code> 加入到 Docker 配置文件 <code>/etc/docker/daemon.json</code> 中。</p><p>适用于 <strong>Ubuntu14.04</strong>、<strong>Debian</strong>、<strong>CentOS6</strong> 、<strong>CentOS7</strong>、<strong>Fedora</strong>、<strong>Arch Linux</strong>、<strong>openSUSE Leap 42.1</strong>，其他版本可能有细微不同。</p><blockquote><p>去 Docker Hub 上以 账号名&#x2F;镜像名 搜索我们刚发布的镜像，发现是可以搜索到的。</p></blockquote><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.58he6tnxat.webp" alt="image.png"></p><blockquote><p>查看详情也可以镜像的具体信息。</p></blockquote><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.6pnj8kse8h.webp" alt="image.png"></p><p>DIGEST 的值正是刚才发布后返回值 <code>ecefaae6c5a2cab84693175ea3b18d0d0a7aa0160e33a0bf3eb4ab626b10f0f1</code> 的缩写。</p><p>且镜像的大小是小于我们本地镜像的，说明<strong>发布的过程中也会压缩镜像</strong>。</p><blockquote><p>拉取我们发布的镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker pull fantasyke/centos:1.0</span></span><br><span class="line"><span class="number">1.0</span>: Pulling from fantasyke/centos</span><br><span class="line">Digest: sha256:ecefaae6c5a2cab84693175ea3b18d0d0a7aa0160e33a0bf3eb4ab626b10f0f1</span><br><span class="line">Status: Image is up to date <span class="keyword">for</span> fantasyke/centos:<span class="number">1.0</span></span><br><span class="line">docker.io/fantasyke/centos:<span class="number">1.0</span></span><br></pre></td></tr></table></figure><p>无法拉取。原因很简单，因为我们本地存在了同名镜像。</p><blockquote><p>我们先删除这个镜像再拉取</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker rmi -f 7d202bdf002b</span></span><br><span class="line">Untagged: fantasyke/centos:<span class="number">1.0</span></span><br><span class="line">Untagged: fantasyke/centos@sha256:ecefaae6c5a2cab84693175ea3b18d0d0a7aa0160e33a0bf3eb4ab626b10f0f1</span><br><span class="line">Untagged: centos<span class="literal">-my</span>:latest</span><br><span class="line">Untagged: fantasy/centos:<span class="number">1.0</span></span><br><span class="line">Deleted: sha256:<span class="number">7</span>d202bdf002bbd95d8016fa5807a486d6c50e195879eddd88cb602172fc51ffe</span><br><span class="line">Deleted: sha256:ad95558eb65801f5871215837558156c5e33ba351b3b52e0a50aac045abb46c1</span><br><span class="line">Deleted: sha256:<span class="number">5</span>c5def0bbb85d8779d02f115c3d072fe9adb1fd07556ee8c5a130823ecf6811d</span><br><span class="line">Deleted: sha256:b5bd21416741daec348f417dbea1b73001e257f1e63a5d2abddabc8554fca611</span><br><span class="line">Deleted: sha256:a9431f90fd3f23387c456ad5b925dbb9531beece3eab825848db99db29c6a1fa</span><br><span class="line">Deleted: sha256:<span class="number">9</span>f54f48660acb350921aefab74769e51fc7917a1e1e730d3df2edd1513517c42</span><br><span class="line">Deleted: sha256:fb41ece5d944c667762945fdf7275a1d267acd92fe9dc56709fc3adaca6f087f</span><br><span class="line">Deleted: sha256:be89377d4c2ccea11308d8196ba53f03985882db015e01ed8b54fc114f4ba058</span><br><span class="line">Deleted: sha256:<span class="number">9616888</span>f3b103230ed5f378af4afc11b7ce7ed3d96653e5bd918c49152bbdf8c</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker pull fantasyke/centos:1.0</span></span><br><span class="line"><span class="number">1.0</span>: Pulling from fantasyke/centos</span><br><span class="line">a1d0c7532777: Already exists </span><br><span class="line"><span class="number">0594</span>d57f8468: Already exists </span><br><span class="line"><span class="number">9</span>c13f720f33e: Already exists </span><br><span class="line">Digest: sha256:ecefaae6c5a2cab84693175ea3b18d0d0a7aa0160e33a0bf3eb4ab626b10f0f1</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> fantasyke/centos:<span class="number">1.0</span></span><br><span class="line">docker.io/fantasyke/centos:<span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">fantasyke/centos   <span class="number">1.0</span>       <span class="number">7</span>d202bdf002b   <span class="number">29</span> hours ago   <span class="number">323</span>MB</span><br></pre></td></tr></table></figure><p>拉取成功，且大小又恢复到了之前本地的镜像大小，说明<strong>拉取的过程中也会解压镜像</strong>。</p><blockquote><p>启动拉取的镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker run -it fantasyke/centos:1.0 /bin/bash</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">168</span><span class="type">c9e550886</span> <span class="type">local</span>]<span class="comment"># vim test.java</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">168</span><span class="type">c9e550886</span> <span class="type">local</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><code>vim</code> 命令也是可以使用的，镜像发布成功。</p><h2 id="发布镜像到阿里云镜像仓库"><a href="#发布镜像到阿里云镜像仓库" class="headerlink" title="发布镜像到阿里云镜像仓库"></a>发布镜像到阿里云镜像仓库</h2><blockquote><p>登录阿里云，点击我的阿里云</p></blockquote><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.2a543bg8jo.webp" alt="image.png"></p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.4n7qkiudta.webp" alt="image.png"></p><blockquote><p>创建实例</p></blockquote><p>这里以创建个人版实例为例。</p><p>我这里已经创建好了，如果没有创建点击创建即可。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.1e8mnv72b7.webp" alt="image.png"></p><blockquote><p>进入镜像仓库</p></blockquote><p>创建好个人实例后，点击进入。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.1026wzyzzk.webp" alt="image.png"></p><blockquote><p>创建命名空间</p></blockquote><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.4ckwrdfs71.webp" alt="image.png"></p><p>一个账号只能创建 3 个命名空间，需要谨慎创建。</p><p>创建好后就是这样。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.361lirri0b.webp" alt="image.png"></p><blockquote><p>创建镜像仓库</p></blockquote><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.1hs8ll1dsv.webp" alt="image.png"></p><blockquote><p>点击下一步，创建本地仓库</p></blockquote><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.1hs8ll1lhc.webp" alt="image.png"></p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.2a543big37.webp" alt="image.png"></p><p>至此，我们就创建好了阿里云的镜像仓库，具体的操作步骤上图也写得非常清楚。</p><blockquote><p>退出登录的账号</p></blockquote><p>如果之前登录了 Docker Hub 账号或者其他阿里云账号，先退出账号。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker logout</span></span><br><span class="line">Removing login credentials <span class="keyword">for</span> https://index.docker.io/v1/</span><br></pre></td></tr></table></figure><blockquote><p>登录阿里云账号</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker login --username=******** registry.cn-hangzhou.aliyuncs.com</span></span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><blockquote><p>设置镜像标签</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker tag 7d202bdf002b registry.cn-hangzhou.aliyuncs.com/fantasyke/fantasy:1.0</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                                        TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">fantasyke/centos                                   <span class="number">1.0</span>       <span class="number">7</span>d202bdf002b   <span class="number">32</span> hours ago   <span class="number">323</span>MB</span><br><span class="line">registry.cn<span class="literal">-hangzhou</span>.aliyuncs.com/fantasyke/fantasy   <span class="number">1.0</span>       <span class="number">7</span>d202bdf002b   <span class="number">32</span> hours ago   <span class="number">323</span>MB</span><br></pre></td></tr></table></figure><blockquote><p>提交镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker push registry.cn-hangzhou.aliyuncs.com/fantasyke/fantasy:1.0</span></span><br><span class="line">The push refers to repository [<span class="type">registry.cn</span>-<span class="type">hangzhou.aliyuncs.com</span>/<span class="type">fantasyke</span>/<span class="type">fantasy</span>]</span><br><span class="line">de70c523870b: Pushed </span><br><span class="line"><span class="number">909</span>db45c4bc4: Pushed </span><br><span class="line"><span class="number">74</span>ddd0ec08fa: Pushed </span><br><span class="line"><span class="number">1.0</span>: digest: sha256:ecefaae6c5a2cab84693175ea3b18d0d0a7aa0160e33a0bf3eb4ab626b10f0f1 size: <span class="number">953</span></span><br></pre></td></tr></table></figure><blockquote><p>查看提交的镜像</p></blockquote><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.45phjre6c.webp" alt="image.png"></p><p>提交的镜像可以在这里查看。</p><blockquote><p>拉取镜像</p></blockquote><p>先删除本地镜像， 再拉取测试。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker rmi -f 7d202bdf002b</span></span><br><span class="line">Untagged: fantasyke/centos:<span class="number">1.0</span></span><br><span class="line">Untagged: fantasyke/centos@sha256:ecefaae6c5a2cab84693175ea3b18d0d0a7aa0160e33a0bf3eb4ab626b10f0f1</span><br><span class="line">Untagged: registry.cn<span class="literal">-hangzhou</span>.aliyuncs.com/fantasyke/fantasy/centos:<span class="number">1.0</span></span><br><span class="line">Untagged: registry.cn<span class="literal">-hangzhou</span>.aliyuncs.com/fantasyke/fantasy:<span class="number">1.0</span></span><br><span class="line">Untagged: registry.cn<span class="literal">-hangzhou</span>.aliyuncs.com/fantasyke/fantasy@sha256:ecefaae6c5a2cab84693175ea3b18d0d0a7aa0160e33a0bf3eb4ab626b10f0f1</span><br><span class="line">Deleted: sha256:<span class="number">7</span>d202bdf002bbd95d8016fa5807a486d6c50e195879eddd88cb602172fc51ffe</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker pull registry.cn-hangzhou.aliyuncs.com/fantasyke/fantasy:1.0</span></span><br><span class="line"><span class="number">1.0</span>: Pulling from fantasyke/fantasy</span><br><span class="line">a1d0c7532777: Already exists </span><br><span class="line"><span class="number">0594</span>d57f8468: Already exists </span><br><span class="line"><span class="number">9</span>c13f720f33e: Already exists </span><br><span class="line">Digest: sha256:ecefaae6c5a2cab84693175ea3b18d0d0a7aa0160e33a0bf3eb4ab626b10f0f1</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> registry.cn<span class="literal">-hangzhou</span>.aliyuncs.com/fantasyke/fantasy:<span class="number">1.0</span></span><br><span class="line">registry.cn<span class="literal">-hangzhou</span>.aliyuncs.com/fantasyke/fantasy:<span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY                                        TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">registry.cn<span class="literal">-hangzhou</span>.aliyuncs.com/fantasyke/fantasy   <span class="number">1.0</span>       <span class="number">7</span>d202bdf002b   <span class="number">32</span> hours ago   <span class="number">323</span>MB</span><br></pre></td></tr></table></figure><blockquote><p>启动镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">fantasy</span> <span class="type">logs</span>]<span class="comment"># docker run -it registry.cn-hangzhou.aliyuncs.com/fantasyke/fantasy:1.0</span></span><br></pre></td></tr></table></figure><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.9kg7edawsp.webp" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.Docker镜像原理</title>
      <link href="/posts/52c715b2.html"/>
      <url>/posts/52c715b2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h1><h1 id="Docker-10-镜像原理"><a href="#Docker-10-镜像原理" class="headerlink" title="Docker 10 镜像原理"></a>Docker 10 镜像原理</h1><h2 id="联合文件系统"><a href="#联合文件系统" class="headerlink" title="联合文件系统"></a>联合文件系统</h2><p><strong>联合文件系统</strong>（UnionFS）是 Docker 的核心，也是 Docker 得以极致精简的保证。</p><p>以拉取 redis 镜像为例</p><blockquote><p>先拉取最新版镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@sail ~]# docker pull redis</span><br><span class="line">Using default tag: latest <span class="comment"># 默认最新版标签</span></span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">e5ae68f74026: Pull complete <span class="comment"># 分层下载，docker image的核心：联合文件系统</span></span><br><span class="line">37c4354629da: Pull complete </span><br><span class="line">b065b1b1fa0f: Pull complete </span><br><span class="line">6954d19bb2e5: Pull complete </span><br><span class="line">6333f8baaf7c: Pull complete </span><br><span class="line">f9772c8a44e7: Pull complete </span><br><span class="line">Digest: sha256:2f502d27c3e9b54295f1c591b3970340d02f8a5824402c8179dcd20d4076b796 <span class="comment">#防伪签名</span></span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> redis:latest</span><br><span class="line">docker.io/library/redis:latest <span class="comment"># 真实地址，docker pull redis 等价于 docker pull docker.io/library/redis:latest</span></span><br></pre></td></tr></table></figure><blockquote><p>再拉取指定版镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker pull redis</span></span><br><span class="line"><span class="keyword">Using</span> default tag: latest # 默认最新版标签</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">e5ae68f74026: Pull complete <span class="comment"># 分层下载，docker image的核心：联合文件系统</span></span><br><span class="line"><span class="number">37</span>c4354629da: Pull complete </span><br><span class="line">b065b1b1fa0f: Pull complete </span><br><span class="line"><span class="number">6954</span>d19bb2e5: Pull complete </span><br><span class="line"><span class="number">6333</span>f8baaf7c: Pull complete </span><br><span class="line">f9772c8a44e7: Pull complete </span><br><span class="line">Digest: sha256:<span class="number">2</span>f502d27c3e9b54295f1c591b3970340d02f8a5824402c8179dcd20d4076b796 <span class="comment">#防伪签名</span></span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> redis:latest</span><br><span class="line">docker.io/library/redis:latest <span class="comment"># 真实地址，docker pull redis 等价于 docker pull docker.io/library/redis:latest</span></span><br></pre></td></tr></table></figure><p>由此可见，redis 镜像一共 6 层，由于之前拉取了默认的最新版 <strong>redis</strong> 镜像，再拉取 <strong>redis:5.0</strong> 时，有 3 层是可以复用的，所以只下载了不能复用的 3 层。</p><blockquote><p>这样既能提高下载速度，也能极大节省磁盘占用和资源消耗。</p></blockquote><h2 id="分层镜像"><a href="#分层镜像" class="headerlink" title="分层镜像"></a>分层镜像</h2><p>Docker 使用联合文件系统对镜像做了分层，如下图所示：</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.6ikbd541xb.webp" alt="image.png"></p><ul><li><strong>bootfs</strong>（boot file system）：启动文件系统。</li><li><strong>rootfs</strong>：root file system：基础文件系统。</li></ul><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.wikza2x40.webp" alt="image.png"></p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.5xanqu9x5u.webp" alt="image.png"></p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.13lsuppeor.webp" alt="image.png"></p><p>Docker 镜像都是<strong>只读</strong>的，当容器启动时，一个新的可写层被加到镜像的顶部。</p><p>这一层就是我们通常说的<strong>容器层</strong>，容器层之下的都叫<strong>镜像层</strong>。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.99tdl7qwni.webp" alt="image.png"></p><p>我们自己也是可以制作镜像并提交的，使用 <code>docker commit</code> 命令。</p><h1 id="Docker自定义镜像"><a href="#Docker自定义镜像" class="headerlink" title="Docker自定义镜像"></a>Docker自定义镜像</h1><h2 id="提交镜像"><a href="#提交镜像" class="headerlink" title="提交镜像"></a>提交镜像</h2><h3 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a>docker commit</h3><blockquote><p>语法</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit [参数] 容器 [仓库[:标签]]</span><br></pre></td></tr></table></figure><blockquote><p>参数</p></blockquote><ul><li><code>a</code>：作者信息。一般为 <strong>作者名字&lt;邮箱&gt;</strong>。</li><li><code>c</code>：将 <strong>Dockerfile</strong> 指令应用于创建的映像。</li><li><code>m</code>：注释信息。</li><li><code>p</code>：提交期间暂停容器（默认）。</li></ul><blockquote><p>将这个容器创建为一个自定义的镜像并提交到仓库中。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker commit -a=&quot;sail&lt;yifansailing@163.com&gt;&quot; -m=&quot;diy tomcat by sail&quot; fe247e0ef80d tomcat4sail:1.0</span></span><br><span class="line">sha256:<span class="number">187</span>a99503046ef1a4316221d174add0fbc92391ac534fb1926e535474491f9d2</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">tomcat4sail           <span class="number">1.0</span>       <span class="number">187</span>a99503046   <span class="number">5</span> seconds ago   <span class="number">684</span>MB</span><br><span class="line">tomcat                latest    <span class="number">24207</span>ccc9cce   <span class="number">4</span> days ago      <span class="number">680</span>MB</span><br></pre></td></tr></table></figure><p>可以看到，我们自定义的镜像已经在本地镜像库中了。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote><p>停止原有容器。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker stop fe247e0ef80d</span></span><br><span class="line">fe247e0ef80d</span><br></pre></td></tr></table></figure><blockquote><p>启动自定义镜像。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker run -d -p 8080:8080 --name=&quot;tomcat4sail&quot; 187a99503046</span></span><br><span class="line"><span class="number">602</span>c3c576c1b6d13aa0d2508490220d479eaf8c52c9cfe116029c67437fac61b</span><br></pre></td></tr></table></figure><p>由于自定义的镜像还没有提交到远程库，所以这里只能使用镜像 ID 启动。</p><p>如果使用镜像名启动，会从远程库中进行搜索，由于我们还没有提交，会因为搜索不到报错。</p><blockquote><p>访问测试</p></blockquote><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.9kg7ed6b7w.webp" alt="image.png"></p><p>这里我们并没有改变容器中 <strong>webapps</strong> 下的内容，但依然可以直接访问，说明我们自定义的镜像是生效了的。</p><h1 id="Docker数据卷-挂载"><a href="#Docker数据卷-挂载" class="headerlink" title="Docker数据卷 挂载"></a>Docker数据卷 挂载</h1><h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>Docker 是将应用和环境打包成一个镜像。</p><p>这样，数据就不应该保存在容器中，否则容器删除，数据就会丢失，有着非常大的风险。</p><p>为此，容器和主机之间需要有一个数据共享技术，使得在 Docker 容器中产生的数据能够同步到本地。</p><p>这就是<strong>数据卷</strong>技术。其本质上是一个<strong>目录挂载</strong>，将容器内的目录挂载到主机上。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="命令方式"><a href="#命令方式" class="headerlink" title="命令方式"></a>命令方式</h3><blockquote><p>语法</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-v</span> 主机目录:容器目录</span><br></pre></td></tr></table></figure><blockquote><p>查看主机 &#x2F;home 目录。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># ls /homeadmin  f2  f3  sail  test.java</span></span><br></pre></td></tr></table></figure><blockquote><p>以交互模式启动 centos 镜像。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker run -it -v /home/ceshi:/home centos /bin/bash</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">ec95646b1a4c</span> /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><blockquote><p>新开一个窗口查看容器详情。</p></blockquote><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.7i0eqb7w9y.webp" alt="image.png"></p><p><strong>Mounts</strong> 下的 <strong>Source</strong> 即为设置的主机目录、<strong>Destination</strong> 即为设置的容器目录，他们已经绑定在了一起。</p><blockquote><p>在主机中查看 &#x2F;home。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> /]<span class="comment"># cd /home</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">home</span>]<span class="comment"># ls</span></span><br><span class="line">admin  ceshi  f2  f3  sail  test.java</span><br></pre></td></tr></table></figure><p>主机上的 <code>/home</code> 下已经有了 <code>ceshi</code> 目录。说明容器一经启动，就会在主机生成对应的挂载目录。</p><blockquote><p>在容器中的 &#x2F;home 下新建一个文件。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">ec95646b1a4c</span> /]<span class="comment"># cd /home</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">ec95646b1a4c</span> <span class="type">home</span>]<span class="comment"># ls</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">ec95646b1a4c</span> <span class="type">home</span>]<span class="comment"># touch test.java</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">ec95646b1a4c</span> <span class="type">home</span>]<span class="comment"># ls</span></span><br><span class="line">test.java</span><br></pre></td></tr></table></figure><blockquote><p>查看主机的 ceshi 目录。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">home</span>]<span class="comment"># cd ceshi</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">ceshi</span>]<span class="comment"># ls</span></span><br><span class="line">test.java</span><br></pre></td></tr></table></figure><p>此时主机中的 <code>ceshi</code> 目录下也有了这个文件。</p><blockquote><p>关闭容器。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">ec95646b1a4c</span> <span class="type">home</span>]<span class="comment"># exit</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><blockquote><p>修改主机中 &#x2F;home&#x2F;ceshi&#x2F;test.java 文件的内容。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">ceshi</span>]<span class="comment"># vim test.java</span></span><br><span class="line"><span class="comment"># 此处编辑文件过程省略</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">ceshi</span>]<span class="comment"># cat test.java</span></span><br><span class="line">hello sail</span><br></pre></td></tr></table></figure><blockquote><p>重启容器。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker start ec95646b1a4c</span></span><br><span class="line">ec95646b1a4c</span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND             CREATED          STATUS         PORTS                    NAMES</span><br><span class="line">ec95646b1a4c   centos         <span class="string">&quot;/bin/bash&quot;</span>         <span class="number">19</span> minutes ago   Up <span class="number">5</span> seconds                            charming_cartwright</span><br></pre></td></tr></table></figure><blockquote><p>查看 &#x2F;home 下的文件。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker exec -it ec95646b1a4c /bin/bash</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">ec95646b1a4c</span> /]<span class="comment"># cd /home</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">ec95646b1a4c</span> <span class="type">home</span>]<span class="comment"># ls</span></span><br><span class="line">test.java</span><br><span class="line">[<span class="type">root</span>@<span class="type">ec95646b1a4c</span> <span class="type">home</span>]<span class="comment"># cat test.java</span></span><br><span class="line">hello sail</span><br></pre></td></tr></table></figure><p>此时容器中的文件也更改了。</p><blockquote><p>由此可见，数据卷技术实现的是双向同步。</p></blockquote><h3 id="权限设置"><a href="#权限设置" class="headerlink" title="权限设置"></a>权限设置</h3><p>在使用命令方式设置卷时，还可以指定权限，以此保证数据安全。</p><blockquote><p>参数</p></blockquote><ul><li><code>ro</code>(readonly)：只读。</li><li><code>rw</code>(readwrite)：可读可写。</li></ul><blockquote><p>以数据卷只读权限启动镜像。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">mysql</span>]<span class="comment"># docker run -it -v /home/sail:/home:ro centos /bin/bash</span></span><br></pre></td></tr></table></figure><blockquote><p>新建文件测试。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="number">02</span><span class="type">ef70c94920</span> <span class="type">home</span>]<span class="comment"># touch test.java</span></span><br><span class="line">touch: cannot touch <span class="string">&#x27;test.java&#x27;</span>: <span class="built_in">Read-only</span> file system</span><br></pre></td></tr></table></figure><p>容器内部该目录是没有写入权限的。</p><blockquote><p>以数据卷可读可写的权限启动镜像。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">mysql</span>]<span class="comment"># docker run -it -v /home/sail:/home:rw centos /bin/bash</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">48678</span><span class="type">e08f868</span> /]<span class="comment"># cd /home</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">48678</span><span class="type">e08f868</span> <span class="type">home</span>]<span class="comment"># touch test.java</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">48678</span><span class="type">e08f868</span> <span class="type">home</span>]<span class="comment"># ls</span></span><br><span class="line">apache<span class="literal">-tomcat-9</span>.<span class="number">0.55</span>.tar.gz  jdk<span class="literal">-8u301-linux-x64</span>.rpm  test.java</span><br></pre></td></tr></table></figure><blockquote><p>新建文件测试。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">mysql</span>]<span class="comment"># docker run -it -v /home/sail:/home:rw centos /bin/bash</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">48678</span><span class="type">e08f868</span> /]<span class="comment"># cd /home</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">48678</span><span class="type">e08f868</span> <span class="type">home</span>]<span class="comment"># touch test.java</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">48678</span><span class="type">e08f868</span> <span class="type">home</span>]<span class="comment"># ls</span></span><br><span class="line">apache<span class="literal">-tomcat-9</span>.<span class="number">0.55</span>.tar.gz  jdk<span class="literal">-8u301-linux-x64</span>.rpm  test.java</span><br></pre></td></tr></table></figure><p>容器内部该目录写入是没有问题的。</p><blockquote><p>前面我们没有指定权限也可以写入，由此可见，数据卷默认是具有读写权限的。</p></blockquote><h2 id="具名挂载"><a href="#具名挂载" class="headerlink" title="具名挂载"></a>具名挂载</h2><blockquote><p>启动镜像时只定义主机卷名称，不指定挂载目录。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">mysql</span>]<span class="comment"># docker run -it -v my-centos:/home centos /bin/bash</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">3</span><span class="type">cf74e9e6973</span> /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><blockquote><p>查看目前挂载的卷。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 Ctrl + P + Q 不退出容器的情况下回到主机目录。</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">mysql</span>]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     my<span class="literal">-centos</span></span><br></pre></td></tr></table></figure><blockquote><p>查看卷的详情。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">mysql</span>]<span class="comment"># docker volume inspect my-centos</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2021-12-20T16:55:35+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: <span class="type">null</span>,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/my-centos/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;my-centos&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: <span class="type">null</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>卷挂载在 <code>/var/lib/docker/volumes/卷名/_data</code> 目录下。</p><p>在没有指定主机挂载目录的情况下，会默认挂载到该目录。</p><blockquote><p>由于指定了卷名，所以这种方式称为具名挂载。</p></blockquote><h2 id="匿名挂载"><a href="#匿名挂载" class="headerlink" title="匿名挂载"></a>匿名挂载</h2><blockquote><p>启动镜像时只指定容器目录。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">mysql</span>]<span class="comment"># docker run -it -v /home centos /bin/bash</span></span><br></pre></td></tr></table></figure><blockquote><p>查看目前挂载的卷。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">mysql</span>]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     <span class="number">159830</span>cf55550c9a39e845c1d96aa04cc762005bc0c64d15d5066834b47df940</span><br></pre></td></tr></table></figure><blockquote><p>查看卷的详情。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">mysql</span>]<span class="comment"># docker volume inspect 159830cf55550c9a39e845c1d96aa04cc762005bc0c64d15d5066834b47df940</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2021-12-20T17:05:23+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: <span class="type">null</span>,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/159830cf55550c9a39e845c1d96aa04cc762005bc0c64d15d5066834b47df940/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;159830cf55550c9a39e845c1d96aa04cc762005bc0c64d15d5066834b47df940&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: <span class="type">null</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>卷也是挂载在 <code>/var/lib/docker/volumes/xxx/_data</code> 目录下。</p><p>在没有指定主机挂载目录的情况下，会默认挂载到该目录。</p><blockquote><p>由于没有指定卷名，所以这种方式称为匿名挂载。</p></blockquote><p>只有指定主机目录的情况下会挂载到指定目录，否则都会挂载到默认目录。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="mysql数据同步"><a href="#mysql数据同步" class="headerlink" title="mysql数据同步"></a>mysql数据同步</h3><p>数据库中的数据极为重要，必须同步到主机，否则将会有非常大的数据丢失风险。</p><p>这里以 mysql 镜像为例演示数据同步的过程。</p><blockquote><p>启动 mysql 镜像。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span></span><br><span class="line">Unable to find image <span class="string">&#x27;mysql:5.7&#x27;</span> locally</span><br><span class="line"><span class="number">5.7</span>: Pulling from library/mysql</span><br><span class="line">ffbb094f4f9e: Pull complete </span><br><span class="line"><span class="number">6</span>c1cb25f7525: Pull complete </span><br><span class="line">Digest: sha256:d1cc87a3bd5dc07defc837bc9084f748a130606ff41923f46dec1986e0dc828d</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> mysql:<span class="number">5.7</span></span><br><span class="line">a016e564d977550e475474556cfd033fb1c731002381bc9f9544c63fccb7f60c</span><br></pre></td></tr></table></figure><p>其中 <code>-e</code> 为环境配置。安装启动 mysql 需要配置密码。</p><blockquote><p>使用docker inspect查看挂载情况。</p></blockquote><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.7ax6uvlxds.webp" alt="image.png"></p><p>已经生成了两个目录的挂载。</p><blockquote><p>查看主机同步的目录。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># cd /home</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">home</span>]<span class="comment"># ls</span></span><br><span class="line">admin  ceshi  f2  f3  mysql  sail  test.java</span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">home</span>]<span class="comment"># cd mysql</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">mysql</span>]<span class="comment"># ls</span></span><br><span class="line">conf  <span class="keyword">data</span></span><br></pre></td></tr></table></figure><p>主机已经同步了容器挂载的目录。</p><blockquote><p>使用数据库管理工具连接测试（这里使用 IDEA 自带的数据库工具）。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.Docker基本命令</title>
      <link href="/posts/3dfb8cc2.html"/>
      <url>/posts/3dfb8cc2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker基本命令"><a href="#Docker基本命令" class="headerlink" title="Docker基本命令"></a>Docker基本命令</h1><aside>💡 每个人都可以评论它</aside><h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><h2 id="启动-Docker"><a href="#启动-Docker" class="headerlink" title="启动 Docker"></a>启动 Docker</h2><h3 id="systemctl-start-docker"><a href="#systemctl-start-docker" class="headerlink" title="systemctl start docker"></a>systemctl start docker</h3><p>在服务器关机或者重启后，是需要重新启动 Docker 的。 命令如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">start</span> docker</span><br></pre></td></tr></table></figure><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><h3 id="docker-logs"><a href="#docker-logs" class="headerlink" title="docker logs"></a>docker logs</h3><blockquote><p>语法</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs [参数] 容器</span><br></pre></td></tr></table></figure><blockquote><p>参数</p></blockquote><ul><li><code>f</code>：日志流动输出。</li><li><code>t</code>：展示时间戳。</li><li><code>-tail</code>：从日志末尾显示的行数。</li></ul><blockquote><p>为模拟日志输出效果，我们先编写一段脚本</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> true;<span class="keyword">do</span> <span class="built_in">echo</span> sail;<span class="built_in">sleep</span> <span class="number">3</span>;done</span><br></pre></td></tr></table></figure><p>以上脚本实现的效果为：每隔 3 秒输出字符串 sail。</p><blockquote><p>以脚本启动容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@sail ~]# docker logs -f -t --<span class="built_in">tail</span> 10 c3d59f55d600</span><br><span class="line">2021-12-10T03:01:28.607288480Z sail</span><br><span class="line">2021-12-10T03:01:31.609334595Z sail</span><br><span class="line">2021-12-10T03:01:34.611361943Z sail</span><br><span class="line">2021-12-10T03:01:37.613461457Z sail</span><br><span class="line">2021-12-10T03:02:10.636760025Z sail</span><br></pre></td></tr></table></figure><p>可以看到，按此命令会看到容器最后 10 条日志，且每隔 3 秒滚动输出一条日志。</p><h2 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h2><h3 id="docker-run-d"><a href="#docker-run-d" class="headerlink" title="docker run -d"></a>docker run -d</h3><blockquote><p>语法</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> 镜像</span><br></pre></td></tr></table></figure><blockquote><p>后台启动镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker run -d centos</span></span><br><span class="line"><span class="number">0</span>aee6f74b913f120195ca323892867bba7d72f2671f2f8b17278a3e029ad5bfd</span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS        PORTS     NAMES</span><br></pre></td></tr></table></figure><blockquote><p>使用 docker run -d 启动，也并不能保证容器一定能在后台运行，如果没有前台使用，容器启动后发现自己没有提供服务，会立刻停止。</p></blockquote><p>前面的 <code>docker run -d centos /bin/sh -c &quot;while true;do echo sail;sleep 3;done&quot;</code> 命令，由于启动后运行了脚本打印日志，即提供了服务，所以不会停止。</p><h2 id="查看容器信息"><a href="#查看容器信息" class="headerlink" title="查看容器信息"></a>查看容器信息</h2><h3 id="docker-inspect"><a href="#docker-inspect" class="headerlink" title="docker inspect"></a>docker inspect</h3><blockquote><p>语法</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS         PORTS     NAMES</span><br><span class="line">c3d59f55d600   centos    <span class="string">&quot;/bin/sh -c &#x27;while t…&quot;</span>   <span class="number">24</span> minutes ago   Up <span class="number">5</span> seconds             musing_poincare</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker inspect c3d59f55d600</span></span><br><span class="line">[<span class="type">.....</span>]</span><br></pre></td></tr></table></figure><blockquote><p>不管容器是否运行，都可以使用该命令查看。</p></blockquote><h2 id="进入正在运行的容器"><a href="#进入正在运行的容器" class="headerlink" title="进入正在运行的容器"></a>进入正在运行的容器</h2><p>容器是一个微型的 Linux 系统，我们通常需要进入容器进行操作。</p><h3 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h3><p>使用 <code>docker exec</code> 可以进入容器并开启一个新的终端，可以在里面操作。</p><blockquote><p>语法</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec [参数] 容器 路径</span><br></pre></td></tr></table></figure><blockquote><p>参数</p></blockquote><ul><li><code>d</code>：后台运行。</li><li><code>it</code>：交互模式进入。</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS        PORTS     NAMES</span><br><span class="line"><span class="number">96</span>ed3fe3e7f1   centos    <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">15</span> hours ago   Up <span class="number">15</span> hours             centos01</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker exec -it 96ed3fe3e7f1 /bin/bash</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">96</span><span class="type">ed3fe3e7f1</span> /]<span class="comment"># ls</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="number">96</span><span class="type">ed3fe3e7f1</span> /]<span class="comment"># ps -ef</span></span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         <span class="number">1</span>     <span class="number">0</span>  <span class="number">0</span> Dec09 pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /bin/bash</span><br><span class="line">root        <span class="number">15</span>     <span class="number">0</span>  <span class="number">0</span> <span class="number">03</span>:<span class="number">38</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /bin/bash</span><br><span class="line">root        <span class="number">30</span>    <span class="number">15</span>  <span class="number">0</span> <span class="number">03</span>:<span class="number">39</span> pts/<span class="number">1</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="built_in">ps</span> <span class="literal">-ef</span></span><br></pre></td></tr></table></figure><p>这种进入方式是单独开了一个新进程的方式。</p><h3 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h3><p>使用 <code>docker attach</code> 会进入容器正在执行的终端，不会启动新的进程。</p><blockquote><p>语法 docker attach 容器</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS        PORTS     NAMES</span><br><span class="line"><span class="number">96</span>ed3fe3e7f1   centos    <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">17</span> hours ago   Up <span class="number">17</span> hours             centos01</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker attach 96ed3fe3e7f1</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">96</span><span class="type">ed3fe3e7f1</span> /]<span class="comment"># ps -ef</span></span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         <span class="number">1</span>     <span class="number">0</span>  <span class="number">0</span> Dec09 pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> /bin/bash</span><br><span class="line">root        <span class="number">33</span>     <span class="number">1</span>  <span class="number">0</span> <span class="number">05</span>:<span class="number">49</span> pts/<span class="number">0</span>    <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> <span class="built_in">ps</span> <span class="literal">-ef</span></span><br></pre></td></tr></table></figure><p>这种进入方式没有开启新的进程（<code>/bin/bash</code> 是 centos 容器的默认终端）。</p><h2 id="从容器内拷贝文件到主机"><a href="#从容器内拷贝文件到主机" class="headerlink" title="从容器内拷贝文件到主机"></a>从容器内拷贝文件到主机</h2><blockquote><p>查看启动的容器</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS        PORTS     NAMES</span><br><span class="line"><span class="number">96</span>ed3fe3e7f1   centos    <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">17</span> hours ago   Up <span class="number">17</span> hours             centos01</span><br></pre></td></tr></table></figure><blockquote><p>进入容器，创建一个文件</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker attach 96ed3fe3e7f1</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">96</span><span class="type">ed3fe3e7f1</span> /]<span class="comment"># cd /home</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">96</span><span class="type">ed3fe3e7f1</span> <span class="type">home</span>]<span class="comment"># touch test.java</span></span><br><span class="line">[<span class="type">root</span>@<span class="number">96</span><span class="type">ed3fe3e7f1</span> <span class="type">home</span>]<span class="comment"># ls</span></span><br><span class="line">test.java</span><br><span class="line">[<span class="type">root</span>@<span class="number">96</span><span class="type">ed3fe3e7f1</span> <span class="type">home</span>]<span class="comment"># exit</span></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure><blockquote><p>退出容器后，不管容器是否启动，都可以复制容器中的文件到主机上</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># cd /home</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">home</span>]<span class="comment"># docker cp 96ed3fe3e7f1:/home/test.java /home</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">home</span>]<span class="comment"># ls</span></span><br><span class="line">admin  f2  f3  sail  test.java</span><br></pre></td></tr></table></figure><blockquote><p>这种方式是一个手动过程，很不方便，推荐使用数据卷技术，可以实现自动同步主机和容器的目录。</p></blockquote><p>详情见：<a href="https://www.kuangstudy.com/bbs/1484782140666593282">Docker 12 数据卷</a></p><h2 id="查看Docker内存占用"><a href="#查看Docker内存占用" class="headerlink" title="查看Docker内存占用"></a>查看Docker内存占用</h2><h3 id="docker-stats"><a href="#docker-stats" class="headerlink" title="docker stats"></a>docker stats</h3><blockquote><p>语法</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats [参数] [容器<span class="type">...</span>]</span><br></pre></td></tr></table></figure><blockquote><p>参数</p></blockquote><ul><li><code>a</code>：查看所有容器的内存占用（默认只展示运行的容器）。</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">home</span>]<span class="comment"># docker stats</span></span><br><span class="line">CONTAINER ID   NAME       CPU %     MEM USAGE / LIMIT   MEM %     NET I/O   BLOCK I/O   PIDS</span><br><span class="line"><span class="number">96</span>ed3fe3e7f1   centos01   <span class="number">0.00</span>%     <span class="number">524</span>KiB / <span class="number">1.694</span>GiB   <span class="number">0.03</span>%     <span class="number">0</span>B / <span class="number">0</span>B   <span class="number">0</span>B / <span class="number">0</span>B     <span class="number">1</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">home</span>]<span class="comment"># docker stats -a</span></span><br><span class="line">CONTAINER ID   NAME              CPU %     MEM USAGE / LIMIT   MEM %     NET I/O   BLOCK I/O   PIDS</span><br><span class="line"><span class="number">0</span>aee6f74b913   brave_rosalind    <span class="number">0.00</span>%     <span class="number">0</span>B / <span class="number">0</span>B             <span class="number">0.00</span>%     <span class="number">0</span>B / <span class="number">0</span>B   <span class="number">0</span>B / <span class="number">0</span>B     <span class="number">0</span></span><br><span class="line">c3d59f55d600   musing_poincare   <span class="number">0.00</span>%     <span class="number">0</span>B / <span class="number">0</span>B             <span class="number">0.00</span>%     <span class="number">0</span>B / <span class="number">0</span>B   <span class="number">0</span>B / <span class="number">0</span>B     <span class="number">0</span></span><br><span class="line"><span class="number">569026</span>bc0955   centos03          <span class="number">0.00</span>%     <span class="number">0</span>B / <span class="number">0</span>B             <span class="number">0.00</span>%     <span class="number">0</span>B / <span class="number">0</span>B   <span class="number">0</span>B / <span class="number">0</span>B     <span class="number">0</span></span><br><span class="line"><span class="number">71</span>a97b830ec5   centos02          <span class="number">0.00</span>%     <span class="number">0</span>B / <span class="number">0</span>B             <span class="number">0.00</span>%     <span class="number">0</span>B / <span class="number">0</span>B   <span class="number">0</span>B / <span class="number">0</span>B     <span class="number">0</span></span><br><span class="line"><span class="number">96</span>ed3fe3e7f1   centos01          <span class="number">0.00</span>%     <span class="number">524</span>KiB / <span class="number">1.694</span>GiB   <span class="number">0.03</span>%     <span class="number">0</span>B / <span class="number">0</span>B   <span class="number">0</span>B / <span class="number">0</span>B     <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h1><h2 id="部署Nginx"><a href="#部署Nginx" class="headerlink" title="部署Nginx"></a>部署Nginx</h2><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">home</span>]<span class="comment"># docker pull nginx</span></span><br><span class="line"><span class="keyword">Using</span> default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">e5ae68f74026: Pull complete </span><br><span class="line"><span class="number">21</span>e0df283cd6: Pull complete </span><br><span class="line">ed835de16acd: Pull complete </span><br><span class="line"><span class="number">881</span>ff011f1c9: Pull complete </span><br><span class="line"><span class="number">77700</span>c52c969: Pull complete </span><br><span class="line"><span class="number">44</span>be98c0fab6: Pull complete </span><br><span class="line">Digest: sha256:<span class="number">9522864</span>dd661dcadfd9958f9e0de192a1fdda2c162a35668ab6ac42b465f0603</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br></pre></td></tr></table></figure><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">home</span>]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx        latest    f652ca386ed1   <span class="number">7</span> days ago     <span class="number">141</span>MB</span><br></pre></td></tr></table></figure><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">home</span>]<span class="comment"># docker run -d --name=nginx01 -p 3344:80 nginx</span></span><br><span class="line">f58fb3ed8c5587d2c28567c865759438e449f2fd65889f2910286b9cd74debec</span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">home</span>]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                  NAMES</span><br><span class="line">f58fb3ed8c55   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   <span class="number">23</span> seconds ago   Up <span class="number">22</span> seconds   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">3344</span>-&gt;<span class="number">80</span>/tcp   nginx01</span><br></pre></td></tr></table></figure><h3 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h3><p>使用 <code>curl</code> 命令可以模拟网页访问，以此来测试 Nginx 启动情况。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">home</span>]<span class="comment"># curl localhost:3344</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color<span class="literal">-scheme</span>: light dark; &#125;</span><br><span class="line">body &#123; width: <span class="number">35</span>em; margin: <span class="number">0</span> auto;</span><br><span class="line">font<span class="literal">-family</span>: Tahoma, Verdana, Arial, sans<span class="literal">-serif</span>; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">If</span> you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">For</span> online documentation and support please refer to</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you <span class="keyword">for</span> <span class="keyword">using</span> nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="外网访问测试"><a href="#外网访问测试" class="headerlink" title="外网访问测试"></a>外网访问测试</h3><p>如果是使用<strong>阿里云服务器</strong>，需要先开启端口。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.7i0eqb1crt.webp" alt="image.png"></p><p>使用阿里云的公网 IP 即可进行访问。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.ic58ep5p6.webp" alt="image.png"></p><p>出现此页面，即代表 Nginx 部署成功。</p><blockquote><p>查看启动的容器</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">home</span>]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                  NAMES</span><br><span class="line">f58fb3ed8c55   nginx     <span class="string">&quot;/docker-entrypoint.…&quot;</span>   <span class="number">12</span> minutes ago   Up <span class="number">12</span> minutes   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">3344</span>-&gt;<span class="number">80</span>/tcp   nginx01</span><br></pre></td></tr></table></figure><blockquote><p>查看容器中 Nginx 目录</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">home</span>]<span class="comment"># docker exec -it nginx01 /bin/bash</span></span><br><span class="line">root@f58fb3ed8c55:/<span class="comment"># whereis nginx</span></span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line">root@f58fb3ed8c55:/<span class="comment"># cd /etc/nginx</span></span><br><span class="line">root@f58fb3ed8c55:/etc/nginx<span class="comment"># ls</span></span><br><span class="line">conf.d    fastcgi_params    mime.types  modules  nginx.conf  scgi_params  uwsgi_params</span><br></pre></td></tr></table></figure><p>如此，如果需要修改 Nginx 的配置即可修改 <strong>nginx.conf</strong> 文件实现。</p><p>不过如果每次修改都要进入容器后再进行操作，是很繁琐的事，还是更推荐使用<strong>容器卷技术</strong>。</p><h3 id="部署原理"><a href="#部署原理" class="headerlink" title="部署原理"></a>部署原理</h3><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.5j47zywdab.webp" alt="image.png"></p><h2 id="部署Tomcat"><a href="#部署Tomcat" class="headerlink" title="部署Tomcat"></a>部署Tomcat</h2><h3 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">bin</span>]<span class="comment"># docker run -d -p 8080:8080 --name=tomcat01 tomcat</span></span><br><span class="line">Unable to find image <span class="string">&#x27;tomcat:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/tomcat</span><br><span class="line"><span class="number">5</span>e0b432e8ba9: Pull complete </span><br><span class="line">a84cfd68b5ce: Pull complete </span><br><span class="line">e8b8f2315954: Pull complete </span><br><span class="line"><span class="number">0598</span>fa43a7e7: Pull complete </span><br><span class="line">e0d35e3be804: Pull complete </span><br><span class="line"><span class="number">8</span>fc448a0c88b: Pull complete </span><br><span class="line">dbdff6e5955b: Pull complete </span><br><span class="line"><span class="number">5</span>daf3771e3d8: Pull complete </span><br><span class="line">e4265b3badfc: Pull complete </span><br><span class="line"><span class="number">126</span>f233cb97a: Pull complete </span><br><span class="line">Digest: sha256:<span class="number">429</span>d5c140820d5eba38042823501d5f4e0f03b282133513e29c22d6358daa7c7</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> tomcat:latest</span><br><span class="line">fe247e0ef80de961df2f73216b3c604d97094b9a35064f9bef421243e610e487</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">bin</span>]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND             CREATED              STATUS              PORTS                    NAMES</span><br><span class="line">fe247e0ef80d   tomcat    <span class="string">&quot;catalina.sh run&quot;</span>   About a minute ago   Up About a minute   <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp   tomcat01</span><br></pre></td></tr></table></figure><p>这里选择直接启动的方式，若本地没有该镜像，则先从官方库拉取。</p><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> <span class="type">sail</span>]<span class="comment"># docker exec -it tomcat01 /bin/bash</span></span><br><span class="line">root@fe247e0ef80d:/usr/local/tomcat<span class="comment"># ls</span></span><br><span class="line">BUILDING.txt  CONTRIBUTING.md  LICENSE    NOTICE    README.md  RELEASE<span class="literal">-NOTES</span>  RUNNING.txt  bin  conf  lib  logs  native<span class="literal">-jni-lib</span>  temp  webapps  webapps.dist  work</span><br><span class="line"></span><br><span class="line">root@fe247e0ef80d:/usr/local/tomcat<span class="comment"># cd webapps</span></span><br><span class="line">root@fe247e0ef80d:/usr/local/tomcat/webapps<span class="comment"># ls</span></span><br><span class="line">root@fe247e0ef80d:/usr/local/tomcat/webapps<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>这里发现一个问题，Tomcat 下的 <strong>webapps</strong> 没有文件，所以 Tomcat 的初始页面是不能显示的。</p><blockquote><p>这也是 Docker 的精髓，只保留最核心的东西，剔除所有不必要的内容。</p></blockquote><p>这也并非不可解决，<strong>webapps</strong> 的默认内容是存放在 <strong>webapps.dist</strong> 中的</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@fe247e0ef80d:/usr/local/tomcat<span class="comment"># cd webapps.dist</span></span><br><span class="line">root@fe247e0ef80d:/usr/local/tomcat/webapps.dist<span class="comment"># ls</span></span><br><span class="line">ROOT  docs  examples  host<span class="literal">-manager</span>  manager</span><br></pre></td></tr></table></figure><blockquote><p>将 webapps.dist 中的内容复制到 webapps 下</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@fe247e0ef80d:/usr/local/tomcat<span class="comment"># cp -r webapps.dist/* webapps</span></span><br><span class="line">root@fe247e0ef80d:/usr/local/tomcat<span class="comment"># cd webapps</span></span><br><span class="line">root@fe247e0ef80d:/usr/local/tomcat/webapps<span class="comment"># ls</span></span><br><span class="line">ROOT  docs  examples  host<span class="literal">-manager</span>  manager</span><br></pre></td></tr></table></figure><h3 id="外网访问测试-1"><a href="#外网访问测试-1" class="headerlink" title="外网访问测试"></a>外网访问测试</h3><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.2obju6henu.webp" alt="image.png"></p><blockquote><p>命令测试</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@fe247e0ef80d:/usr/local/tomcat/webapps<span class="comment"># ll</span></span><br><span class="line">bash: ll: command not found</span><br></pre></td></tr></table></figure><blockquote><p>这里又发现一个问题，ll 这种相对基础的命令也是没有的，如此也可以看出 Docker 极致的精简。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Docker基本使用</title>
      <link href="/posts/2414a4b0.html"/>
      <url>/posts/2414a4b0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker基本使用"><a href="#Docker基本使用" class="headerlink" title="Docker基本使用"></a>Docker基本使用</h1><aside>💡  开始基本的docker使用吧</aside><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.7zqgew1tjx.webp" alt="image.png"></p><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><h3 id="docker-—help"><a href="#docker-—help" class="headerlink" title="docker —help"></a>docker —help</h3><p>Docker 的帮助命令是一个<strong>万能命令</strong>，可以用来查看 Docker 的<strong>所有命令</strong>。</p><blockquote><p>语法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker [命令] --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><h3 id="docker-version"><a href="#docker-version" class="headerlink" title="docker version"></a>docker version</h3><p>使用 <code>docker version</code> 命令可以查看 Docker 的基本信息。</p><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><h3 id="docker-info"><a href="#docker-info" class="headerlink" title="docker info"></a>docker info</h3><p>使用 <code>docker info</code> 命令可以查看 Docker 的系统信息。</p><h1 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h1><h2 id="查看所有镜像"><a href="#查看所有镜像" class="headerlink" title="查看所有镜像"></a>查看所有镜像</h2><h3 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h3><p>可以使用 <code>docker images</code> 命令查看所有本地主机上的镜像。</p><blockquote><p>该命令等价于 docker image ls。</p><p>语法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images [参数] [镜像[:标签]]</span><br></pre></td></tr></table></figure><p>命令后加上 [镜像[:标签]] 可以对镜像进行过滤。</p><blockquote><p>参数</p></blockquote><ul><li><code>a</code>：显示所有镜像。</li><li><code>q</code>：只显示 ID。</li></ul><blockquote><p>显示所有镜像</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@sail ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    feb5d9fea6a5   2 months ago   13.3kB</span><br><span class="line">[root@sail ~]# docker image <span class="built_in">ls</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    feb5d9fea6a5   2 months ago   13.3kB</span><br><span class="line">[root@sail ~]# docker images -a</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    feb5d9fea6a5   2 months ago   13.3kB</span><br></pre></td></tr></table></figure><blockquote><p>只显示镜像的 ID</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker images -q</span></span><br><span class="line">feb5d9fea6a5</span><br></pre></td></tr></table></figure><blockquote><p>显示所有镜像的 ID</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker images -aq</span></span><br><span class="line">feb5d9fea6a5</span><br></pre></td></tr></table></figure><blockquote><p>对镜像进行过滤</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker images java</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker images hello-world</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello<span class="literal">-world</span>   latest    feb5d9fea6a5   <span class="number">2</span> months ago   <span class="number">13.3</span>kB</span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker images hello-world:latest</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello<span class="literal">-world</span>   latest    feb5d9fea6a5   <span class="number">2</span> months ago   <span class="number">13.3</span>kB</span><br></pre></td></tr></table></figure><blockquote><p>结果分析</p></blockquote><ul><li><strong>REPOSITORY</strong>：镜像名（镜像仓库源）。</li><li><strong>TAG</strong>：镜像的标签。</li><li><strong>IMAGE ID</strong>：镜像的 ID。</li><li><strong>CREATED</strong>：镜像的创建时间。</li><li><strong>SIZE</strong>：镜像的大小。</li></ul><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><h3 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h3><blockquote><p>语法</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search [参数]</span><br></pre></td></tr></table></figure><blockquote><p>参数</p></blockquote><ul><li><code>f</code> &#x2F; <code>-filter</code>：根据过滤条件搜索。</li></ul><blockquote><p>搜索仓库中的镜像，等价于网页搜索。</p></blockquote><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.pfd3uaf3u.webp" alt="image.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@sail ~]# docker search mysql</span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   11789     [OK]       </span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4488      [OK]       </span><br><span class="line">mysql/mysql-server                Optimized MySQL Server Docker images. Create…   882                  [OK]</span><br><span class="line">centos/mysql-57-centos7           MySQL 5.7 SQL database server                   92                   </span><br><span class="line">mysql/mysql-cluster               Experimental MySQL Cluster Docker images. Cr…   89                   </span><br><span class="line">centurylink/mysql                 Image containing mysql. Optimized to be <span class="built_in">link</span>…   59                   [OK]</span><br><span class="line">databack/mysql-backup             Back up mysql databases to... anywhere!         53                   </span><br><span class="line">prom/mysqld-exporter                                                              44                   [OK]</span><br><span class="line">deitch/mysql-backup               REPLACED! Please use http://hub.docker.com/r…   41                   [OK]</span><br><span class="line">tutum/mysql                       Base docker image to run a MySQL database se…   35                   </span><br><span class="line">linuxserver/mysql                 A Mysql container, brought to you by LinuxSe…   34                   </span><br><span class="line">schickling/mysql-backup-s3        Backup MySQL to S3 (supports periodic backup…   31                   [OK]</span><br><span class="line">mysql/mysql-router                MySQL Router provides transparent routing be…   23                   </span><br><span class="line">centos/mysql-56-centos7           MySQL 5.6 SQL database server                   21                   </span><br><span class="line">arey/mysql-client                 Run a MySQL client from a docker container      19                   [OK]</span><br><span class="line">fradelg/mysql-cron-backup         MySQL/MariaDB database backup using cron tas…   17                   [OK]</span><br><span class="line">genschsa/mysql-employees          MySQL Employee Sample Database                  8                    [OK]</span><br><span class="line">yloeffler/mysql-backup            This image runs mysqldump to backup data usi…   7                    [OK]</span><br><span class="line">openshift/mysql-55-centos7        DEPRECATED: A Centos7 based MySQL v5.5 image…   6                    </span><br><span class="line">devilbox/mysql                    Retagged MySQL, MariaDB and PerconaDB offici…   3                    </span><br><span class="line">ansibleplaybookbundle/mysql-apb   An APB <span class="built_in">which</span> deploys RHSCL MySQL                3                    [OK]</span><br><span class="line">jelastic/mysql                    An image of the MySQL database server mainta…   2                    </span><br><span class="line">centos/mysql-80-centos7           MySQL 8.0 SQL database server                   2                    </span><br><span class="line">widdpim/mysql-client              Dockerized MySQL Client (5.7) including Curl…   1                    [OK]</span><br><span class="line">vitess/mysqlctld                  vitess/mysqlctld                                1                    [OK]</span><br></pre></td></tr></table></figure><blockquote><p>搜索出 Stars 大于 3000 的</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker search mysql -f=STARS=3000</span></span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, <span class="built_in">open-source</span> relation…   <span class="number">11789</span>     [<span class="type">OK</span>]       </span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   <span class="number">4488</span>      [<span class="type">OK</span>]</span><br></pre></td></tr></table></figure><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><h3 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h3><blockquote><p>语法</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [参数] 镜像名[:标签]</span><br></pre></td></tr></table></figure><blockquote><p>如果不输入标签，默认拉取最新版镜像。</p><p>参数</p></blockquote><ul><li><code>a</code>：拉取镜像的所有标签。</li><li><code>q</code>：抑制详细输出。</li></ul><blockquote><p>默认下载最新版</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@sail ~]# docker pull redis</span><br><span class="line">Using default tag: latest <span class="comment"># 默认最新版标签</span></span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">e5ae68f74026: Pull complete <span class="comment"># 分层下载，docker image的核心：联合文件系统</span></span><br><span class="line">37c4354629da: Pull complete </span><br><span class="line">b065b1b1fa0f: Pull complete </span><br><span class="line">6954d19bb2e5: Pull complete </span><br><span class="line">6333f8baaf7c: Pull complete </span><br><span class="line">f9772c8a44e7: Pull complete </span><br><span class="line">Digest: sha256:2f502d27c3e9b54295f1c591b3970340d02f8a5824402c8179dcd20d4076b796 <span class="comment">#防伪签名</span></span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> redis:latest</span><br><span class="line">docker.io/library/redis:latest <span class="comment"># 真实地址，docker pull redis 等价于 docker pull docker.io/library/redis:latest</span></span><br></pre></td></tr></table></figure><blockquote><p>指定版本下载</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@sail ~]# docker pull redis:5.0</span><br><span class="line">5.0: Pulling from library/redis</span><br><span class="line">e5ae68f74026: Already exists <span class="comment"># 分层镜像的好处，与之前的版本共用一部分，不用再重复下载</span></span><br><span class="line">37c4354629da: Already exists </span><br><span class="line">b065b1b1fa0f: Already exists </span><br><span class="line">99ab464ba8bb: Pull complete </span><br><span class="line">eb5bbe3179d2: Pull complete </span><br><span class="line">2067794f93b6: Pull complete </span><br><span class="line">Digest: sha256:310f81701011175dc868e833d73f539282dd18510ca35d6f7b63c4d33ab4f54e</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> redis:5.0</span><br><span class="line">docker.io/library/redis:5.0</span><br></pre></td></tr></table></figure><p>版本来自于官网，版本库 <a href="https://hub.docker.com/_/redis">https://hub.docker.com/_/redis</a></p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.51e6bdu1tg.webp" alt="image.png"></p><blockquote><p>这里输入的标签必须是官网版本库存在的标签，否则无法拉取镜像。</p></blockquote><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><h3 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h3><blockquote><p>语法</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [参数] 镜像 [镜像<span class="type">...</span>]</span><br></pre></td></tr></table></figure><blockquote><p>参数</p></blockquote><ul><li><code>f</code>：强制删除。</li></ul><blockquote><p>查看现存镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">redis         <span class="number">5.0</span>       <span class="number">071510791</span>e92   <span class="number">5</span> days ago     <span class="number">110</span>MB</span><br><span class="line">redis         latest    aea9b698d7d1   <span class="number">6</span> days ago     <span class="number">113</span>MB</span><br><span class="line">mysql         <span class="number">5.7</span>       <span class="number">738</span>e7101490b   <span class="number">6</span> days ago     <span class="number">448</span>MB</span><br><span class="line">mysql         latest    bbf6571db497   <span class="number">6</span> days ago     <span class="number">516</span>MB</span><br><span class="line">hello<span class="literal">-world</span>   latest    feb5d9fea6a5   <span class="number">2</span> months ago   <span class="number">13.3</span>kB</span><br></pre></td></tr></table></figure><blockquote><p>删除一个。可以通过名称，也可以指定 ID，-f 表示强制删除。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker rmi -f feb5d9fea6a5</span></span><br><span class="line">Untagged: hello<span class="literal">-world</span>:latest</span><br><span class="line">Untagged: hello<span class="literal">-world</span>@sha256:cc15c5b292d8525effc0f89cb299f1804f3a725c8d05e158653a563f15e4f685</span><br><span class="line">Deleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412</span><br></pre></td></tr></table></figure><blockquote><p>删除多个。用空格分隔 ID。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker rmi -f 738e7101490b bbf6571db497</span></span><br><span class="line">Untagged: mysql:<span class="number">5.7</span></span><br><span class="line">Untagged: mysql@sha256:d1cc87a3bd5dc07defc837bc9084f748a130606ff41923f46dec1986e0dc828d</span><br><span class="line">Deleted: sha256:<span class="number">738</span>e7101490b45decf606211a5437ed87aa6a82f1ff03c354564bf9375ce20f9</span><br><span class="line">Deleted: sha256:addad8cfeac97b96eb6652a576269346ac96def9a6709ed2388e24fff4345837</span><br><span class="line">Deleted: sha256:e288c3439a7e2f423f50bf22979a759371c51a70bbbaa450993c336978460b1a</span><br><span class="line">Deleted: sha256:<span class="number">33</span>ece15accaa3bb20e3dee84e2e4501469b917c3abba3d5475cd1fec8bb3e82c</span><br><span class="line">Deleted: sha256:<span class="number">6</span>b15390bceeca8424d82e75f5c9aca5eb4693f96849d6382168a99747877693d</span><br><span class="line">Untagged: mysql:latest</span><br><span class="line">Untagged: mysql@sha256:ff9a288d1ecf4397967989b5d1ec269f7d9042a46fc8bc2c3ae35458c1a26727</span><br><span class="line">Deleted: sha256:bbf6571db4977fe13c3f4e6289c1409fc6f98c2899eabad39bfe07cad8f64f67</span><br><span class="line">Deleted: sha256:a72da99dce60d6f8d4c4cffa4173153c990537fcdfaa27c35324c3348d55dd5c</span><br><span class="line">Deleted: sha256:<span class="number">8</span>b535d432ef2fbd45d93958347b2587c5cbe334f07d6909ad9d2d480ebbafb65</span><br><span class="line">Deleted: sha256:<span class="number">14</span>d13a3b33fc76839f156cd24b4636dab121e6d3d026cefa2985a4b89e9d4df8</span><br><span class="line">Deleted: sha256:<span class="number">77</span>c21a5a897a1ba752f3d742d6c94ee7c6b0e373fd0aeecc4bf88b9a3982007e</span><br><span class="line">Deleted: sha256:<span class="number">189162</span>becec8bb4588c54fb4ea7e62d20121812e68aeb0291fb4bb5df9ec0985</span><br><span class="line">Deleted: sha256:<span class="number">34980</span>dadfd6a5bb9d7f9e8d4e408000e0a8f4840cc7d3092dc94357ebe7a89b6</span><br><span class="line">Deleted: sha256:<span class="number">15</span>b2beb64a91785c8f3709ecd2410d13577b3174faad164524434ce6a7633506</span><br><span class="line">Deleted: sha256:e38dd14d47b61171927ea4b928f7296123b65a81ad1cfde8f5d00cadf1e81bbb</span><br><span class="line">Deleted: sha256:<span class="number">865</span>abdfd8444741f581ce582e4ac5746c4a00c282febf65aa808a235ec7abf78</span><br><span class="line">Deleted: sha256:b1e35233e1ac953bd06fc8fa83afb3a88c39c1aeae0c89a46cb1b652d6821b38</span><br><span class="line">Deleted: sha256:<span class="number">3</span>bcfdf6641227ff63e3ddf9e38e45cf317b178a50a664e45c6ae596107d5bc46</span><br><span class="line">Deleted: sha256:f11bbd657c82c45cc25b0533ce72f193880b630352cc763ed0c045c808ff9ae1</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED      SIZE</span><br><span class="line">redis        <span class="number">5.0</span>       <span class="number">071510791</span>e92   <span class="number">6</span> days ago   <span class="number">110</span>MB</span><br><span class="line">redis        latest    aea9b698d7d1   <span class="number">6</span> days ago   <span class="number">113</span>MB</span><br></pre></td></tr></table></figure><blockquote><p>删除所有。先用 docker images -aq 查询出所有镜像，再使用 docker rmi -f 递归删除。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker rmi -f $(docker images -aq)</span></span><br><span class="line">Untagged: redis:<span class="number">5.0</span></span><br><span class="line">Untagged: redis@sha256:<span class="number">310</span>f81701011175dc868e833d73f539282dd18510ca35d6f7b63c4d33ab4f54e</span><br><span class="line">Deleted: sha256:<span class="number">071510791</span>e929570d7dde405f10b19d47115db05e46901b36b7d91ff978444bf</span><br><span class="line">Deleted: sha256:<span class="number">8</span>c023aca07f849d976f91ff85da1a90d39add83d8d50d358e1ec5177e1371907</span><br><span class="line">Deleted: sha256:<span class="number">4</span>dbec1fb2051b365aa3e6a805a052f2c7b4e9087c46847722f9ea5f12b1be308</span><br><span class="line">Deleted: sha256:c6b1ae6dca0b2730bc0d78727b3a7078fce525bfa37dbb750e31b7a976ca1d99</span><br><span class="line">Untagged: redis:latest</span><br><span class="line">Untagged: redis@sha256:<span class="number">2</span>f502d27c3e9b54295f1c591b3970340d02f8a5824402c8179dcd20d4076b796</span><br><span class="line">Deleted: sha256:aea9b698d7d1d2fb22fe74868e27e767334b2cc629a8c6f9db8cc1747ba299fd</span><br><span class="line">Deleted: sha256:beb6c508926e807f60b6a3816068ee3e2cece7654abaff731e4a26bcfebe04d8</span><br><span class="line">Deleted: sha256:a5b5ed3d7c997ffd7c58cd52569d8095a7a3729412746569cdbda0dfdd228d1f</span><br><span class="line">Deleted: sha256:ee76d3703ec1ab8abc11858117233a3ac8c7c5e37682f21a0c298ad0dc09a9fe</span><br><span class="line">Deleted: sha256:<span class="number">60</span>abc26bc7704070b2977b748ac0fd4ca94b818ed4ba1ef59ca8803e95920161</span><br><span class="line">Deleted: sha256:<span class="number">6</span>a2f1dcfa7455f60a810bb7c4786d62029348f64c4fcff81c48f8625cf0d995a</span><br><span class="line">Deleted: sha256:<span class="number">9321</span>ff862abbe8e1532076e5fdc932371eff562334ac86984a836d77dfb717f5</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span><br></pre></td></tr></table></figure><h2 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h2><h3 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h3><blockquote><p>语法</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [参数] 镜像名</span><br></pre></td></tr></table></figure><blockquote><p>参数</p></blockquote><ul><li><p><code>--name</code>：指定容器的名称，如果正在运行该名称的容器，会报错。</p></li><li><p><code>-rm</code>：用完即删除，通常用来测试。</p></li><li><p><code>d</code>：后台方式运行。</p></li><li><p><code>it</code>：使用交互方式运行，可以进入容器查看内容。</p></li><li><p><code>e</code>：指定运行环境。</p></li><li><p><code>p</code>：随机指定端口。</p></li><li><p><code>p</code></p><p>  ：指定容器的端口，如：</p>  <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-p</span> <span class="number">8080</span>:<span class="number">8080</span></span><br></pre></td></tr></table></figure><p>  。还可以有以下写法：</p><ul><li><code>p ip:主机端口:容器端口</code></li><li><code>p 主机端口:容器端口</code></li><li><code>p 容器端口</code></li></ul></li></ul><blockquote><p>运行 centos 镜像</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker run -it centos /bin/bash</span></span><br><span class="line">Unable to find image <span class="string">&#x27;centos:latest&#x27;</span> locally <span class="comment"># 检索本地镜像，发现没有该镜像，则去仓库中搜索。</span></span><br><span class="line">latest: Pulling from library/centos <span class="comment"># 开始从仓库中拉取</span></span><br><span class="line">a1d0c7532777: Pull complete </span><br><span class="line">Digest: sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> centos:latest</span><br><span class="line">[<span class="type">root</span>@<span class="number">81</span><span class="type">c83ea42dc0</span> /]<span class="comment"># ls # 由于是以交互方式运行，且进入 /bin/bash 中，此时的路径即为 centos 容器中的 /bin/bash</span></span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure><blockquote><p>由此可以看出，容器就是一个微型的 Linux 系统。它只保留了最核心的功能和最基本的命令，方便进行操作。</p></blockquote><h1 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h1><h2 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h2><h3 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h3><blockquote><p>语法</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">ps</span> [参数]</span><br></pre></td></tr></table></figure><blockquote><p>参数</p></blockquote><ul><li><code>a</code>：查看所有容器（包括正在运行的和已经停止的）。</li><li><code>n</code>：显示最近创建的容器，设置显示个数。</li><li><code>q</code>：只显示容器的编号。</li></ul><blockquote><p>查看正在运行的容器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@sail ~]# docker psCONTAINER ID   IMAGE     COMMAND       CREATED              STATUS              PORTS     NAMES1aaf76d85b9e   centos    <span class="string">&quot;/bin/bash&quot;</span>   About a minute ago   Up About a minute             intelligent_proskuriakova</span><br></pre></td></tr></table></figure><blockquote><p>查看所有容器</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED              STATUS                      PORTS     NAMES</span><br><span class="line"><span class="number">1</span>aaf76d85b9e   centos         <span class="string">&quot;/bin/bash&quot;</span>   About a minute ago   Up About a minute                     intelligent_proskuriakova</span><br><span class="line"><span class="number">7</span>ac04abd5a1f   centos         <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">3</span> minutes ago        Exited (<span class="number">0</span>) <span class="number">3</span> minutes ago              elegant_euler</span><br><span class="line">bbb87116d848   centos         <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">8</span> minutes ago        Exited (<span class="number">0</span>) <span class="number">3</span> minutes ago              focused_boyd</span><br><span class="line"><span class="number">81</span>c83ea42dc0   centos         <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">28</span> minutes ago       Exited (<span class="number">0</span>) <span class="number">19</span> minutes ago             zealous_proskuriakova</span><br><span class="line"><span class="number">52918</span>b3ce8f6   feb5d9fea6a5   <span class="string">&quot;/hello&quot;</span>      <span class="number">11</span> days ago          Exited (<span class="number">0</span>) <span class="number">11</span> days ago                friendly_ramanujan</span><br></pre></td></tr></table></figure><blockquote><p>显示最近创建的 2 个容器</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps -a -n=2</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED       STATUS                   PORTS     NAMES</span><br><span class="line"><span class="number">1</span>aaf76d85b9e   centos    <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">5</span> hours ago   Up <span class="number">5</span> hours                         intelligent_proskuriakova</span><br><span class="line"><span class="number">7</span>ac04abd5a1f   centos    <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">5</span> hours ago   Exited (<span class="number">0</span>) <span class="number">5</span> hours ago             elegant_euler</span><br></pre></td></tr></table></figure><blockquote><p>只显示容器的 ID</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps -aq</span></span><br><span class="line"><span class="number">1</span>aaf76d85b9e</span><br><span class="line"><span class="number">7</span>ac04abd5a1f</span><br><span class="line">bbb87116d848</span><br><span class="line"><span class="number">81</span>c83ea42dc0</span><br><span class="line"><span class="number">52918</span>b3ce8f6</span><br></pre></td></tr></table></figure><h2 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h2><h3 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h3><p>进入容器后，可以使用 <code>exit</code> 退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@sail ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@7ac04abd5a1f /]# <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@sail ~]#</span><br><span class="line"></span><br><span class="line">[root@sail ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br></pre></td></tr></table></figure><p>由此可见，这样退出后容器也会停止。</p><h3 id="Ctrl-P-Q"><a href="#Ctrl-P-Q" class="headerlink" title="Ctrl + P + Q"></a>Ctrl + P + Q</h3><p>如果想退出后容器不停止，可以使用 <code>Ctrl + P + Q</code> 快捷键退出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@sail ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@1aaf76d85b9e /]# [root@sail ~]# docker ps <span class="comment"># 此时即为使用 Ctrl + P + Q 快捷键的效果</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">1aaf76d85b9e   centos    <span class="string">&quot;/bin/bash&quot;</span>   8 seconds ago   Up 8 seconds             intelligent_proskuriakova</span><br></pre></td></tr></table></figure><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><h3 id="docker-rm"><a href="#docker-rm" class="headerlink" title="docker rm"></a>docker rm</h3><blockquote><p>语法</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> [参数] 容器 [容器<span class="type">...</span>]</span><br></pre></td></tr></table></figure><blockquote><p>参数</p></blockquote><ul><li><code>f</code>：强制删除。</li></ul><blockquote><p>删除指定容器（不能删除正在运行的容器）</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED       STATUS       PORTS     NAMES</span><br><span class="line"><span class="number">1</span>aaf76d85b9e   centos    <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">5</span> hours ago   Up <span class="number">5</span> hours             intelligent_proskuriakova</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker rm 1aaf76d85b9e</span></span><br><span class="line">Error response from daemon: You cannot remove a running container <span class="number">1</span>aaf76d85b9ee5002411c1ea390fca05819f19dc400e85127731d37455cb0acc. Stop the container before attempting removal or force remove</span><br></pre></td></tr></table></figure><blockquote><p>强制删除指定容器</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED       STATUS       PORTS     NAMES</span><br><span class="line"><span class="number">1</span>aaf76d85b9e   centos    <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">5</span> hours ago   Up <span class="number">5</span> hours             intelligent_proskuriakova</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker rm -f 1aaf76d85b9e</span></span><br><span class="line"><span class="number">1</span>aaf76d85b9e</span><br></pre></td></tr></table></figure><blockquote><p>删除所有容器。先使用 docker ps -aq 获取所有容器的 ID，再调用 docker rm -f 递归删除。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker rm -f $(docker ps -aq)</span></span><br><span class="line"><span class="number">7</span>ac04abd5a1f</span><br><span class="line">bbb87116d848</span><br><span class="line"><span class="number">81</span>c83ea42dc0</span><br><span class="line"><span class="number">52918</span>b3ce8f6</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br></pre></td></tr></table></figure><blockquote><p>删除所有容器。使用管道符 | 获取 Docker 相关的所有容器 ID 并使用 docker rm -f 删除。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps -a -q|xargs docker rm -f</span></span><br><span class="line"><span class="number">2</span>e61c4578eac</span><br><span class="line"><span class="number">0</span>ebe32ddfa50</span><br></pre></td></tr></table></figure><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><h3 id="docker-start"><a href="#docker-start" class="headerlink" title="docker start"></a>docker start</h3><blockquote><p>查看所有的容器，容器状态为关闭</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS                     PORTS     NAMES</span><br><span class="line"><span class="number">569026</span>bc0955   centos    <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">33</span> seconds ago   Exited (<span class="number">0</span>) <span class="number">7</span> seconds ago             centos03</span><br></pre></td></tr></table></figure><blockquote><p>运行关闭的容器</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker start 569026bc0955 </span></span><br><span class="line"><span class="number">569026</span>bc0955</span><br></pre></td></tr></table></figure><blockquote><p>再次查看所有的容器，容器状态为运行</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED              STATUS              PORTS     NAMES</span><br><span class="line"><span class="number">569026</span>bc0955   centos    <span class="string">&quot;/bin/bash&quot;</span>   About a minute ago   Up <span class="number">1</span> second                   centos03</span><br></pre></td></tr></table></figure><h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><h3 id="docker-stop"><a href="#docker-stop" class="headerlink" title="docker stop"></a>docker stop</h3><blockquote><p>查看所有的容器，容器状态为运行</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED              STATUS              PORTS     NAMES</span><br><span class="line"><span class="number">569026</span>bc0955   centos    <span class="string">&quot;/bin/bash&quot;</span>   About a minute ago   Up <span class="number">1</span> second                   centos03</span><br></pre></td></tr></table></figure><blockquote><p>关闭运行的容器</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker stop 569026bc0955</span></span><br><span class="line"><span class="number">569026</span>bc0955</span><br></pre></td></tr></table></figure><blockquote><p>再次查看所有的容器，容器状态为关闭</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                      PORTS     NAMES</span><br><span class="line"><span class="number">569026</span>bc0955   centos    <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">4</span> minutes ago   Exited (<span class="number">0</span>) <span class="number">38</span> seconds ago             centos03</span><br></pre></td></tr></table></figure><blockquote><p>停止所有正在运行的容器。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> docker stop $(<span class="built_in">sudo</span> docker ps -aq)</span><br></pre></td></tr></table></figure><h2 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h2><h3 id="docker-restart"><a href="#docker-restart" class="headerlink" title="docker restart"></a>docker restart</h3><blockquote><p>查看所有的容器，容器状态为关闭</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                      PORTS     NAMES</span><br><span class="line"><span class="number">569026</span>bc0955   centos    <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">4</span> minutes ago   Exited (<span class="number">0</span>) <span class="number">38</span> seconds ago             centos03</span><br></pre></td></tr></table></figure><blockquote><p>重启关闭的容器</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker restart 569026bc0955</span></span><br><span class="line"><span class="number">569026</span>bc0955</span><br></pre></td></tr></table></figure><blockquote><p>再次查看所有的容器，容器状态为运行</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS          PORTS     NAMES</span><br><span class="line"><span class="number">569026</span>bc0955   centos    <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">6</span> minutes ago   Up <span class="number">20</span> seconds             centos03</span><br></pre></td></tr></table></figure><h2 id="杀掉容器"><a href="#杀掉容器" class="headerlink" title="杀掉容器"></a>杀掉容器</h2><h3 id="docker-kill"><a href="#docker-kill" class="headerlink" title="docker kill"></a>docker kill</h3><blockquote><p>查看所有的容器，容器状态为运行</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS          PORTS     NAMES</span><br><span class="line"><span class="number">569026</span>bc0955   centos    <span class="string">&quot;/bin/bash&quot;</span>   <span class="number">6</span> minutes ago   Up <span class="number">20</span> seconds             centos03</span><br></pre></td></tr></table></figure><blockquote><p>杀掉运行的容器</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">sail</span> ~]<span class="comment"># docker kill 569026bc0955</span></span><br><span class="line"><span class="number">569026</span>bc0955</span><br></pre></td></tr></table></figure><blockquote><p>再次查看所有的容器，容器状态为关闭</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@sail ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                        PORTS     NAMES</span><br><span class="line">569026bc0955   centos    <span class="string">&quot;/bin/bash&quot;</span>   8 minutes ago   Exited (137) 15 seconds ago             centos03</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Docker介绍</title>
      <link href="/posts/b1a6a586.html"/>
      <url>/posts/b1a6a586.html</url>
      
        <content type="html"><![CDATA[<aside>💡 小小docker，怕什么</aside><h1 id="为什么要用Docker？，Docker的历史"><a href="#为什么要用Docker？，Docker的历史" class="headerlink" title="为什么要用Docker？，Docker的历史"></a>为什么要用Docker？，Docker的历史</h1><h2 id="工作中的困扰"><a href="#工作中的困扰" class="headerlink" title="工作中的困扰"></a>工作中的困扰</h2><blockquote><p>在研发工作中，想必都有这样的场景</p></blockquote><p><strong>测试</strong>：生产环境发版后又出问题了。</p><p><strong>运维</strong>：我是按照开发给的包部署的。</p><p><strong>开发</strong>：我本地没问题呀。</p><p>一款产品，<strong>开发</strong>和<strong>生产</strong>两套环境，运维人员环境配置费时费力，且很容易出现问题。</p><p>出现问题后，开发人员和运维人员排查问题都是十分痛苦的，因为一个产品往往涉及到诸多环境，可能产生影响的因素实在太多。</p><blockquote><p>寻求解决</p></blockquote><p>要是能够把<strong>代码</strong>和<strong>环境</strong>一块提供，运维人员拿来就直接运行，这个问题就迎刃而解了。</p><p>这就是所谓<strong>开发即运维</strong>，既能保证系统稳定性，也能提高部署效率。</p><p>为解决这一问题，<a href="https://baike.baidu.com/item/Docker">Docker</a> 横空出世。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.9kg7ecqr50.webp" alt="image.png"></p><p>官网：<a href="https://www.docker.com/">https://www.docker.com/</a></p><p>文档：<a href="https://docs.docker.com/docker-for-windows/">https://docs.docker.com/docker-for-windows/</a></p><p>命令：<a href="https://docs.docker.com/engine/reference/run/">https://docs.docker.com/engine/reference/run/</a></p><p>仓库：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>Docker 是一个开源的应用容器引擎。</p><p>Docker 的思想来自于集装箱，彼此之间隔离。</p><p>Docker 通过隔离机制，可以将服务器利用到极致。</p><p>Docker 容器完全使用沙箱机制，相互之间不会有任何接口。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.92q5prskwk.webp" alt="image.png"></p><ul><li><strong>镜像</strong>（image）：Docker 镜像好比一个模板，可以用来创建<strong>容器</strong>（container），一个镜像可以创建多个容器。</li><li><strong>容器</strong>（container）：容器可以理解为一个微型的系统。</li><li><strong>仓库</strong>（repository）：存放镜像的地方。</li></ul><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p>Docker 是一个 <strong>Client-Server</strong> 结构的系统。</p><p>Docker 的守护进程运行在主机上，通过 Socket 从客户端访问。</p><p>Docker Server 接受 <strong>Docker-Client</strong> 的指令。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.86toabj92o.webp" alt="image.png"></p><h2 id="和虚拟机的区别"><a href="#和虚拟机的区别" class="headerlink" title="和虚拟机的区别"></a>和虚拟机的区别</h2><p>Docker所使用的<strong>容器化技术</strong>本质上属于<strong>虚拟化技术</strong>。</p><p>提到虚拟化技术，最有名的就是<strong>虚拟机技术</strong>。</p><blockquote><p>虚拟机原理示意图</p></blockquote><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.7p3mlql3iq.webp" alt="image.png"></p><p>它有以下明显的缺点：</p><ul><li><strong>资源占用多</strong>。启动虚拟机非常占内存，对电脑资源有不小的占用。</li><li><strong>冗余步骤多</strong>。启动虚拟机后，还需要进行一些步骤才能进入系统，效率比较低。</li><li><strong>启动很慢</strong>。由于虚拟机是虚拟化一整个系统，其启动时间会比较缓慢，一般都需要几分钟。</li></ul><blockquote><p>容器化原理示意图</p></blockquote><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.9dczixc2wg.webp" alt="image.png"></p><p>它不是模拟的完整操作系统，而是基于操作系统封装成了一个个小的运行环境。</p><blockquote><p>区别</p></blockquote><table><thead><tr><th></th><th>传统虚拟机</th><th>Docker</th></tr></thead><tbody><tr><td>虚拟内容</td><td>硬件 + 完整的操作系统 + 软件</td><td>APP + LIB</td></tr><tr><td>大小</td><td>笨重，通常几个 G</td><td>轻便几个 M 或 KB</td></tr><tr><td>启动速度</td><td>慢，分钟级</td><td>快，秒级</td></tr></tbody></table><blockquote><p>Docker 为什么比 VM 快</p></blockquote><p><img src="https://filebed.fantasyke.cn/file/blogContent/docker/image.5mntxonea4.webp" alt="image.png"></p><p>Docker 有着比 VM 更少的抽象层。</p><p>Docker 主要用的是宿主机的内核，而 VM 需要 <strong>Guest OS</strong>。</p><p>新建容器的时候，Docker 不需要像 VM 一样重新加载一个操作系统内核，避免了引导的过程。</p><h1 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="卸载老版本的docker"><a href="#卸载老版本的docker" class="headerlink" title="卸载老版本的docker"></a>卸载老版本的docker</h3><aside>💡 yum remove docker \docker-client \docker-client-latest \docker-common \docker-latest \docker-latest-logrotate \docker-logrotate \docker-engine</aside><h3 id="下载需要的安装包"><a href="#下载需要的安装包" class="headerlink" title="下载需要的安装包"></a>下载需要的安装包</h3><blockquote><p>yum install -y yum-utils</p></blockquote><h3 id="设置镜像的仓库"><a href="#设置镜像的仓库" class="headerlink" title="设置镜像的仓库"></a>设置镜像的仓库</h3><blockquote><h1 id="设置阿里云的Docker镜像仓库"><a href="#设置阿里云的Docker镜像仓库" class="headerlink" title="设置阿里云的Docker镜像仓库"></a>设置阿里云的Docker镜像仓库</h1><p>yum-config-manager</p><p> –add-repo</p><p> <a href="https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p></blockquote><h3 id="更新yum软件包索引"><a href="#更新yum软件包索引" class="headerlink" title="更新yum软件包索引"></a>更新yum软件包索引</h3><blockquote><p>yum makecache fast</p></blockquote><h3 id="安装docker相关的配置"><a href="#安装docker相关的配置" class="headerlink" title="安装docker相关的配置"></a>安装docker相关的配置</h3><h3 id="docker-ce-是社区版，docker-ee-企业版"><a href="#docker-ce-是社区版，docker-ee-企业版" class="headerlink" title="docker-ce 是社区版，docker-ee 企业版"></a>docker-ce 是社区版，docker-ee 企业版</h3><blockquote><p>yum install docker-ce docker-ce-cli containerd.io</p></blockquote><h2 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker  <span class="comment">#启动</span></span><br><span class="line"></span><br><span class="line">docker version  <span class="comment">#查看当前版本号，是否启动成功</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> docker <span class="comment">#设置开机自启动</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning by teaching --- 费曼学习法</title>
      <link href="/posts/51102.html"/>
      <url>/posts/51102.html</url>
      
        <content type="html"><![CDATA[<p>世界上存在成千上万种学习法，如果上天只让我掌握一种，那一定就是“费曼学习法”。</p><span id="more"></span><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>费曼学习法是由诺贝尔物理学奖获得者理查德·费曼提出的一种学习方法，其核心思想是将所学内容用自己的话表达出来，以此检验自己对知识的掌握程度。</p><p>费曼学习法可以简化为四个单词：<strong>Concept</strong>、<strong>Teach</strong>、<strong>Review</strong>、<strong>Simplify</strong></p><p>具体而言，费曼学习法包括以下几个步骤：</p><ul><li><p><strong>Concept</strong>：选择一个主题，并尽可能全面地了解这个主题；</p></li><li><p><strong>Teach</strong>：将所学内容以简明易懂的语言写下来或讲述给别人听，使用通俗易懂的语言和例子，避免使用学术术语和复杂的句子；</p></li><li><p><strong>Review</strong>：检查自己的表达是否清晰明了，是否有遗漏或错误；</p></li><li><p><strong>Simplify</strong>：基于反馈修正自己的表达，直到能够清晰表达该主题。</p></li></ul><p>其优点是：</p><ul><li><p>突出重点：在解释一个概念时，我们不得不选取最重要的信息，并将其用自己的话表达出来。这种方式可以帮助我们更好地理解和记忆知识点。</p></li><li><p>发现问题：当我们尝试用自己的话阐述某个主题时，常常会发现自己对某些内容并不理解或者存在疑问。这种方式可以帮助我们及时发现自己的盲点和问题，促进深层次的学习。</p></li><li><p>加深印象：通过不断反复的讲解和修正，我们能够形成对于某个主题的深层次理解，并加深对于相关概念的印象。</p></li></ul><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>美国学术界在1946年一项研究显示了不同学习方式的效益，准确的说，是学习者在两周以后还能记住内容（平均学习保持率）的多少。</p><p>下图是当时美国教育学家Engar Dale研究出的“学习金字塔”（The Cone of Learning）。</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/a270baa53b9f0798e17123dc62717220.image.png" alt="image.png"></p><p>由上图可以看出，<strong>Learning by teaching 可以说是学习效率最高的方式</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 建造者模式</title>
      <link href="/posts/9489.html"/>
      <url>/posts/9489.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>建造者模式</strong>是一种创建型设计模式，它可以将一个复杂对象的构建过程和表示分离，使得相同的构建过程可以创建不同的表示，以及不同的构建过程可以创建相同的表示</p><span id="more"></span><p>在实际的开发中，我们有时需要创建一些复杂的对象，例如包含多个组件和属性的对象，这时候如果直接在代码中创建对象，代码的可读性和可维护性都会降低。而使用建造者模式可以将对象的创建过程封装在一个建造者类中，使得代码更加清晰和易于维护。</p><p>下面我们使用C#语言来实现建造者模式。我们以创建一台电脑为例，电脑包含CPU、内存、硬盘等组件。</p><h3 id="组件类"><a href="#组件类" class="headerlink" title="组件类"></a>组件类</h3><p>首先我们需要定义电脑的组件类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CPU</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Memory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Size &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HardDisk</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Capacity &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂目标类"><a href="#复杂目标类" class="headerlink" title="复杂目标类"></a>复杂目标类</h3><p>定义一个电脑类，该类包含CPU、内存、硬盘等组件：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Computer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> CPU CPU &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Memory Memory &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> HardDisk HardDisk &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建造者类"><a href="#建造者类" class="headerlink" title="建造者类"></a>建造者类</h3><p>定义一个建造者类，该类用于创建电脑对象：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ComputerBuilder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Computer _computer = <span class="keyword">new</span> Computer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComputerBuilder <span class="title">SetCPU</span>(<span class="params"><span class="built_in">string</span> type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _computer.CPU = <span class="keyword">new</span> CPU &#123; Type = type &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComputerBuilder <span class="title">SetMemory</span>(<span class="params"><span class="built_in">int</span> size</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _computer.Memory = <span class="keyword">new</span> Memory &#123; Size = size &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComputerBuilder <span class="title">SetHardDisk</span>(<span class="params"><span class="built_in">int</span> capacity</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _computer.HardDisk = <span class="keyword">new</span> HardDisk &#123; Capacity = capacity &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">Build</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在建造者类中，我们定义了<code>SetCPU</code>、<code>SetMemory</code>、<code>SetHardDisk</code>等方法用于设置电脑的各个组件，并且在<code>Build</code>方法中返回最终创建的电脑对象。</p><p>最后我们可以使用建造者类创建电脑对象：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> computerBuilder = <span class="keyword">new</span> ComputerBuilder();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> computer = computerBuilder</span><br><span class="line">    .SetCPU(<span class="string">&quot;Intel Core i7&quot;</span>)</span><br><span class="line">    .SetMemory(<span class="number">16</span>)</span><br><span class="line">    .SetHardDisk(<span class="number">512</span>)</span><br><span class="line">    .Build();</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用建造者模式，我们将电脑的创建过程封装在了建造者类中，使得代码更加清晰和易于维护。同时，我们可以通过设置不同的组件来创建不同的电脑对象，使得代码具有更好的可扩展性和复用性。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 工厂方法模式</title>
      <link href="/posts/61427.html"/>
      <url>/posts/61427.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>工厂方法模式</strong>是一种创建型设计模式，它定义了一个用于创建对象的接口，但是让子类决定将哪一个类实例化。换句话说，工厂方法模式让一个类的实例化延迟到其子类。</p><span id="more"></span><p>工厂方法模式有以下几个主要角色：</p><ul><li><p>抽象工厂（AbstractFactory）：声明用于创建抽象产品的操作的接口。</p></li><li><p>工厂实现（ConcreteFactory）：实现创建具体产品对象的操作。</p></li><li><p>抽象产品（AbstractProduct）：声明产品对象类型的接口。</p></li><li><p>产品实现（Product）：定义由相应的具体工厂创建的产品对象，实现AbstractProduct接口。</p></li></ul><p>下面使用c#实现一个工厂方法模式：</p><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Factory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">CreateProduct</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂实现"><a href="#工厂实现" class="headerlink" title="工厂实现"></a>工厂实现</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteFactoryA</span> : <span class="title">Factory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Product <span class="title">CreateProduct</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductA();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteFactoryB</span> : <span class="title">Factory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Product <span class="title">CreateProduct</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象产品"><a href="#抽象产品" class="headerlink" title="抽象产品"></a>抽象产品</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Product</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ShowInfo</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="产品实现"><a href="#产品实现" class="headerlink" title="产品实现"></a>产品实现</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体产品类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteProductA</span> : <span class="title">Product</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ShowInfo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;This is product A.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteProductB</span> : <span class="title">Product</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ShowInfo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;This is product B.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面可以这样调用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ConcreteFactoryA();</span><br><span class="line"> Product productA = factoryA.CreateProduct();</span><br><span class="line"> productA.ShowInfo();</span><br><span class="line"> </span><br><span class="line"> Factory factoryB = <span class="keyword">new</span> ConcreteFactoryB();</span><br><span class="line"> Product productB = factoryB.CreateProduct();</span><br><span class="line"> productB.ShowInfo();</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">is</span> product A.</span><br><span class="line">This <span class="keyword">is</span> product B.</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>Product</code> 是抽象产品类，<code>ConcreteProductA</code> 和 <code>ConcreteProductB</code> 是具体产品类，<code>Factory</code> 是抽象工厂类，<code>ConcreteFactoryA</code> 和 <code>ConcreteFactoryB</code> 是具体工厂类。客户端代码使用工厂类创建产品对象，并调用其方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当需要添加新的产品时，只需创建一个新的具体产品类，并实现抽象产品类中的抽象方法即可。当需要添加新的工厂时，只需创建一个新的具体工厂类，并实现抽象工厂类中的抽象方法即可。这样，客户端代码就不需要改变。这也是工厂方法模式的一个重要优点，它让代码更加灵活，易于扩展和维护。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 抽象工厂模式</title>
      <link href="/posts/19162.html"/>
      <url>/posts/19162.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>抽象工厂模式</strong>一种创建型设计模式，它提供了一种方式来封装一组具有相同主题的工厂，而不必指定它们具体的类。这样，客户端代码就可以使用抽象工厂来创建一组相关的对象，而不必关心实际创建的具体类。</p><span id="more"></span><p>抽象工厂模式有以下几个主要角色：</p><ul><li><p>抽象工厂（AbstractFactory）：声明用于创建抽象产品的操作的接口。</p></li><li><p>工厂实现（ConcreteFactory）：实现创建具体产品对象的操作。</p></li><li><p>抽象产品（AbstractProduct）：声明产品对象类型的接口。</p></li><li><p>产品实现（Product）：定义由相应的具体工厂创建的产品对象，实现AbstractProduct接口。</p></li></ul><p>下面使用C#实现抽象工厂模式:</p><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>定义一个抽象工厂接口，其中包含了创建不同产品的方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IProductA <span class="title">CreateProductA</span>()</span>;</span><br><span class="line">    <span class="function">IProductB <span class="title">CreateProductB</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂实现"><a href="#工厂实现" class="headerlink" title="工厂实现"></a>工厂实现</h3><p>定义具体的工厂类，实现抽象工厂接口：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteFactory1</span> : <span class="title">IAbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProductA <span class="title">CreateProductA</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductA1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProductB <span class="title">CreateProductB</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductB1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteFactory2</span> : <span class="title">IAbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProductA <span class="title">CreateProductA</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductA2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IProductB <span class="title">CreateProductB</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductB2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，我们定义了两个具体工厂类：<code>ConcreteFactory1</code>和<code>ConcreteFactory2</code>。这两个工厂类都实现了<code>IAbstractFactory</code>接口，并且分别提供了不同的产品实现。</p><h3 id="抽象产品"><a href="#抽象产品" class="headerlink" title="抽象产品"></a>抽象产品</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IProductA</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetName</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="产品实现"><a href="#产品实现" class="headerlink" title="产品实现"></a>产品实现</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteProductA1</span> : <span class="title">IProductA</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ProductA1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteProductA2</span> : <span class="title">IProductA</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ProductA2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IProductB</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetName</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteProductB1</span> : <span class="title">IProductB</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ProductB1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteProductB2</span> : <span class="title">IProductB</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetName</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ProductB2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面，我们可以使用抽象工厂来创建一组相关的对象：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IAbstractFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span>(<span class="params">IAbstractFactory factory</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> productA = factory.CreateProductA();</span><br><span class="line">        <span class="keyword">var</span> productB = factory.CreateProductB();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(productA.GetName());</span><br><span class="line">        Console.WriteLine(productB.GetName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> client1 = <span class="keyword">new</span> Client(<span class="keyword">new</span> ConcreteFactory1());</span><br><span class="line">    client1.Run();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> client2 = <span class="keyword">new</span> Client(<span class="keyword">new</span> ConcreteFactory2());</span><br><span class="line">    client2.Run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 备忘录模式</title>
      <link href="/posts/35464.html"/>
      <url>/posts/35464.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>备忘录模式</strong>是一种行为型设计模式，它允许你捕获对象的内部状态，并在不暴露其实现细节的情况下将其保存在外部对象中，从而可以在以后的某个时间点将该对象恢复到先前的状态。</p><span id="more"></span><p>备忘录模式有以下几个主要角色：</p><ul><li><p><strong>Originator（原发器）</strong>：是需要被保存状态的对象。它可以创建一个Memento对象来存储它的当前状态，并从Memento对象中恢复它之前的状态。</p></li><li><p><strong>Memento（备忘录）</strong>：存储Originator的内部状态。只有Originator可以访问和修改它的状态，外部对象不能访问和修改它。</p></li><li><p><strong>Caretaker（管理者）</strong>：负责保存和恢复Originator的状态。它保存了Originator的历史状态列表，并提供了一个接口来保存和恢复这些状态。</p></li></ul><p>这些角色协同工作，使得Originator对象可以在不暴露其实现细节的情况下保存和恢复其状态。备忘录模式提供了一种灵活的方式，可以在多个时间点保存对象的状态，并可以在以后的某个时间点恢复到任何先前的状态。</p><p>下面使用c#实现一个简单备忘录模式：</p><h3 id="定义原发器类"><a href="#定义原发器类" class="headerlink" title="定义原发器类"></a>定义原发器类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Originator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> State</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> state; &#125;</span><br><span class="line">        <span class="keyword">set</span> </span><br><span class="line">        &#123; </span><br><span class="line">            state = <span class="keyword">value</span>; </span><br><span class="line">            Console.WriteLine(<span class="string">&quot;State set to: &quot;</span> + state); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">SaveState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RestoreState</span>(<span class="params">Memento memento</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        state = memento.State;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;State restored to: &quot;</span> + state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义备忘录"><a href="#定义备忘录" class="headerlink" title="定义备忘录"></a>定义备忘录</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Memento</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span>(<span class="params"><span class="built_in">string</span> stateToSave</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        state = stateToSave;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> State</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> state; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义管理者"><a href="#定义管理者" class="headerlink" title="定义管理者"></a>定义管理者</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Caretaker</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Memento&gt; mementoList = <span class="keyword">new</span> List&lt;Memento&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaveState</span>(<span class="params">Memento state</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        mementoList.Add(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">RestoreState</span>(<span class="params"><span class="built_in">int</span> stateNumber</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> mementoList[stateNumber];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Originator();</span><br><span class="line">Caretaker caretaker = <span class="keyword">new</span> Caretaker();</span><br><span class="line"></span><br><span class="line">originator.State = <span class="string">&quot;State 1&quot;</span>;</span><br><span class="line">originator.State = <span class="string">&quot;State 2&quot;</span>;</span><br><span class="line">caretaker.SaveState(originator.SaveState());</span><br><span class="line"></span><br><span class="line">originator.State = <span class="string">&quot;State 3&quot;</span>;</span><br><span class="line">caretaker.SaveState(originator.SaveState());</span><br><span class="line"></span><br><span class="line">originator.State = <span class="string">&quot;State 4&quot;</span>;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Current state: &quot;</span> + originator.State);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复到之前的状态</span></span><br><span class="line">originator.RestoreState(caretaker.RestoreState(<span class="number">1</span>));</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Restored state: &quot;</span> + originator.State);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set to: State 1</span><br><span class="line">State set to: State 2</span><br><span class="line">State set to: State 3</span><br><span class="line">State set to: State 4</span><br><span class="line">Current state: State 4</span><br><span class="line">State restored to: State 3</span><br><span class="line">Restored state: State 3</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Originator</code>是一个保存状态的对象，它的状态被保存到<code>Memento</code>对象中。<code>Caretaker</code>保存了<code>Originator</code>的历史状态列表，并提供了保存和恢复这些状态的方法。当需要恢复之前的状态时，<code>Caretaker</code>通过调用<code>RestoreState</code>方法来获取<code>Memento</code>对象，并将其传递给<code>Originator</code>的<code>RestoreState</code>方法，从而将Originator恢复到之前的状态。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>备忘录模式的优点是它可以在不暴露对象实现细节的情况下保存和恢复对象的状态。它还允许对象在多个时间点保存它的状态，并恢复到之前的任何时间点。缺点是如果保存的状态非常大，它可能会占用大量的内存。此外，备忘录模式会增加代码的复杂性和开销。</p><p>在实际应用中，备忘录模式通常与其他模式一起使用，例如命令模式和状态模式，以实现更复杂的行为。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 访问者模式</title>
      <link href="/posts/45547.html"/>
      <url>/posts/45547.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>访问者模式</strong>是一种行为型设计模式，它允许你在不修改对象结构的前提下定义作用于这些对象元素的新操作。它主要解决了在不修改已有类的前提下，对已有类中的对象进行新操作的问题。</p><span id="more"></span><p>访问者模式有以下几个主要角色：</p><ul><li><p>访问者（Visitor）：访问者角色是一个抽象类或接口，其中定义了访问每个被访问元素时所需要执行的操作。具体访问者角色则实现了访问者接口，并根据需要实现其操作。</p></li><li><p>被访问元素（Element）：被访问元素角色是一个抽象类或接口，其中定义了接受访问者访问的接口。具体的被访问元素角色则实现了被访问元素接口，并实现其方法。</p></li></ul><p>下面使用C#实现一个访问者模式：</p><h3 id="定义访问者"><a href="#定义访问者" class="headerlink" title="定义访问者"></a>定义访问者</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问者接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IVisitor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Visit</span>(<span class="params">ElementA element</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Visit</span>(<span class="params">ElementB element</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体访问者1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreteVisitor1</span> : <span class="title">IVisitor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Visit</span>(<span class="params">ElementA element</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ConcreteVisitor1 is visiting ElementA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Visit</span>(<span class="params">ElementB element</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ConcreteVisitor1 is visiting ElementB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体访问者2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreteVisitor2</span> : <span class="title">IVisitor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Visit</span>(<span class="params">ElementA element</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ConcreteVisitor2 is visiting ElementA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Visit</span>(<span class="params">ElementB element</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ConcreteVisitor2 is visiting ElementB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，访问者角色由接口<code>IVisitor</code>表示，其中定义了<code>Visit</code>方法，用于访问被访问元素。具体访问者<code>ConcreteVisitor1</code>和<code>ConcreteVisitor2</code>则实现了<code>IVisitor</code>接口，并根据需要实现了<code>Visit</code>方法。</p><h3 id="定义被访问元素"><a href="#定义被访问元素" class="headerlink" title="定义被访问元素"></a>定义被访问元素</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被访问元素接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IElement</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">IVisitor visitor</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体被访问元素A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ElementA</span> : <span class="title">IElement</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">IVisitor visitor</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        visitor.Visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体被访问元素B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ElementB</span> : <span class="title">IElement</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Accept</span>(<span class="params">IVisitor visitor</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        visitor.Visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被访问元素角色由接口IElement表示，其中定义了Accept方法，用于接受访问者的访问。具体的被访问元素ElementA和ElementB则实现了IElement接口，并实现了Accept方法，其中调用了访问者的Visit方法。</p><p>我们可以这样调用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建被访问元素</span></span><br><span class="line"> ElementA elementA = <span class="keyword">new</span> ElementA();</span><br><span class="line"> ElementB elementB = <span class="keyword">new</span> ElementB();</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 创建访问者</span></span><br><span class="line"> IVisitor visitor1 = <span class="keyword">new</span> ConcreteVisitor1();</span><br><span class="line"> IVisitor visitor2 = <span class="keyword">new</span> ConcreteVisitor2();</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 访问被访问元素</span></span><br><span class="line"> elementA.Accept(visitor1);</span><br><span class="line"> elementA.Accept(visitor2);</span><br><span class="line"> elementB.Accept(visitor1);</span><br><span class="line"> elementB.Accept(visitor2);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">is visiting ElementA</span><br><span class="line">ConcreteVisitor2 is visiting ElementA</span><br><span class="line">ConcreteVisitor1 is visiting ElementB</span><br><span class="line">ConcreteVisitor2 is visiting ElementB</span><br></pre></td></tr></table></figure><p>示例中创建了被访问元素ElementA和ElementB，然后创建了访问者visitor1和visitor2。最后，分别调用了被访问元素的Accept方法，以及访问者的Visit方法，完成了访问操作。</p><p>:::tip{title&#x3D;”提示”}<br>需要注意的是，访问者是通过被访问元素的Accept方法进行访问的。因此，在访问者访问一个被访问元素时，该被访问元素会调用访问者的Visit方法，而不是访问者自行调用被访问元素的方法。<br>:::</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>访问者模式的优点在于，它能够在不修改被访问元素的前提下，定义新的操作。同时，它也符合单一职责原则，因为每个具体的访问者只负责实现一个操作。但是，访问者模式的缺点在于，它增加了系统的复杂度，因为访问者需要了解被访问元素的内部结构，而且在被访问元素的结构发生变化时，需要修改访问者的代码。此外，访问者模式还可能导致循环依赖的问题，因为被访问元素和访问者都需要引用彼此的类。</p><p>总的来说，访问者模式是一种灵活的设计模式，可以用于在不修改已有类的前提下，定义新的操作。它的应用场景包括编译器、XML解析器、图形界面组件等需要对对象结构进行操作的系统。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 解释器模式</title>
      <link href="/posts/28605.html"/>
      <url>/posts/28605.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>解释器模式</strong>是一种行为型设计模式，它允许你定义一个语言的文法，并且定义一个解释器来解释该语言中的句子。该模式可以用于编写编译器、计算器、查询语言等应用程序。</p><span id="more"></span><p>解释器模式中有以下三个主要角色：</p><ul><li><p><strong>抽象表达式（Abstract Expression）</strong>：它是所有表达式的抽象基类，它声明了一个<code>Interpret</code>方法，用于解释表达式。</p></li><li><p><strong>终结符表达式（Terminal Expression</strong>）：它实现了抽象表达式中的 <code>Interpret</code>方法，并且代表语言中的终结符（即不再需要解释的元素）。</p></li><li><p><strong>非终结符表达式（Nonterminal Expression）</strong>：它也实现了抽象表达式中的<code>Interpret</code>方法，但它代表语言中的非终结符（即需要解释的元素），通常会由多个终结符表达式和&#x2F;或其他非终结符表达式组合而成。</p></li><li><p><strong>上下文（Content）</strong>：包含解释器的全局信息。</p></li></ul><p>下面使用c#实现一个简单解释器模式：</p><h3 id="定义抽象表达式类"><a href="#定义抽象表达式类" class="headerlink" title="定义抽象表达式类"></a>定义抽象表达式类</h3><p>定义抽象表达式类（AbstractExpression），它包含一个 Interpret 方法，该方法将接受一个 Context 对象，并使用该对象来解释语言中的句子。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractExpression</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">int</span> <span class="title">Interpret</span>(<span class="params">Context context</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义终结符表达式类"><a href="#定义终结符表达式类" class="headerlink" title="定义终结符表达式类"></a>定义终结符表达式类</h3><p>定义终结符表达式类（<code>TerminalExpression</code>），它实现了抽象表达式类中的 <code>Interpret</code> 方法，并且表示语言中的终结符（即不再需要解释的元素）。在该类中，我们使用 <code>Context</code> 对象来获取终结符的值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TerminalExpression</span> : <span class="title">AbstractExpression</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _variable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TerminalExpression</span>(<span class="params"><span class="built_in">string</span> variable</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _variable = variable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">Interpret</span>(<span class="params">Context context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> context.GetValue(_variable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义非终结符表达式类"><a href="#定义非终结符表达式类" class="headerlink" title="定义非终结符表达式类"></a>定义非终结符表达式类</h3><p>定义非终结符表达式类（<code>NonterminalExpression</code>），它也实现了抽象表达式类中的 <code>Interpret</code> 方法，但它代表语言中的非终结符（即需要解释的元素）。在该类中，我们使用左右两个表达式来计算表达式的值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NonterminalExpression</span> : <span class="title">AbstractExpression</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractExpression _leftExpression;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> AbstractExpression _rightExpression;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NonterminalExpression</span>(<span class="params">AbstractExpression leftExpression, AbstractExpression rightExpression</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _leftExpression = leftExpression;</span><br><span class="line">        </span><br><span class="line">        _rightExpression = rightExpression;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">Interpret</span>(<span class="params">Context context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> leftValue = _leftExpression.Interpret(context);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">int</span> rightValue = _rightExpression.Interpret(context);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> leftValue + rightValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义上下文类"><a href="#定义上下文类" class="headerlink" title="定义上下文类"></a>定义上下文类</h3><p>定义一个<code>Context</code>类，它保存着当前语言的状态，并且提供一些方法来获取变量的值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Context</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; _variables = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetVariable</span>(<span class="params"><span class="built_in">string</span> variable, <span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _variables[variable] = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetValue</span>(<span class="params"><span class="built_in">string</span> variable</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _variables[variable];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用时，构建一个语法树，并且使用 Context 对象来解释句子：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Context();</span><br><span class="line">context.SetVariable(<span class="string">&quot;a&quot;</span>, <span class="number">10</span>);</span><br><span class="line">context.SetVariable(<span class="string">&quot;b&quot;</span>, <span class="number">5</span>);</span><br><span class="line">context.SetVariable(<span class="string">&quot;c&quot;</span>, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">AbstractExpression expression = <span class="keyword">new</span> NonterminalExpression(</span><br><span class="line">    <span class="keyword">new</span> TerminalExpression(<span class="string">&quot;a&quot;</span>),</span><br><span class="line">    <span class="keyword">new</span> NonterminalExpression(</span><br><span class="line">        <span class="keyword">new</span> TerminalExpression(<span class="string">&quot;b&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> TerminalExpression(<span class="string">&quot;c&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> result = expression.Interpret(context);</span><br><span class="line">Console.WriteLine(result); <span class="comment">// 输出：30</span></span><br></pre></td></tr></table></figure><p>上面的示例中我们定义了一个简单的语言，它只包含加法运算。我们通过构建一个语法树，并调用解释器来解释语言中的句子，从而实现了解释器模式。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>解释器模式允许你定义一个语言的语法，并且定义一个解释器来解释该语言中的句子。它可以灵活地扩展语言的语法，只需要添加新的抽象表达式和终止符表达式即可。但是它因为在解释过程中需要对语法树进行遍历，可能会降低程序的性能。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 中介者模式</title>
      <link href="/posts/35233.html"/>
      <url>/posts/35233.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>中介者模式</strong>是一种行为型设计模式，它用于减少对象之间的直接耦合，从而更好地维护代码的可扩展性和可维护性。</p><span id="more"></span><p>在中介者模式中，一个中介者对象封装了一组对象之间的交互逻辑，这些对象通常都有相互关联，但是彼此之间并不直接交互。中介者对象负责协调对象之间的通信，将对象之间的通信逻辑封装在中介者对象中，从而避免对象之间的直接耦合。</p><p>中介者模式中有以下几个主要角色：</p><ul><li><p>抽象中介者（Mediator）：定义了同事对象之间交互的接口，它通常是一个接口或者抽象类，其中声明了同事对象之间交互所需要的方法。抽象中介者可以用来集中处理同事对象之间的通信，降低系统的耦合度。</p></li><li><p>具体中介者（ConcreteMediator）：实现了抽象中介者接口，通常包含了一个集合用来存储同事对象，实现同事对象之间的协作。具体中介者需要知道所有具体同事类，并从具体同事对象接收消息，向其他具体同事对象发出命令。</p></li><li><p>抽象同事类（Colleague）：定义了同事对象的接口，可以是一个抽象类或者接口，其中定义了一些公共的方法和属性。抽象同事类通常持有一个抽象中介者的引用，以便能够将自己的状态变化通知中介者，同时也可以接收中介者发送的消息。</p></li><li><p>具体同事类（ConcreteColleague）：实现了抽象同事类的接口，是实际的参与者，每个具体同事类都需要知道它的中介者对象，并与其进行交互。具体同事类之间的通信都是通过具体中介者来实现的，它们之间不直接交互。</p></li></ul><p>下面使用C#实现简答中介者模式：</p><h3 id="抽象中介者"><a href="#抽象中介者" class="headerlink" title="抽象中介者"></a>抽象中介者</h3><p>创建抽象中介者接口Mediator，该接口声明了一个方法Send用于发送消息:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Mediator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> message, Colleague colleague</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象同事类"><a href="#抽象同事类" class="headerlink" title="抽象同事类"></a>抽象同事类</h3><p>创建抽象同事类Colleague，该类声明了一个中介者对象，用于与其他同事类交互：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Colleague</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Colleague</span>(<span class="params">Mediator mediator</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> message</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Notify</span>(<span class="params"><span class="built_in">string</span> message</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体同事类"><a href="#具体同事类" class="headerlink" title="具体同事类"></a>具体同事类</h3><p>创建具体同事类ConcreteColleagueA和ConcreteColleagueB，它们实现了抽象同事类Colleague，并实现了发送消息和接收消息的方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteColleagueA</span> : <span class="title">Colleague</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleagueA</span>(<span class="params">Mediator mediator</span>) : <span class="title">base</span>(<span class="params">mediator</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        mediator.Send(message, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Notify</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ColleagueA received message: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteColleagueB</span> : <span class="title">Colleague</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleagueB</span>(<span class="params">Mediator mediator</span>) : <span class="title">base</span>(<span class="params">mediator</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        mediator.Send(message, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Notify</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ColleagueB received message: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体中介者类"><a href="#具体中介者类" class="headerlink" title="具体中介者类"></a>具体中介者类</h3><p>创建具体中介者类ConcreteMediator，该类实现了抽象中介者接口Mediator，并维护了一组同事类对象：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteMediator</span> : <span class="title">Mediator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ConcreteColleagueA colleagueA;</span><br><span class="line">    <span class="keyword">private</span> ConcreteColleagueB colleagueB;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ConcreteColleagueA ColleagueA</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; colleagueA = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ConcreteColleagueB ColleagueB</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123; colleagueB = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> message, Colleague colleague</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (colleague == colleagueA)</span><br><span class="line">        &#123;</span><br><span class="line">            colleagueB.Notify(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            colleagueA.Notify(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以这样调用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ConcreteMediator();</span><br><span class="line"></span><br><span class="line">ConcreteColleagueA colleagueA = <span class="keyword">new</span> ConcreteColleagueA(mediator);</span><br><span class="line">ConcreteColleagueB colleagueB = <span class="keyword">new</span> ConcreteColleagueB(mediator);</span><br><span class="line"></span><br><span class="line">mediator.ColleagueA = colleagueA;</span><br><span class="line">mediator.ColleagueB = colleagueB;</span><br><span class="line"></span><br><span class="line">colleagueA.Send(<span class="string">&quot;Hello, ColleagueB.&quot;</span>);</span><br><span class="line">colleagueB.Send(<span class="string">&quot;Hello, ColleagueA.&quot;</span>);</span><br></pre></td></tr></table></figure><p>输出：</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 模板方法模式</title>
      <link href="/posts/12602.html"/>
      <url>/posts/12602.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>模板方法模式</strong>是一种行为设计模式，它定义了一个算法的骨架，将一些步骤延迟到子类中实现，以达到代码复用和减少重复代码的目的。</p><span id="more"></span><p>当我们使用模板方法模式时，我们可以将一些公共的算法步骤放在抽象基类中，这些步骤可以在多个子类中重复使用，从而减少了代码的重复性。同时，我们可以通过子类实现抽象方法来灵活地改变算法的具体实现，从而满足不同的需求。</p><p>除此之外，模板方法模式还有以下优点：</p><ul><li>将算法的骨架与具体实现分离，提高代码的可维护性和可扩展性；</li><li>通过封装算法，可以将算法的实现细节隐藏起来，提高代码的安全性；</li><li>可以通过模板方法模式实现“好莱坞原则”，即“不要打电话给我们，我们会打电话给你”，这样可以降低组件之间的耦合度。</li></ul><p>下面使用c#实现一个模板方法模式的示例：</p><h3 id="定义抽象模板"><a href="#定义抽象模板" class="headerlink" title="定义抽象模板"></a>定义抽象模板</h3><p>定义一个抽象基类，其中包含一个模板方法和一些抽象方法，抽象方法用于延迟实现到子类中。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TemplateMethod</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// step 1</span></span><br><span class="line">        PrimitiveOperation1();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step 2</span></span><br><span class="line">        PrimitiveOperation2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step 3</span></span><br><span class="line">        PrimitiveOperation3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">PrimitiveOperation1</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">PrimitiveOperation2</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">PrimitiveOperation3</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义模板子类实现"><a href="#定义模板子类实现" class="headerlink" title="定义模板子类实现"></a>定义模板子类实现</h3><p>创建具体子类，实现抽象方法并提供自己的实现。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteClass</span> : <span class="title">AbstractClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PrimitiveOperation1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ConcreteClass.PrimitiveOperation1()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PrimitiveOperation2</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ConcreteClass.PrimitiveOperation2()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PrimitiveOperation3</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ConcreteClass.PrimitiveOperation3()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用模板方法以执行算法，这将自动调用子类实现的抽象方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ConcreteClass();</span><br><span class="line">abstractClass.TemplateMethod();</span><br></pre></td></tr></table></figure><p>输出：</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 状态模式</title>
      <link href="/posts/3308.html"/>
      <url>/posts/3308.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>状态模式</strong>是一种行为型设计模式，它允许对象在其内部状态改变时改变其行为。该模式将对象的行为与其状态分离，并将每种状态封装在不同的类中。这样，对象可以在运行时根据其状态选择不同的行为，而不必在代码中使用大量的条件语句来处理这些状态。</p><span id="more"></span><p>状态模式的优点是它将与特定状态相关的行为局部化并且将状态转换显式化，从而简化了代码，并且使得代码更加容易扩展和维护。但是，使用状态模式可能会增加类的数量，从而增加代码的复杂度。</p><p>下面用C#写一个示例，用于更好地说明状态模式的实现。</p><p>假设有一个交通信号灯系统，其中包括红灯、黄灯和绿灯三种状态。当交通信号灯处于不同状态时，将显示不同的颜色，并且行人和车辆在这些状态下必须采取不同的行动。这可以使用状态模式来实现。</p><p>首先，我们需要定义状态接口，它包含了所有状态必须实现的方法：</p><h3 id="定义状态接口"><a href="#定义状态接口" class="headerlink" title="定义状态接口"></a>定义状态接口</h3><p>定义状态接口，它包含了所有状态必须实现的方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITrafficLightState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Change</span>(<span class="params">TrafficLight trafficLight</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ReportState</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义状态实现"><a href="#定义状态实现" class="headerlink" title="定义状态实现"></a>定义状态实现</h3><p>实现红灯、黄灯和绿灯状态的具体实现：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RedLightState</span> : <span class="title">ITrafficLightState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Change</span>(<span class="params">TrafficLight trafficLight</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        trafficLight.State = <span class="keyword">new</span> GreenLightState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReportState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;现在是红灯&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">YellowLightState</span> : <span class="title">ITrafficLightState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Change</span>(<span class="params">TrafficLight trafficLight</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        trafficLight.State = <span class="keyword">new</span> RedLightState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReportState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;现在是黄灯&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GreenLightState</span> : <span class="title">ITrafficLightState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Change</span>(<span class="params">TrafficLight trafficLight</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        trafficLight.State = <span class="keyword">new</span> YellowLightState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReportState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;现在是绿灯&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述实现中，每个状态都实现了<code>ITrafficLightState</code>接口，并在<code>Change</code>方法中指定了下一个状态，以及在<code>ReportState</code>方法中输出当前状态。</p><h3 id="定义状态主对象"><a href="#定义状态主对象" class="headerlink" title="定义状态主对象"></a>定义状态主对象</h3><p>创建表示交通信号灯的主要对象，并将初始状态设置为红灯：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TrafficLight</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> ITrafficLightState State &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrafficLight</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        State = <span class="keyword">new</span> RedLightState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        State.Change(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReportState</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        State.ReportState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试红绿灯状态变化：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> TrafficLight();</span><br><span class="line">trafficLight.ReportState();  <span class="comment">// 输出 &quot;现在是红灯&quot;</span></span><br><span class="line"></span><br><span class="line">trafficLight.ChangeState();</span><br><span class="line">trafficLight.ReportState();  <span class="comment">// 输出 &quot;现在是绿灯&quot;</span></span><br><span class="line"></span><br><span class="line">trafficLight.ChangeState();</span><br><span class="line">trafficLight.ReportState();  <span class="comment">// 输出 &quot;现在是黄灯&quot;</span></span><br><span class="line"></span><br><span class="line">trafficLight.ChangeState();</span><br><span class="line">trafficLight.ReportState();  <span class="comment">// 输出 &quot;现在是红灯&quot;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，我们首先创建了一个<code>TrafficLight</code>对象，并将其初始状态设置为红灯。然后，我们调用<code>ReportState</code>方法，该方法将输出当前状态。接下来，我们多次调用<code>ChangeState</code>方法，该方法将改变当前状态，并再次调用<code>ReportState</code>方法以输出新状态。可以看到信号灯在不同的状态下采取了不同的行动。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>状态模式允许对象在不同的状态下采取不同的行动，并且在状态变化时能够自动转换行为。这种灵活性使得状态模式在许多场景中非常有用，如自动售货机、游戏中的角色状态等。</p><p>然而，状态模式也有一些缺点。一个明显的缺点是，如果我们有许多状态，我们需要实现许多具体的状态类，这可能导致代码变得复杂和难以维护。此外，当状态变化不频繁时，状态模式可能过于繁琐，并且可能不值得实现。我们需要根据具体情况权衡其优缺点，以确保在实现时能够最大程度地利用其优势并避免其缺点。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 责任链模式</title>
      <link href="/posts/47985.html"/>
      <url>/posts/47985.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>责任链模式</strong>是一种行为型设计模式，它通过一条由多个处理器组成的链来处理请求，每个处理器都有机会处理请求，如果一个处理器不能处理该请求，它会将请求传递给下一个处理器，直到请求被处理为止。</p><span id="more"></span><p>在实际应用中，责任链模式常用于处理请求的分发、事件处理等场景，它的优点在于可以动态地添加、删除处理器，从而灵活地处理请求。</p><p>下面使用C#实现的简单责任链模式的示例：</p><h3 id="抽象处理器类"><a href="#抽象处理器类" class="headerlink" title="抽象处理器类"></a>抽象处理器类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Handler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> Handler successor; <span class="comment">//下一个处理器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetSuccessor</span>(<span class="params">Handler successor</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">HandleRequest</span>(<span class="params"><span class="built_in">int</span> request</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理器实现"><a href="#处理器实现" class="headerlink" title="处理器实现"></a>处理器实现</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体处理器类1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteHandler1</span> : <span class="title">Handler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">HandleRequest</span>(<span class="params"><span class="built_in">int</span> request</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(request &gt;= <span class="number">0</span> &amp;&amp; request &lt; <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125; handled request &#123;1&#125;&quot;</span>, <span class="keyword">this</span>.GetType().Name, request);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(successor != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            successor.HandleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体处理器类2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteHandler2</span> : <span class="title">Handler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">HandleRequest</span>(<span class="params"><span class="built_in">int</span> request</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(request &gt;= <span class="number">10</span> &amp;&amp; request &lt; <span class="number">20</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125; handled request &#123;1&#125;&quot;</span>, <span class="keyword">this</span>.GetType().Name, request);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(successor != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            successor.HandleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体处理器类3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteHandler3</span> : <span class="title">Handler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">HandleRequest</span>(<span class="params"><span class="built_in">int</span> request</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(request &gt;= <span class="number">20</span> &amp;&amp; request &lt; <span class="number">30</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125; handled request &#123;1&#125;&quot;</span>, <span class="keyword">this</span>.GetType().Name, request);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(successor != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            successor.HandleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端调用"><a href="#客户端调用" class="headerlink" title="客户端调用"></a>客户端调用</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端程序</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//构造处理器链</span></span><br><span class="line">        Handler h1 = <span class="keyword">new</span> ConcreteHandler1();</span><br><span class="line">        Handler h2 = <span class="keyword">new</span> ConcreteHandler2();</span><br><span class="line">        Handler h3 = <span class="keyword">new</span> ConcreteHandler3();</span><br><span class="line">        h1.SetSuccessor(h2);</span><br><span class="line">        h2.SetSuccessor(h3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理请求</span></span><br><span class="line">        <span class="built_in">int</span>[] requests = &#123; <span class="number">2</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">22</span>, <span class="number">18</span>, <span class="number">3</span>, <span class="number">27</span>, <span class="number">20</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">int</span> request <span class="keyword">in</span> requests)</span><br><span class="line">        &#123;</span><br><span class="line">            h1.HandleRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们定义了一个抽象处理器类<code>Handler</code>和三个具体处理器类<code>ConcreteHandler1</code>、<code>ConcreteHandler2</code>和<code>ConcreteHandler3</code>。在客户端程序中，我们构造了一个处理器链，将<code>h1</code>的下一个处理器设置为<code>h2</code>，将<code>h2</code>的下一个处理器设置为<code>h3</code>。然后我们循环处理请求数组中的每个请求，每个请求都从<code>h1</code>开始处理。如果一个处理器能够处理该请求，它就会处理该请求并结束；否则它会将请求传递给下一个处理器，直到请求被处理或者没有更多的处理器为止。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>使用责任链模式的好处在于，我们可以随时增加、删除处理器，而不需要修改客户端程序的代码。</p><p>责任链模式也有一些缺点。例如，如果处理器链太长，会降低处理请求的效率；如果处理器之间的依赖关系不清楚，可能会导致处理器重复处理请求或者无法处理请求。因此，在使用责任链模式时需要慎重考虑，根据实际情况选择合适的处理器链长度和处理器之间的依赖关系。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 命令模式</title>
      <link href="/posts/53050.html"/>
      <url>/posts/53050.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>命令模式</strong>是一种行为型设计模式，它将请求封装成一个对象，从而允许你将不同的请求对客户端参数化，将请求排队或记录请求日志，以及支持可撤销的操作。</p><span id="more"></span><p>在命令模式中，有四个主要角色：</p><ul><li><strong>接收者（Receiver）</strong>：接收者是实际执行操作的对象。它定义了如何执行与请求相关的操作。</li><li><strong>命令（Command）</strong>：命令是将请求封装为对象的接口。它包含执行操作的方法，以及可以撤销操作的方法。</li><li><strong>调用者（Invoker）</strong>：调用者是负责将命令发送给接收者的对象。它包含一个命令对象，并在需要执行命令时调用命令的 Execute 方法。</li><li><strong>客户端（Client）</strong>：客户端是使用命令模式的对象。它创建具体的命令对象，并将命令对象传递给调用者，从而实现将请求封装为对象的目的。</li></ul><p>下面用c#做一个命令模式示例，它实现了一个简单的遥控器：</p><h3 id="接收者"><a href="#接收者" class="headerlink" title="接收者"></a>接收者</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收者：电视</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">TV</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TurnOn</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;The TV is on.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TurnOff</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;The TV is off.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命令接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">ICommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Execute</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Undo</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体命令：打开电视</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">TVOnCommand</span> : <span class="title">ICommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TVOnCommand</span>(<span class="params">TV tv</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        tv.TurnOn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Undo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        tv.TurnOff();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体命令：关闭电视</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">TVOffCommand</span> : <span class="title">ICommand</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TVOffCommand</span>(<span class="params">TV tv</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        tv.TurnOff();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Undo</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        tv.TurnOn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用者"><a href="#调用者" class="headerlink" title="调用者"></a>调用者</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用者：遥控器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">RemoteControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ICommand command;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetCommand</span>(<span class="params">ICommand command</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PressButton</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        command.Execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PressUndoButton</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        command.Undo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TV tv = <span class="keyword">new</span> TV();</span><br><span class="line">    TVOnCommand tvOn = <span class="keyword">new</span> TVOnCommand(tv);</span><br><span class="line">    TVOffCommand tvOff = <span class="keyword">new</span> TVOffCommand(tv);</span><br><span class="line"></span><br><span class="line">    RemoteControl remoteControl = <span class="keyword">new</span> RemoteControl();</span><br><span class="line">    remoteControl.SetCommand(tvOn);</span><br><span class="line">    remoteControl.PressButton(); <span class="comment">// 输出：The TV is on.</span></span><br><span class="line"></span><br><span class="line">    remoteControl.SetCommand(tvOff);</span><br><span class="line">    remoteControl.PressButton(); <span class="comment">// 输出：The TV is off.</span></span><br><span class="line"></span><br><span class="line">    remoteControl.PressUndoButton(); <span class="comment">// 输出：The TV is on.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，遥控器是调用者，电视是接收者，<code>TVOnCommand</code>和<code>TVOffCommand</code>是具体的命令。调用者将命令对象设置到遥控器中，并通过调用<code>PressButton</code>方法来执行命令，通过调用<code>PressUndoButton</code>方法来撤销命令。当具体的命令被执行时，它会调用接收者的方法来完成特定的操作。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>命令模式是一种非常实用的设计模式，它可以帮助我们将请求封装成对象，并实现可撤销操作、命令队列、日志和事务等功能，从而简化代码，提高代码的可读性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 迭代器模式</title>
      <link href="/posts/16207.html"/>
      <url>/posts/16207.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>迭代器模式</strong>是一种行为型设计模式，它允许按照特定顺序遍历集合对象的元素，同时不暴露集合的内部结构。这样做可以让客户端代码不依赖于集合对象的具体实现，从而提高代码的灵活性和可重用性。</p><span id="more"></span><p>在迭代器模式中，聚合对象将其遍历的职责委托给迭代器对象，而不是在聚合对象中实现遍历。</p><p>迭代器模式的优点是可以支持以不同的方式遍历一个聚合对象，而且可以隐藏遍历元素的内部细节。</p><p>在 C# 中，迭代器模式可以通过实现<code>IEnumerable</code>和<code>IEnumerator</code>接口来实现。其中 <code>IEnumerable</code>接口定义了一个<code>GetEnumerator</code>方法，返回一个实现了<code>IEnumerator</code>接口的迭代器对象。<code>IEnumerator</code>接口则定义了访问集合中元素的方法，包括<code>Current</code>、<code>MoveNext</code>和<code>Reset</code>等。</p><h3 id="迭代器实现"><a href="#迭代器实现" class="headerlink" title="迭代器实现"></a>迭代器实现</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyCollection</span> : <span class="title">IEnumerable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[] items = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>] &#123; <span class="number">31</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">64</span>, <span class="number">51</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现 IEnumerable 接口，返回一个枚举器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">GetEnumerator</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyEnumerator(items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义迭代器类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title">MyEnumerator</span> : <span class="title">IEnumerator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span>[] items;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> position = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyEnumerator</span>(<span class="params"><span class="built_in">int</span>[] items</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.items = items;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">object</span> Current</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (position &gt;= <span class="number">0</span> &amp;&amp; position &lt; items.Length)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> items[position];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            position++;</span><br><span class="line">            <span class="keyword">return</span> (position &lt; items.Length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reset</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            position = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们可以直接使用<code>foreach</code>进行遍历：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> MyCollection();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="built_in">int</span> item <span class="keyword">in</span> collection)</span><br><span class="line">&#123;</span><br><span class="line">     Console.WriteLine(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">31</span><br><span class="line">12</span><br><span class="line">3</span><br><span class="line">64</span><br><span class="line">51</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这就是迭代器模式的基本用法。它可以让我们轻松地遍历集合对象中的元素，而不必暴露集合的内部结构。此外，通过实现<code>IEnumerable</code>和<code>IEnumerator</code>接口，我们可以轻松地在 C# 中实现迭代器模式。</p><p>:::tip{title&#x3D;”提示”}<br><code>foreach</code>是c#语法糖，用来遍历实现了<code>IEnumerable</code>接口的集合类。</p><p><code>foreach</code> 循环的原理是通过调用集合类的<code>GetEnumerator</code>方法，返回一个实现了<code>IEnumerator</code>接口的迭代器对象，然后通过迭代器对象的<code>MoveNext</code>方法，依次访问集合中的每个元素，直到集合中的所有元素都被访问完毕。<br>:::</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 享元模式</title>
      <link href="/posts/26736.html"/>
      <url>/posts/26736.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>享元模式</strong>是一种结构型设计模式，它允许你在消耗少量内存的情况下支持大量对象。如果你需要生成大量细粒度的类实例来表示数据，而这些实例除了几个参数外基本上都是相同的，那么你可以使用享元模式来 避免大量相似类的开销。</p><span id="more"></span><p>在享元模式中，有两种状态：<strong>内部状态</strong>和<strong>外部状态</strong>。内部状态是存储在享元对象内部的，而外部状态则是在享元对象外部存储的。在使用享元模式时，你可以共享内部状态，而将外部状态作为参数传递给享元对象。</p><h3 id="抽象享元"><a href="#抽象享元" class="headerlink" title="抽象享元"></a>抽象享元</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象享元类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Flyweight</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Operation</span>(<span class="params"><span class="built_in">int</span> extrinsicState</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体享元"><a href="#具体享元" class="headerlink" title="具体享元"></a>具体享元</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体享元类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> : <span class="title">Flyweight</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _intrinsicState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteFlyweight</span>(<span class="params"><span class="built_in">string</span> intrinsicState</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _intrinsicState = intrinsicState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Operation</span>(<span class="params"><span class="built_in">int</span> extrinsicState</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 输出内部状态和外部状态</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Intrinsic State = &quot;</span> + _intrinsicState);</span><br><span class="line">        </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Extrinsic State = &quot;</span> + extrinsicState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="享元工厂"><a href="#享元工厂" class="headerlink" title="享元工厂"></a>享元工厂</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 享元工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">FlyweightFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;<span class="built_in">string</span>, Flyweight&gt; _flyweights = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Flyweight&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flyweight <span class="title">GetFlyweight</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_flyweights.ContainsKey(key))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果已经存在该享元对象，则直接返回该对象</span></span><br><span class="line">            <span class="keyword">return</span> _flyweights[key];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果不存在，则创建一个新的享元对象，并存储在对象池中</span></span><br><span class="line">            <span class="keyword">var</span> flyweight = <span class="keyword">new</span> ConcreteFlyweight(key);</span><br><span class="line">            </span><br><span class="line">            _flyweights.Add(key, flyweight);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> flyweight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们创建了一个抽象的享元类<code>Flyweight</code>，一个具体的享元类<code>ConcreteFlyweight</code>和一个享元工厂类<code>FlyweightFactory</code>。</p><p>在<code>FlyweightFactory</code>中，我们使用了一个<code>Dictionary</code>来存储享元对象。在<code>GetFlyweight</code>方法中，我们首先检查<code>Dictionary</code>中是否已经存在了一个享元对象。如果存在，我们就返回这个对象。否则，我们就创建一个新的享元对象，并将其添加到<code>Dictionary</code>中。</p><p>可以这样调用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> FlyweightFactory();</span><br><span class="line"></span><br><span class="line">Flyweight flyweight1 = factory.GetFlyweight(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line">flyweight1.Operation(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Flyweight flyweight2 = factory.GetFlyweight(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">flyweight2.Operation(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">Flyweight flyweight3 = factory.GetFlyweight(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line">flyweight3.Operation(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">Intrinsic State = B</span><br><span class="line">Extrinsic State = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Intrinsic State = A</span><br><span class="line">Extrinsic State = <span class="number">3</span></span><br></pre></td></tr></table></figure><p>从输出中就可以看出，享元A的内部状态是共享的，<code>Operation</code>更新的只是外部状态。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>享元模式所带来的优势：</p><ul><li>相同对象只需要保存一份，这降低了系统中对象的数量，从而降低了系统中细粒度对象给内存带来的压力。</li><li>享元模式可以避免大量相似类的开销。在软件开发中，如果需要生成大量细粒度的类实例来表示数据，如果这些实例除了几个参数外基本上都是相同的，这时候就可以使用享元模式来大幅度减少需要实例化类的数量。</li><li>享元模式可以提高系统资源的利用率。由于享元模式可以减少系统中对象的数量，因此可以减少系统资源的占用，提高系统的性能。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 组合模式</title>
      <link href="/posts/14650.html"/>
      <url>/posts/14650.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>组合模式</strong>是一种结构型设计模式，它允许你将对象组合成树形结构来表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性，因为它们都具有相同的接口。</p><span id="more"></span><p>组合模式由三个要素组成：</p><ol><li><p><strong>抽象组件（Component）</strong>：它定义了叶子节点和组合节点的公共接口，可以为叶子节点和组合节点提供默认实现。</p></li><li><p><strong>叶子组件（Leaf）</strong>：它表示组合的叶子节点，没有子节点。</p></li><li><p><strong>组合组件（Composite）</strong>：它表示组合的内部节点，可以包含叶子节点或其他组合节点。</p></li></ol><h3 id="抽象组件"><a href="#抽象组件" class="headerlink" title="抽象组件"></a>抽象组件</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象组件类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Component</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Component</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Component c</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Component c</span>)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"><span class="built_in">int</span> depth</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="叶子组件"><a href="#叶子组件" class="headerlink" title="叶子组件"></a>叶子组件</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 叶子节点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Leaf</span> : <span class="title">Component</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Component c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Cannot add to a leaf&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Component c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Cannot remove from a leaf&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"><span class="built_in">int</span> depth</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="keyword">new</span> String(<span class="string">&#x27;-&#x27;</span>, depth) + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合组件"><a href="#组合组件" class="headerlink" title="组合组件"></a>组合组件</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组合节点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Composite</span> : <span class="title">Component</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Component&gt; children = <span class="keyword">new</span> List&lt;Component&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Composite</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">base</span>(<span class="params">name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Component c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        children.Add(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Component c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        children.Remove(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"><span class="built_in">int</span> depth</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="keyword">new</span> String(<span class="string">&#x27;-&#x27;</span>, depth) + name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (Component component <span class="keyword">in</span> children)</span><br><span class="line">        &#123;</span><br><span class="line">            component.Display(depth + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>Component</code>是抽象组件类，包含了组合模式中共有的方法。<code>Leaf</code>是叶子节点类，表示树状结构中的叶子节点，而<code>Composite</code>是组合节点类，表示树状结构中的组合节点。</p><p>可以这样调用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Composite(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">root.Add(<span class="keyword">new</span> Leaf(<span class="string">&quot;leaf A&quot;</span>));</span><br><span class="line"></span><br><span class="line">root.Add(<span class="keyword">new</span> Leaf(<span class="string">&quot;leaf B&quot;</span>));</span><br><span class="line"></span><br><span class="line">Composite composite = <span class="keyword">new</span> Composite(<span class="string">&quot;composite X&quot;</span>);</span><br><span class="line"></span><br><span class="line">composite.Add(<span class="keyword">new</span> Leaf(<span class="string">&quot;leaf XA&quot;</span>));</span><br><span class="line"></span><br><span class="line">composite.Add(<span class="keyword">new</span> Leaf(<span class="string">&quot;leaf XB&quot;</span>));</span><br><span class="line"></span><br><span class="line">root.Add(composite);</span><br><span class="line"></span><br><span class="line">root.Add(<span class="keyword">new</span> Leaf(<span class="string">&quot;leaf C&quot;</span>));</span><br><span class="line"></span><br><span class="line">root.Display(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>客户端代码创建了一个根节点<code>root</code>，并向它添加了三个子节点：两个叶子节点和一个组合节点<code>composite</code>。组合节点<code>composite</code>又包含了两个叶子节点。最后，客户端代码调用根节点的<code>Display</code>方法，打印出整个树状结构。</p><p>输出结果如下：</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 桥接模式</title>
      <link href="/posts/16267.html"/>
      <url>/posts/16267.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>桥接模式</strong>是一种结构型设计模式，它可以将一个大类或一组相关的类拆分成抽象和实现两个独立的层次结构，从而可以在两个层次结构中分别变化。桥接模式的核心思想是“尽可能将抽象部分和实现部分分离，使它们可以独立地变化”。这样可以使得系统更加灵活，易于扩展和维护。</p><span id="more"></span><p>在桥接模式中，有两个重要的角色：抽象部分和实现部分。抽象部分定义了一组抽象接口，它们与实现部分相互作用；实现部分则提供了这些接口的具体实现。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>定义抽象部分的接口或抽象类</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IShape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Draw</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 .定义实现部分的接口或抽象类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IColor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Fill</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>实现实现部分的具体类</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Red</span> : <span class="title">IColor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Fill with red color.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Blue</span> : <span class="title">IColor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fill</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Fill with blue color.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>实现抽象部分的具体类，并在其中包含实现部分的对象</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> IColor color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Shape</span>(<span class="params">IColor color</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span>(<span class="params">IColor color</span>) : <span class="title">base</span>(<span class="params">color</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot;Draw a circle. &quot;</span>);</span><br><span class="line">        color.Fill();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params">IColor color</span>) : <span class="title">base</span>(<span class="params">color</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.Write(<span class="string">&quot;Draw a rectangle. &quot;</span>);</span><br><span class="line">        color.Fill();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>客户端调用</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Red();</span><br><span class="line">IColor blue = <span class="keyword">new</span> Blue();</span><br><span class="line"></span><br><span class="line">Shape circle = <span class="keyword">new</span> Circle(red);</span><br><span class="line">circle.Draw();</span><br><span class="line"></span><br><span class="line">Shape rectangle = <span class="keyword">new</span> Rectangle(blue);</span><br><span class="line">rectangle.Draw();</span><br></pre></td></tr></table></figure><ol start="6"><li>输出：</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> red color.</span><br><span class="line">Draw a rectangle. Fill <span class="keyword">with</span> blue color.</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们定义了两个实现部分的具体类 <code>Red</code> 和 <code>Blue</code>，它们实现了 <code>IColor</code> 接口。然后我们定义了两个抽象部分的具体类 <code>Circle</code> 和 <code>Rectangle</code>，并在它们的构造函数中传入一个 <code>IColor</code> 对象，实现了抽象部分和实现部分的解耦。最后，在客户端代码中使用抽象部分，通过传入不同的实现部分对象来实现不同的功能</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>桥接模式的优点在于它可以让抽象部分和实现部分各自独立地变化，从而可以更加灵活地组合它们。此外，它还可以减少类之间的耦合度，提高代码的可维护性和可扩展性。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 外观模式</title>
      <link href="/posts/6071.html"/>
      <url>/posts/6071.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>外观模式</strong>是一种结构型设计模式，它为客户端提供了一个简单的接口，使得客户端能够更容易地使用复杂的子系统。外观模式通过隐藏子系统的复杂性，简化了客户端的调用过程，同时也降低了客户端与子系统的耦合度。</p><span id="more"></span><p>外观模式的核心思想是将系统的各个组件和子系统封装在一个单独的类中，称为外观类。外观类为客户端提供一个简单的接口，隐藏了系统的复杂性。客户端只需要与外观类交互，就可以使用系统的所有功能。</p><p>:::tip{title&#x3D;”提示”}<br>将外观模式具象化可以这样理解，假设我们有一个汽车工厂，它可以生产各种型号的汽车。生产一辆汽车需要很多步骤，比如设计、采购零件、组装等等。如果客户端要使用汽车工厂生产一辆汽车，那么他需要了解所有这些步骤的细节，这会使得客户端非常复杂。但是如果我们在汽车工厂的外面加上一个售车大厅，<strong>这个售车大厅就是外观</strong>。客户端只需要在售车大厅告诉售货员他想要什么型号的汽车，然后售货员会帮他完成所有的操作。这样客户端就可以很方便地使用汽车工厂了。<br>:::</p><p>接下来，我们使用C#实现上文描述的外观模式。</p><h3 id="子系统类"><a href="#子系统类" class="headerlink" title="子系统类"></a>子系统类</h3><p>创建<strong>设计师类</strong>，<strong>采购部类</strong>，<strong>组装车间类</strong>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Designer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Design</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Design a car..</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PurchasingDepartment</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Purchase</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Purchase car parts..</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AssemblyWorkshop</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Assemble</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Assemble car..</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外观类"><a href="#外观类" class="headerlink" title="外观类"></a>外观类</h3><p>创建外观类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CarFacade</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Designer designer;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> PurchasingDepartment purchasingDepartment;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> AssemblyWorkshop assemblyWorkshop;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CarFacade</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        designer = <span class="keyword">new</span>();</span><br><span class="line">        </span><br><span class="line">        purchasingDepartment = <span class="keyword">new</span>();</span><br><span class="line">        </span><br><span class="line">        assemblyWorkshop = <span class="keyword">new</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operation</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        designer.Design();</span><br><span class="line">        </span><br><span class="line">        purchasingDepartment.Purchase();</span><br><span class="line">        </span><br><span class="line">        assemblyWorkshop.Assemble();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//othre Operation ..</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，客户端需要一辆车的时候，只需要这样</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Facade();</span><br><span class="line"></span><br><span class="line">facade.Operation();</span><br></pre></td></tr></table></figure><p>上述示例中，<code>Designer</code>，<code>PurchasingDepartment</code>，<code>AssemblyWorkshop</code>是三个子系统类，<code>CarFacade</code>是外观类，<code>CarFacade</code>封装了子系统的复杂性，为客户提供了一个简单的接口<code>Operation</code>,而无需了解其实现细节。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>外观模式通常用于大型系统中，其中有多个子系统相互依赖，而客户端只需要使用其中一小部分功能。<br>它可以帮助客户端更容易地使用这些功能，而无需了解子系统的所有细节。<br>它通过将客户端代码与复杂的子系统代码解耦，简化了客户端与子系统之间的交互。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 代理模式</title>
      <link href="/posts/11640.html"/>
      <url>/posts/11640.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>代理模式</strong>是一种结构型设计模式，它允许您提供一个代理来控制对某个对象的访问。在某些情况下，直接访问对象可能会带来一些问题，比如安全问题、性能问题等。代理模式就是为了解决这些问题而设计的。</p><span id="more"></span><p>在代理模式中，有三个核心角色：<strong>抽象主题（Subject）</strong>、 <strong>真实主题（Real Subject）</strong> 和 <strong>代理（Proxy）</strong>。抽象主题是一个接口或抽象类，它定义了真实主题和代理都要实现的方法。真实主题是实现抽象主题接口的类，它执行实际的业务逻辑。代理是也实现了抽象主题接口的类，它包含一个指向真实主题对象的引用，可以在不直接访问真实主题的情况下执行某些操作，比如控制访问权限、记录日志等。</p><h3 id="抽象主题"><a href="#抽象主题" class="headerlink" title="抽象主题"></a>抽象主题</h3><p>定义抽象主题接口：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISubject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Request</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="真实主题"><a href="#真实主题" class="headerlink" title="真实主题"></a>真实主题</h3><p>定义真实主题类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RealSubject</span> : <span class="title">ISubject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Request</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;RealSubject handles request.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h3><p>定义代理类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Proxy</span> : <span class="title">ISubject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Request</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (realSubject == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Proxy handles request.&quot;</span>);</span><br><span class="line">        realSubject.Request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在代理类中，我们在 <code>Request</code>方法中创建一个真实主题对象<code>RealSubject</code>（如果它还没有被创建），然后调用真实主题对象的 <code>Request</code> 方法。这样，在客户端代码中，我们只需要使用代理对象即可，而不需要直接访问真实主题对象。</p><p>客户端调用可以这样调用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Proxy();</span><br><span class="line">proxy.Request();</span><br></pre></td></tr></table></figure><p>输出：</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 装饰器模式</title>
      <link href="/posts/43598.html"/>
      <url>/posts/43598.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>装饰器模式</strong>是一种结构型设计模式，它允许在不改变原始对象的情况下，通过将其包装在一个装饰器对象中，来动态地添加额外的功能。</p><span id="more"></span><p>装饰器模式的核心思想是，将一个对象放在另一个对象的外面，以给原始对象添加新的行为。这个“另一个对象”就是装饰器（Decorator），它持有一个原始对象（Component）的引用，并实现与原始对象相同的接口。装饰器可以通过调用原始对象的方法，来执行自己的行为。这种方式可以动态地添加、删除或替换对象的行为，而不需要修改原始对象的代码。</p><h3 id="基本类接口"><a href="#基本类接口" class="headerlink" title="基本类接口"></a>基本类接口</h3><p>定义一个基本对象接口或抽象类，称为<code>Component</code>，它定义了一些基本操作：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义基本对象接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IComponent</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本类实现"><a href="#基本类实现" class="headerlink" title="基本类实现"></a>基本类实现</h3><p>定义一个实现<code>IComponent</code>接口的具体类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IComponent接口的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteComponent</span> : <span class="title">IComponent</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operation</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ConcreteComponent.Operation()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装饰器抽象"><a href="#装饰器抽象" class="headerlink" title="装饰器抽象"></a>装饰器抽象</h3><p>定义一个装饰器抽象类或接口，称为<code>Decorator</code>，它也实现了<code>Component</code>接口，并在其中添加了一些新的操作：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//装饰器抽象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Decorator</span> : <span class="title">IComponent</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> IComponent component;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span>(<span class="params">IComponent component</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        component.Operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装饰器实现"><a href="#装饰器实现" class="headerlink" title="装饰器实现"></a>装饰器实现</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现多个装饰器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteDecoratorA</span> : <span class="title">Decorator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecoratorA</span>(<span class="params">IComponent component</span>) : <span class="title">base</span>(<span class="params">component</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Operation</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Operation();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ConcreteDecoratorA.Operation()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteDecoratorB</span> : <span class="title">Decorator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecoratorB</span>(<span class="params">IComponent component</span>) : <span class="title">base</span>(<span class="params">component</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Operation</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Operation();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ConcreteDecoratorB.Operation()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，我们可以创建并使用一个具有特定功能对象：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ConcreteComponent();</span><br><span class="line"></span><br><span class="line">IComponent decoratorA = <span class="keyword">new</span> ConcreteDecoratorA(component);</span><br><span class="line"></span><br><span class="line">IComponent decoratorB = <span class="keyword">new</span> ConcreteDecoratorB(decoratorA);</span><br><span class="line"></span><br><span class="line">decoratorB.Operation();</span><br></pre></td></tr></table></figure><p>输出如下：</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 适配器模式</title>
      <link href="/posts/52124.html"/>
      <url>/posts/52124.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>适配器模式</strong>是一种结构型设计模式，用于将一个类的接口转换成另一个接口，以便于两个不兼容的类之间能够协同工作。适配器模式可以被认为是一个桥梁，它可以连接两个不同的接口，从而使得它们可以进行协同工作。</p><span id="more"></span><p>适配器模式通常在两个不兼容的类之间进行转换，这些类可能具有不同的接口，不同的数据类型或不同的方法签名。适配器模式通过将一个类的接口转换为另一个类的接口来解决这个问题，这样这两个不同的类就可以协同工作了。</p><p>适配器模式分为两种类型，类适配器模式和对象适配器模式。</p><ul><li><p><strong>类适配器模式</strong>：通过多重继承的方式，将适配者类的接口转换为目标接口。</p></li><li><p><strong>对象适配器模式</strong>：通过组合的方式，将适配者类的接口转换为目标接口。</p></li></ul><p>下面我们使用C#来实现适配器模式。</p><h3 id="创建目标接口"><a href="#创建目标接口" class="headerlink" title="创建目标接口"></a>创建目标接口</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ITarget</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Request</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建原有类"><a href="#创建原有类" class="headerlink" title="创建原有类"></a>创建原有类</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原有类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Adaptee</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SpecificRequest</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Adaptee.SpecificRequest&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h3><p>类适配器模式通过继承实现适配器功能，它继承了原有类并实现了新的接口。这样，客户端就可以通过适配器调用原有类的方法。</p><ol><li>创建类适配器</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类适配器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Adapter</span> : <span class="title">Adaptee</span>, <span class="title">ITarget</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Request</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.SpecificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建客户端</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params">ITarget target</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        target.Request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以这样调用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用类适配器模式</span></span><br><span class="line">Client client = <span class="keyword">new</span> Client();</span><br><span class="line"></span><br><span class="line">ITarget adapter = <span class="keyword">new</span> Adapter();</span><br><span class="line"></span><br><span class="line">client.DoWork(adapter);</span><br></pre></td></tr></table></figure><p>适配器<code>Adapter</code>继承原有类<code>Adaptee</code>，实现了<code>ITarget</code>接口，并在<code>Request</code>方法中调用了基类的<code>SpecificRequest</code>方法，这样客户端就达到了通过适配器调用原有类的方法。</p><h3 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h3><p>对象适配器模式通过组合实现适配器功能，它将原有类的对象作为一个成员变量包含在适配器类中。这样，客户端就可以通过适配器调用原有类的方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象适配器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Adapter</span> : <span class="title">ITarget</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span>(<span class="params">Adaptee adaptee</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.adaptee = adaptee;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Request</span>()</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.adaptee.SpecificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建客户端</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoWork</span>(<span class="params">ITarget target</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        target.Request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以这样调用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Client();</span><br><span class="line"></span><br><span class="line">Adaptee adaptee = <span class="keyword">new</span> Adaptee();</span><br><span class="line"></span><br><span class="line">ITarget adapter = <span class="keyword">new</span> Adapter(adaptee);</span><br><span class="line"></span><br><span class="line">client.DoWork(adapter);</span><br></pre></td></tr></table></figure><p>适配器<code>Adapter</code>实现了<code>ITarget</code>接口，并持有了原有类的对象作为一个成员变量，使用含参构造的方式将原有类对象初始化，在<code>Request</code>方法中调用了原有类的<code>SpecificRequest</code>方法，这样客户端就达到了通过适配器调用原有类的方法。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>如果我们需要在现有代码中添加新的功能，而又不能修改原有的代码，那么适配器模式就是一个非常好的解决方案。适配器模式可以将不兼容的接口转换成兼容的接口，从而让不兼容的代码能够协同工作。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 单例模式</title>
      <link href="/posts/8911.html"/>
      <url>/posts/8911.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>单例模式</strong>是一种创建型设计模式，它的主要目的是确保某个类在应用程序中只有一个实例，并且这个实例能够被全局访问。在许多情况下，单例模式是非常有用的，比如说当你需要创建一个全局的配置类或者日志类时，单例模式可以让你轻松地实现这些功能。</p><span id="more"></span><p>在实现单例模式时，有两种常见的方法，“懒汉式”和“饿汉式”</p><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 私有构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式的特点是只有在需要的时候才会创建实例，而不是在类加载的时候就创建实例。这种方式可以节省系统资源，但是可能会影响性能。</p><h3 id="懒汉式（双检锁）"><a href="#懒汉式（双检锁）" class="headerlink" title="懒汉式（双检锁）"></a>懒汉式（双检锁）</h3><p>上文中的实现方案中，并未考虑到线程安全，要确保在多线程环境下只有一个实例被创建，需要<strong>使用双重检查锁定</strong>，双检锁&#x2F;双重校验锁（DCL，即 double-checked locking）。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> lockObject = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 私有构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (lockObject)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 私有构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">GetInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式的特点是在类加载的时候就创建实例，而不是在需要的时候才创建实例。这种方式可以保证线程安全，但是可能会浪费系统资源。</p><p>在使用“饿汉式”方式实现单例模式时，实例是在类加载时创建的。因此，不需要使用额外的线程安全技术。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，单例模式是一种常见的设计模式，它能够确保某个类在应用程序中只有一个实例，并且这个实例能够被全局访问。但在使用“懒汉式”实现时，要注意线程安全问题。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 观察者模式</title>
      <link href="/posts/20260.html"/>
      <url>/posts/20260.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong>观察者模式</strong>是一种行为型设计模式，它允许对象之间建立一种一对多的关系，使得当一个对象状态改变时，所有依赖它的对象都能够自动得到通知并更新自己的状态。该模式可以帮助我们实现松耦合的系统，以便更好地应对变化和扩展。</p><span id="more"></span><p>在观察者模式中，有两个角色：<strong>观察者</strong>和<strong>被观察者</strong>。被观察者负责维护观察者列表，并在状态发生改变时通知观察者；观察者则负责接收被观察者的通知并进行相应的处理。</p><p>下面我们通过一个简单的例子来说明观察者模式的用法。假设我们要实现一个计数器，每次计数器增加时需要通知所有的观察者。</p><h3 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h3><p>先定义一个接口<code>IObserver</code>，用于定义观察者的行为，该接口只有一个方法<code>Update</code>，用于接收被观察者的通知并更新观察者的状态。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IObserver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">int</span> count</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再定义一个观察者实现<code>ConsoleObserver</code>，它负责在控制台上输出计数器的值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConsoleObserver</span> : <span class="title">IObserver</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">int</span> count</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Count = <span class="subst">&#123;count&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="被观察者"><a href="#被观察者" class="headerlink" title="被观察者"></a>被观察者</h3><p>定义一个被观察者<code>Counter</code>，它负责维护观察者列表，并在计数器增加时通知观察者。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Counter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;IObserver&gt; observers = <span class="keyword">new</span> List&lt;IObserver&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddObserver</span>(<span class="params">IObserver observer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        observers.Add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveObserver</span>(<span class="params">IObserver observer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        observers.Remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Increment</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        NotifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">NotifyObservers</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (IObserver observer <span class="keyword">in</span> observers)</span><br><span class="line">        &#123;</span><br><span class="line">            observer.Update(count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后可以定义一个观察者<code>ConsoleObserver</code>，一个被观察者<code>Counter</code>,再计数器增加时，通知<code>ConsoleObserver</code>输出到控制台。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Counter();</span><br><span class="line"></span><br><span class="line">IObserver consoleObserver = <span class="keyword">new</span> ConsoleObserver();</span><br><span class="line"></span><br><span class="line">counter.AddObserver(consoleObserver);</span><br><span class="line"></span><br><span class="line">counter.Increment();</span><br></pre></td></tr></table></figure><p>控制台得到输出<code>Count = 1</code>。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>观察者模式广泛应用于GUI（图形用户界面）开发、事件驱动系统、消息通知系统、进程间通信等场景中。</p><p>它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象，当主题对象发生变化时，所有依赖于它的观察者对象都会得到通知并自动更新。</p><p>观察者模式的作用是将系统中的关注点分离，提高系统的可维护性、扩展性和重用性。通过该模式，主题对象和观察者对象之间的耦合度降低，让它们之间的关系更加松散，从而使系统更加灵活、可扩展和易于维护。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计原则 --- SOLID</title>
      <link href="/posts/41723.html"/>
      <url>/posts/41723.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>SOLID是五个常见的面向对象设计原则的缩写，其目的是帮助开发者设计易于维护和扩展的软件系统</p><p>其中包含<strong>单一职责原则(SRP)</strong>，<strong>开闭原则(OCP)</strong>，<strong>里氏替换原则(LSP)</strong>，<strong>接口隔离原则(ISP)</strong>，<strong>依赖反转原则(DIP)</strong>。</p><p>除SOLID之外，后续又增加了<strong>迪米特法则</strong>。</p><span id="more"></span><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p><strong>单一职责原则（Single Responsibility Principle，SRP）</strong>，这个原则指出一个类应该只有一个职责。也就是说，一个类应该只有一种修改的原因。如果一个类负责多个不同的职责，那么对其中一个职责的修改可能会影响到其他职责，从而导致系统的不稳定性。</p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p><strong>开闭原则（Open-Closed Principle，OCP）</strong>，这个原则指出一个类应该对扩展开放，对修改关闭。也就是说，系统中的类应该能够方便地进行扩展，但是对于已经存在的类，尽量避免进行修改。这样可以减少代码的复杂性，提高系统的稳定性。</p><p>:::tip{title&#x3D;”提示”}<br>开闭原则需要避免过度设计，即在不必要的情况下进行扩展。同时，应该避免使用复杂的继承结构，而应该优先使用组合和接口实现扩展。<br>:::</p><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p><strong>里氏替换原则（Liskov Substitution Principle，LSP）</strong>，这个原则指出，如果一个子类不能完全替代它的父类，那么这个子类就不应该存在。换句话说，子类应该能够在不影响父类的前提下，完全替代父类的功能。这样才能保证系统的正确性和稳定性。</p><p>:::tip{title&#x3D;”提示”}<br>里氏替换原则需要注意继承关系的正确性。子类必须要遵循父类的约束，否则就会破坏LSP的原则。同时，在使用多态时需要注意类型的转换和类型检查的正确性。<br>:::</p><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p><strong>接口隔离原则（Interface Segregation Principle，ISP）</strong>，这个原则指出一个类不应该强制依赖它不需要的接口。如果一个类依赖了一个过于庞大的接口，那么当这个接口发生变化时，这个类也需要相应地进行修改。因此，一个类应该尽量只依赖于它需要的接口，避免不必要的依赖。</p><p>:::tip{title&#x3D;”提示”}<br>接口隔离原则需要避免接口的冗余和重复。接口应该根据不同的职责进行分离，避免一个接口承担过多的职责。同时，应该避免使用过于具体的接口，而应该优先使用更抽象的接口<br>:::</p><h2 id="依赖反转原则"><a href="#依赖反转原则" class="headerlink" title="依赖反转原则"></a>依赖反转原则</h2><p><strong>依赖反转原则（Dependency Inversion Principle，DIP）</strong>，这个原则指出，高层模块不应该依赖于低层模块，两者都应该依赖于抽象。同时，抽象不应该依赖于具体实现，具体实现应该依赖于抽象。这样可以减少系统的耦合度，提高系统的可扩展性和可维护性。</p><p>:::tip{title&#x3D;”提示”}<br>依赖反转原则需要注意依赖注入的方式和依赖倒置的层次。依赖注入应该使用构造函数注入、属性注入或方法注入，避免使用硬编码的依赖。同时，在依赖倒置时需要注意依赖的层次，避免高层模块依赖过于低层的模块。<br>:::</p><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><p><strong>迪米特法则(Law of Demeter,LoD)也称为最少知识原则(Least Knowledge Principle,LKP)</strong>。<br>迪米特法则要求一个对象应该只与其直接的朋友通信，而不是跟朋友的朋友或者更远的对象通信。对象之间的耦合度越低，系统的灵活性、可维护性、可扩展性就越好，同时也降低了代码的复杂度和风险。<br>:::tip{title&#x3D;”提示”}<br>迪米特法则需要注意：</p><ul><li>将方法中的参数尽量缩小，尽量不引入不需要的对象。</li><li>在类的设计中，尽量降低对其他类的依赖。</li><li>将依赖其他类的操作放到一个中介类中，由中介类负责和其他类的通信。<br>:::</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>SOLID原则是一种很好的软件设计指导原则，能够帮助开发者设计出易于维护和扩展的软件系统。但是，这些原则并不是银弹，需要根据具体的情况进行灵活运用。同时，在应用这些原则时需要注意细节和实现细节，才能真正达到SOLID原则的设计目标。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温设计模式 --- 前篇</title>
      <link href="/posts/3517.html"/>
      <url>/posts/3517.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>软件开发过程中，我们经常会遇到各种设计问题，例如如何管理对象之间的关系、如何优化代码的可复用性和可维护性等等。为了解决这些问题，我们可以使用设计模式。</p><span id="more"></span><p>设计模式是一种被广泛接受的软件设计思想，它提供了一套通用的解决方案，可以帮助我们更好地解决常见的软件设计问题。设计模式是从实践中总结出来的，它不仅可以提高代码的可读性和可维护性，还可以提高开发效率和代码的可复用性。</p><h2 id="常见设计模式原则"><a href="#常见设计模式原则" class="headerlink" title="常见设计模式原则"></a>常见设计模式原则</h2><p>设计模式有常见的五大原则 - <a href="https://blog.fantasyke.cn/post/41723">SOLID</a></p><ul><li>单一职责原则（SRP）</li><li>开放封闭原则（OCP）</li><li>里氏替换原则（LSP）</li><li>接口隔离原则（DIP）</li><li>依赖倒置原则（ISP）</li></ul><p>补充第六原则，迪米特法则(Law of Demeter,LoD)也称为最少知识原则(Least Knowledge Principle,LKP)</p><h2 id="常见设计模式类型"><a href="#常见设计模式类型" class="headerlink" title="常见设计模式类型"></a>常见设计模式类型</h2><ul><li>创建型模式：负责对象的创建和初始化，共有5种：<strong>工厂方法模式</strong>、<strong>抽象工厂模式</strong>、<strong>单例模式</strong>、<strong>建造者模式</strong>、<strong>原型模式</strong>。</li><li>结构型模式：负责对象的组合，共有7种：<strong>适配器模式</strong>、<strong>装饰器模式</strong>、<strong>代理模式</strong>、<strong>外观模式</strong>、<strong>桥接模式</strong>、<strong>组合模式</strong>、<strong>享元模式</strong>。</li><li>行为型模式：负责对象之间的通信，共有11种：<strong>观察者模式</strong>、<strong>策略模式</strong>、<strong>迭代器模式</strong>、<strong>命令模式</strong>、<strong>责任链模式</strong>、<strong>模板方法模式</strong>、<strong>访问者模式</strong>、<strong>中介者模式</strong>、<strong>解释器模式</strong>、<strong>过滤器模式</strong>、<strong>备忘录模式</strong>。</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><ol><li><a href="https://blog.fantasyke.cn/post/19162"><strong>抽象工厂模式（Abstract Factory Pattern）</strong></a></li></ol><p>抽象工厂模式是一种创建型设计模式，它提供了一种封装一组相关或相互依赖对象创建过程的方法，使得我们可以在不知道具体实现细节的情况下，创建一系列相互协作的对象。</p><ol start="2"><li><a href="https://blog.fantasyke.cn/post/61427"><strong>工厂方法模式（Factory Method Pattern）</strong></a></li></ol><p>工厂方法模式是一种创建型设计模式，它提供了一种将对象的创建过程封装起来的方法，使得我们可以在不知道具体实现细节的情况下，创建各种不同类型的对象。</p><ol start="3"><li><a href="https://blog.fantasyke.cn/post/8911"><strong>单例模式（Singleton Pattern）</strong></a></li></ol><p>单例模式是一种保证一个类只有一个实例的模式，它可以避免多个实例造成的资源浪费和对象的不一致性。单例模式通常使用一个私有的构造函数和一个静态的实例变量来实现。</p><ol start="4"><li><a href="https://blog.fantasyke.cn/post/9489"><strong>建造者模式（Builder Pattern）</strong></a></li></ol><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式可以将复杂对象的构建过程抽象出来，从而使得系统更加灵活。</p><ol start="5"><li><a href="https://blog.fantasyke.cn/post/52975"><strong>原型模式（Prototype Pattern）</strong></a></li></ol><p>用原型实例指定创建对象的种类，并通过复制这些原型创建新的对象。原型模式可以在运行时动态地创建对象，从而避免了静态工厂方法所带来的编译时耦合。</p><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><ol><li><a href="https://blog.fantasyke.cn/post/52124"><strong>适配器模式（Adapter Pattern）</strong></a></li></ol><p>适配器模式是一种将一个类的接口转换成客户端所期望的另一种接口的模式，它可以让原本不兼容的类能够协同工作。这种模式可以避免因接口不匹配而导致的代码重构和重复开发。</p><ol start="2"><li><a href="https://blog.fantasyke.cn/post/43598"><strong>装饰器模式（Decorator Pattern）</strong></a></li></ol><p>装饰器模式是一种在运行时动态地给对象添加新的功能的模式，它通过将对象包装在一个装饰器中来实现。这种模式可以避免使用继承带来的复杂性和静态特性，提高代码的灵活性和可扩展性。</p><ol start="3"><li><a href="https://blog.fantasyke.cn/post/11640"><strong>代理模式（Proxy Pattern）</strong></a></li></ol><p>代理模式是一种结构型设计模式，它允许我们创建一个代理对象来控制对另一个对象的访问。代理对象可以充当原始对象的访问接口，从而控制对原始对象的访问。代理模式通常用于远程访问、延迟加载、访问控制等方面。</p><ol start="4"><li><a href="https://blog.fantasyke.cn/post/6071"><strong>外观模式（Facade Pattern）</strong></a></li></ol><p>为一组复杂的子系统提供一个简单的接口，从而隐藏子系统的复杂性。外观模式可以降低客户端和子系统之间的耦合度，同时提高客户端的易用性。</p><ol start="5"><li><a href="https://blog.fantasyke.cn/post/16267"><strong>桥接模式（Bridge Pattern）</strong></a></li></ol><p>桥接模式是一种将抽象部分与它的实现部分分离开来的模式，使它们可以独立地变化。这种模式可以避免因为实现细节的变化而导致的代码修改和重构。</p><ol start="6"><li><a href="https://blog.fantasyke.cn/post/14650"><strong>组合模式（Composite Pattern）</strong></a></li></ol><p>组合模式是一种将对象组合成树形结构的模式，使得客户端可以像处理单个对象一样处理对象的组合。这种模式可以使得对象之间的关系更加清晰，提高代码的可读性和可维护性。</p><ol start="7"><li><a href="https://blog.fantasyke.cn/post/26736"><strong>享元模式（Flyweight Pattern）</strong></a></li></ol><p>享元模式是一种结构型设计模式，用于优化对象的创建和使用。该模式通过共享相同的数据，来减少内存的使用和对象的创建。通常情况下，享元模式适用于存在大量相似对象的情况</p><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><ol><li><a href="https://blog.fantasyke.cn/post/20260"><strong>观察者模式（Observer Pattern）</strong></a></li></ol><p>观察者模式是一种对象间的一对多依赖关系，当一个对象的状态发生改变时，所有依赖它的对象都会收到通知并自动更新。这种模式可以降低对象之间的耦合度，提高系统的灵活性和可扩展性。</p><ol start="2"><li><a href="https://blog.fantasyke.cn/post/29684"><strong>策略模式（Strategy Pattern）</strong></a></li></ol><p>策略模式是一种定义一系列算法的模式，它将每个算法封装在一个类中，并使它们可以互相替换。这种模式可以避免使用大量的条件语句和重复代码，提高代码的可维护性和可扩展性。</p><ol start="3"><li><a href="https://blog.fantasyke.cn/post/16207"><strong>迭代器模式（Iterator Pattern）</strong></a></li></ol><p>迭代器模式是一种访问一个聚合对象中的各个元素的方式，而又不需要暴露该对象的内部表示。这种模式可以让客户端透明地访问聚合对象中的元素，同时避免了聚合对象的数据结构对客户端的依赖。</p><ol start="4"><li><a href="https://blog.fantasyke.cn/post/53050"><strong>命令模式（Command Pattern）</strong></a></li></ol><p>将请求封装成对象，从而使不同的请求可以被不同的对象处理。命令模式可以将请求的发送者和接收者解耦，同时支持请求的撤销和重做</p><ol start="5"><li><a href="https://blog.fantasyke.cn/post/47985"><strong>责任链模式（Chain of Responsibility Pattern）</strong></a></li></ol><p>将请求的发送者和接收者解耦，通过一条由多个处理对象组成的链来处理请求。责任链模式可以根据需求动态地组合处理对象，从而实现请求的自动转发和处理。</p><ol start="6"><li><a href="https://blog.fantasyke.cn/post/12602"><strong>模板方法模式（Template Method Pattern）</strong></a></li></ol><p>定义一个操作中的算法骨架，将一些步骤延迟到子类中。模板方法模式可以提高代码的复用性和可维护性，同时可以避免子类中的代码重复</p><ol start="7"><li><a href="https://blog.fantasyke.cn/post/3308"><strong>状态模式（State Pattern）</strong></a></li></ol><p>允许对象在内部状态发生改变时改变它的行为。状态模式将对象的行为和状态进行分离，从而将复杂的条件判断转化为简单的状态切换。</p><ol start="8"><li><a href="https://blog.fantasyke.cn/post/35233"><strong>中介者模式（Mediator Pattern）</strong></a></li></ol><p>用一个中介对象来封装一系列的对象交互，从而使对象之间的交互松散耦合。中介者模式可以简化对象之间的交互，同时降低对象之间的依赖关系。</p><ol start="9"><li><a href="https://blog.fantasyke.cn/post/28605"><strong>解释器模式（Interpreter Pattern）</strong></a></li></ol><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。解释器模式可以将复杂的语言转化为易于处理的数据结构，从而使得语言的解释更加容易。</p><ol start="10"><li><a href="https://blog.fantasyke.cn/post/45547"><strong>访问者模式（Visitor Pattern）</strong></a></li></ol><p>访问者模式是一种行为设计模式，它可以让你将算法与它们操作的对象分离。这样，你可以在不修改对象结构的情况下，向现有的对象结构添加新的操作。</p><ol start="11"><li><a href="https://blog.fantasyke.cn/post/35464"><strong>备忘录模式（Memento Pattern）</strong></a><br>备忘录模式是一种行为型设计模式，它允许我们将对象的状态保存在备忘录对象中，从而可以在以后恢复对象的状态。该模式通常用于需要撤销、恢复操作的场景，例如文本编辑器、绘图应用等。备忘录模式通过将状态保存在备忘录对象中来实现状态的恢复，从而保证了对象的封装性和数据安全性。</li></ol><blockquote><p>参考资料</p><p><a href="https://dofactory.com/net/abstract-factory-design-pattern">https://dofactory.com/net/abstract-factory-design-pattern</a></p><p><a href="https://refactoring.guru/design-patterns">https://refactoring.guru/design-patterns</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP --- 面向切面编程</title>
      <link href="/posts/12894.html"/>
      <url>/posts/12894.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p><strong>AOP（Aspect-Oriented Programming）</strong> 编程思想是一种面向切面编程的编程范式。在日常的软件开发中，我们经常会遇到一些<strong>横切关注点（cross-cutting concerns）</strong>，如<code>日志记录</code>、<code>事务处理</code>、<code>权限控制</code>、<code>异常处理</code>等。这些横切关注点可能会存在于程序的多个模块中，使得程序的不同模块之间存在较强的耦合性，从而影响了程序的可维护性和可扩展性。AOP编程思想的目的就是将这些横切关注点从程序的业务逻辑中剥离出来，并将其模块化处理，从而提高程序的可维护性和可扩展性。</p><span id="more"></span><h3 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h3><p>在AOP编程思想中，切面（aspect）是指横切关注点的抽象概念，它通常用一个类或一个模块来表示。切面通过将横切关注点的代码封装到独立的模块中，使得这些代码可以在程序的不同模块之间共享和复用。切面通过定义切点（pointcut）和通知（advice）来实现对横切关注点的处理。</p><h3 id="切点"><a href="#切点" class="headerlink" title="切点"></a>切点</h3><p>切点定义了哪些代码片段需要被处理，通知则定义了在切点处执行的处理逻辑。在AOP编程中，通知可以分为前置通知（before advice）、后置通知（after advice）、环绕通知（around advice）等不同类型，具体使用哪种类型的通知取决于需要实现的功能。</p><h2 id="AOP-的优缺点"><a href="#AOP-的优缺点" class="headerlink" title="AOP 的优缺点"></a>AOP 的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li><strong>解耦</strong>：AOP编程将横切关注点从业务逻辑中分离出来，使得程序各个模块之间的依赖关系降低，从而实现了解耦。</li><li><strong>复用</strong>：AOP编程将横切关注点封装到独立的模块中，使得这些代码可以在程序的不同模块之间共享和复用。</li><li><strong>可维护性</strong>：AOP编程将横切关注点的处理逻辑从业务逻辑中分离出来，使得程序的各个模块更加简单，易于维护。</li><li><strong>可扩展性</strong>：AOP编程通过切面的定义和配置，可以很容易地扩展系统的功能，而不需要对原有的业务逻辑进行修改。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li><strong>增加复杂性</strong>：AOP编程将程序的逻辑分散到多个模块中，增加了程序的复杂性，对于一些小规模的项目可能会显得过于复杂。</li><li><strong>难以调试</strong>：由于横切关注点的代码可能被多个模块共享，所以在调试时可能会比较困难。</li></ol><p>AOP编程思想增加了程序的复杂性，难以调试等。但总体来说，AOP编程思想对于大型软件系统的开发和维护是非常有用的。它可以使得程序的结构更加清晰、易于维护和扩展，同时也可以提高程序的重用性和可测试性。使用AOP编程思想可以让开发人员更加专注于业务逻辑的实现，而将横切关注点的处理交给AOP框架去处理，从而提高开发效率和代码质量。</p><h2 id="C-利用AutoFac实现简单AOP"><a href="#C-利用AutoFac实现简单AOP" class="headerlink" title="C# 利用AutoFac实现简单AOP"></a>C# 利用AutoFac实现简单AOP</h2><p>接下来我们借助<code>反射</code>，<code>Attribute</code>,三方容器<code>AutoFac</code>，实现一个简单AOP：</p><h3 id="1-创建动态代理"><a href="#1-创建动态代理" class="headerlink" title="1. 创建动态代理"></a>1. 创建动态代理</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">DynamicProxy</span>&lt;<span class="title">T</span>&gt; : <span class="title">DispatchProxy</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> T? decorated &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;<span class="comment">//目标类</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Action&lt;<span class="built_in">object</span>?[]?&gt;? _BeforeAction &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; <span class="comment">// 动作之前执行</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Action&lt;<span class="built_in">object</span>?[]?, <span class="built_in">object</span>&gt;? _AfterAction &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  <span class="comment">// 动作之后执行</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Action&lt;Exception&gt;? _CatchExceptionAction &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;  <span class="comment">// 捕获异常之后执行</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">object</span>? Invoke(MethodInfo? targetMethod, <span class="built_in">object</span>?[]? <span class="keyword">args</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Exception exception = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        Before(<span class="keyword">args</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">object</span> result = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//调用实际目标对象的方法</span></span><br><span class="line">            result = targetMethod?.Invoke(decorated, <span class="keyword">args</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            exception = ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        After(<span class="keyword">args</span>, result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用完执行方法后的委托，如果有异常，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (exception != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            CatchException(exception);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 创建代理实例</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;decorated&quot;&gt;</span>代理的接口类型<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;beforeAction&quot;&gt;</span>方法执行前执行的事件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;afterAction&quot;&gt;</span>方法执行后执行的事件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;catchException&quot;&gt;</span>异常捕获后执行的事件<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Create</span>(<span class="params">T decorated, Action&lt;<span class="built_in">object</span>?[]?&gt; beforeAction, Action&lt;<span class="built_in">object</span>?[]?, <span class="built_in">object</span>&gt; afterAction, Action&lt;Exception&gt; catchException</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用DispatchProxy 的Create  创建一个新的T</span></span><br><span class="line">        <span class="built_in">object</span> proxy = Create&lt;T, DynamicProxy&lt;T&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        DynamicProxy&lt;T&gt; proxyDecorator = (DynamicProxy&lt;T&gt;)proxy;</span><br><span class="line"></span><br><span class="line">        proxyDecorator.decorated = decorated;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把自定义的方法委托给代理类</span></span><br><span class="line">        proxyDecorator._AfterAction = afterAction;</span><br><span class="line"></span><br><span class="line">        proxyDecorator._BeforeAction = beforeAction;</span><br><span class="line"></span><br><span class="line">        proxyDecorator._CatchExceptionAction = catchException;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (T)proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Before</span>(<span class="params"><span class="built_in">object</span>?[]? <span class="keyword">args</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            _BeforeAction.Invoke(<span class="keyword">args</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;执行之前异常：<span class="subst">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">After</span>(<span class="params"><span class="built_in">object</span>?[]? <span class="keyword">args</span>, <span class="built_in">object</span>? result</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            _AfterAction.Invoke(<span class="keyword">args</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;执行之后异常：<span class="subst">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CatchException</span>(<span class="params">Exception ex</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _CatchExceptionAction(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-创建拦截器属性"><a href="#2-创建拦截器属性" class="headerlink" title="2. 创建拦截器属性"></a>2. 创建拦截器属性</h3><p>标记AOP切点的<strong>Attribute–InterceptAttribut</strong>(拦截器属性)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 自定义拦截器特性</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Class)</span>]</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">InterceptAttribut</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Type Type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InterceptAttribut</span>(<span class="params">Type type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Type = type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建动态代理工厂类"><a href="#3-创建动态代理工厂类" class="headerlink" title="3. 创建动态代理工厂类"></a>3. 创建动态代理工厂类</h3><p>它是泛型工厂,用于创建不同类型的代理类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">DynamicProxyFactory</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 创建代理实例</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;decorated&quot;&gt;</span>代理的接口类型<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Create</span>&lt;<span class="title">T</span>&gt;()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> decorated = ServiceHelp.GetService&lt;T&gt;(<span class="keyword">typeof</span>(T));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> type = decorated.GetType();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> interceptAttribut = type.GetCustomAttribute&lt;InterceptAttribut&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> interceptor = ServiceHelp.GetService&lt;IInterceptor&gt;(interceptAttribut.Type);</span><br><span class="line">        <span class="comment">//创建代理类</span></span><br><span class="line">        <span class="keyword">var</span> proxy = <span class="keyword">new</span> DynamicProxy&lt;T&gt;().Create(decorated, interceptor.BeforeExecuted, interceptor.AfterExecuted, interceptor.CatchException);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-创建ServiceHelp"><a href="#4-创建ServiceHelp" class="headerlink" title="4. 创建ServiceHelp"></a>4. 创建ServiceHelp</h3><p>ServiceHelp用于获取实例,其核心就是以Autofac这个IOC容器去注册及获取服务.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">ServiceHelp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//实例化Autofac容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ContainerBuilder builder = <span class="keyword">new</span> ContainerBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IContainer? serviceProvider &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BuildServiceProvider</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//注册InstanceModule组件</span></span><br><span class="line">        builder.RegisterModule&lt;InstanceModule&gt;();</span><br><span class="line">        <span class="comment">//创建容器</span></span><br><span class="line">        serviceProvider = builder.Build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> T <span class="title">GetService</span>&lt;<span class="title">T</span>&gt;(<span class="params">Type serviceType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (serviceProvider.IsRegistered(serviceType))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (T)serviceProvider.Resolve(serviceType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-创建AOP切面"><a href="#5-创建AOP切面" class="headerlink" title="5. 创建AOP切面"></a>5. 创建AOP切面</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 自定义拦截器接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IInterceptor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 执行前</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;args&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BeforeExecuted</span>(<span class="params"><span class="built_in">object</span>?[]? <span class="keyword">args</span></span>)</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 执行后</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;args&quot;&gt;</span>参数<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;result&quot;&gt;</span>返回值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AfterExecuted</span>(<span class="params"><span class="built_in">object</span>?[]? <span class="keyword">args</span>, <span class="built_in">object</span>? result</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CatchException</span>(<span class="params">Exception ex</span>)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 方法执行的切面</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ExecutAOP</span> : <span class="title">IInterceptor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AfterExecuted</span>(<span class="params"><span class="built_in">object</span>?[]? <span class="keyword">args</span>, <span class="built_in">object</span>? result</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;拦截器中方法后执行~~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BeforeExecuted</span>(<span class="params"><span class="built_in">object</span>?[]? <span class="keyword">args</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">args</span> != <span class="literal">null</span> &amp;&amp; <span class="keyword">args</span>.Length &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">args</span>[<span class="number">0</span>] == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;参数错误&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;拦截器中方法前执行~~~~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CatchException</span>(<span class="params">Exception ex</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;拦截器中捕获到了异常~~~~\r\n<span class="subst">&#123;ex.InnerException.Message&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-创建测试模型"><a href="#6-创建测试模型" class="headerlink" title="6. 创建测试模型"></a>6. 创建测试模型</h3><p>设定一个业务场景,有一个交通工具<code>ITransportation</code>有两个公共方法 <code>Run()</code> 、<code>Eat()</code>,以及其实现<code>Hours</code>类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">ITransportation</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span>(<span class="params"><span class="built_in">string</span> food</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">InterceptAttribut(typeof(ExecutAOP))</span>]</span><br><span class="line"><span class="keyword">class</span> <span class="title">Horse</span> : <span class="title">ITransportation</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Eat</span>(<span class="params"><span class="built_in">string</span> food</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;小马儿吃了<span class="subst">&#123;food&#125;</span>~~~~~~~~~~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;马儿马儿快马加鞭~~~~~~~~~~~~&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;小马儿掉沟里了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-测试场景"><a href="#7-测试场景" class="headerlink" title="7.测试场景"></a>7.测试场景</h3><ol><li>测试切面方法执行前和执行后</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ServiceHelp.BuildServiceProvider();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hours = DynamicProxyFactory.Create&lt;ITransportation&gt;();</span><br><span class="line"></span><br><span class="line">    hours.Eat(<span class="string">&quot;新鲜牧草&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/bcace5bd480606ac5fb97bc4b7c3bb7e.image.png" alt="image.png"></p><p>从控制台输出可以看到，<code>Horse</code>再执行<code>Eat</code>方法前和方法后都被拦截，并输出了预期结果</p><ol start="2"><li>测试切面方法异常处理</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ServiceHelp.BuildServiceProvider();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> hours = DynamicProxyFactory.Create&lt;ITransportation&gt;();</span><br><span class="line"></span><br><span class="line">    hours.Run();</span><br><span class="line"></span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><p><img src="https://filebed.fantasyke.cn/file/blogContent/date/20250227/4c115bd6a04fd809bc1148e2eace0ee1.image.png" alt="image.png"><br>再<code>Horse</code>的<code>Run</code>方法中我们主动抛出了异常，然后从控制台输出可以看到，异常也被拦截器拦截，并做了处理输出<code>拦截器中捕获到了异常</code>及异常信息。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之，AOP编程思想是一种非常有用的编程范式，它可以使得程序的结构更加清晰、易于维护和扩展，同时也可以提高程序的重用性和可测试性。在日常的软件开发中，我们可以使用AOP框架来实现AOP编程思想，从而提高开发效率和代码质量。</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOC --- 控制反转</title>
      <link href="/posts/18463.html"/>
      <url>/posts/18463.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>IOC，全称为 Inversion of Control（控制反转），是一种重要的编程思想，它可以帮助我们更好地管理程序中的依赖关系。在IOC的基础上，依赖注入（Dependency Injection，DI）是一种实现IOC的技术手段，它可以提高代码<strong>可测试性</strong>，<strong>可维护性</strong>，<strong>可拓展性</strong>。</p><span id="more"></span><h2 id="什么是IOC？"><a href="#什么是IOC？" class="headerlink" title="什么是IOC？"></a>什么是IOC？</h2><p>在传统的程序设计中，我们通常会使用直接依赖的方式来实现功能，这意味着我们需要自己创建并管理对象之间的依赖关系。这种方式有一个很明显的缺点，就是代码之间的耦合度非常高，一旦某个类发生了改变，所有依赖于它的类都需要修改。</p><p>而IOC则是一种反转控制的方式，它将对象的创建、依赖管理等控制权从程序员手中转移到了容器中，容器会根据配置信息来自动创建对象、管理依赖关系。这样做的好处在于，我们只需要关注自己的业务逻辑，而不需要关心对象的创建、销毁等底层细节</p><h2 id="什么是依赖注入？"><a href="#什么是依赖注入？" class="headerlink" title="什么是依赖注入？"></a>什么是依赖注入？</h2><p>依赖注入是实现IOC的一种方式，它是指将对象所需要的依赖关系通过构造函数、属性、方法等方式传递给对象。通常情况下，我们会使用<strong>构造函数注入</strong>、<strong>Setter方法注入</strong>、<strong>接口注入</strong>等方式来实现依赖注入。</p><p>以构造函数注入为例，我们可以将对象所需要的依赖关系通过构造函数的参数传递进来，这样做的好处在于，我们可以在对象创建的时候就确定它所依赖的对象，从而避免了后续修改依赖关系的麻烦。</p><h2 id="直接依赖可能存在的问题"><a href="#直接依赖可能存在的问题" class="headerlink" title="直接依赖可能存在的问题"></a>直接依赖可能存在的问题</h2><h3 id="1-高度耦合"><a href="#1-高度耦合" class="headerlink" title="1. 高度耦合"></a>1. 高度耦合</h3><p>在应用程序中使用紧密耦合的代码会导致代码难以维护和扩展。当一个组件的代码更改时，需要更改其他依赖于该组件的组件的代码。这种高度耦合的代码可能难以单元测试，因为测试需要创建所有依赖项的实例，这可能会使测试变得复杂</p><h3 id="2-硬编码依赖项"><a href="#2-硬编码依赖项" class="headerlink" title="2. 硬编码依赖项"></a>2. 硬编码依赖项</h3><p>如果应用程序使用硬编码依赖项，即在代码中直接实例化依赖项，那么应用程序的可测试性将受到影响。这是因为在测试时，不可能轻松地用模拟对象或者桩来替换硬编码的依赖项，这样可能会使测试变得非常困难</p><h3 id="3-依赖项管理困难"><a href="#3-依赖项管理困难" class="headerlink" title="3. 依赖项管理困难"></a>3. 依赖项管理困难</h3><p>如果没有使用IOC容器，那么将需要手动管理依赖项的生命周期，包括创建、初始化和销毁。这可能会使代码更加复杂，容易出错，也会导致代码可维护性的下降。</p><h3 id="4-缺乏灵活性"><a href="#4-缺乏灵活性" class="headerlink" title="4. 缺乏灵活性"></a>4. 缺乏灵活性</h3><p>没有使用IOC，可能会导致应用程序的灵活性下降。因为依赖项在代码中硬编码，所以更改依赖项需要更改代码。而使用IOC，只需要更改配置即可更改依赖项，从而提高了应用程序的灵活性</p><h3 id="5-代码重复"><a href="#5-代码重复" class="headerlink" title="5. 代码重复"></a>5. 代码重复</h3><p>如果没有使用IOC，那么可能会在应用程序中出现大量的重复代码。因为每个组件都需要手动实例化它们的依赖项，这可能导致重复的代码。而使用IOC，可以将依赖项的创建和管理交给IOC容器，从而避免代码重复</p><h2 id="依赖注入的实现方式"><a href="#依赖注入的实现方式" class="headerlink" title="依赖注入的实现方式"></a>依赖注入的实现方式</h2><p>依赖注入的实现方式有很多种，常见的有构造函数注入、Setter方法注入、接口注入等。</p><h3 id="1-构造函数注入"><a href="#1-构造函数注入" class="headerlink" title="1. 构造函数注入"></a>1. 构造函数注入</h3><p>构造函数注入是最常见的依赖注入方式，它可以将对象所需要的依赖关系通过构造函数的参数传递进来。这种方式的好处在于，可以在对象创建的时候就确定它所依赖的对象，从而避免了后续修改依赖关系的麻烦。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger _logger;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IEmailService _emailService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span>(<span class="params">ILogger logger, IEmailService emailService</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">        _emailService = emailService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 业务逻辑代码</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        _logger.Log(<span class="string">&quot;DoSomething has been executed&quot;</span>);</span><br><span class="line">        _emailService.SendEmail(<span class="string">&quot;someone@example.com&quot;</span>, <span class="string">&quot;DoSomething has been executed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Setter方法注入"><a href="#2-Setter方法注入" class="headerlink" title="2. Setter方法注入"></a>2. Setter方法注入</h3><p>Setter方法注入是另一种常见的依赖注入方式，它可以将对象所需要的依赖关系通过Setter方法进行注入。这种方式的好处在于，可以将对象的依赖关系动态地进行修改，从而更加灵活地管理依赖关系。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ILogger _logger;</span><br><span class="line">    <span class="keyword">private</span> IEmailService _emailService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetLogger</span>(<span class="params">ILogger logger</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetEmailService</span>(<span class="params">IEmailService emailService</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _emailService = emailService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 业务逻辑代码</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        _logger.Log(<span class="string">&quot;DoSomething has been executed&quot;</span>);</span><br><span class="line">        _emailService.SendEmail(<span class="string">&quot;someone@example.com&quot;</span>, <span class="string">&quot;DoSomething has been executed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-接口注入"><a href="#3-接口注入" class="headerlink" title="3. 接口注入"></a>3. 接口注入</h3><p>接口注入是一种比较高级的依赖注入方式，它可以将对象所需要的依赖关系通过接口进行注入。这种方式的好处在于，可以通过接口来进行依赖管理，从而更加灵活地实现对象之间的交互。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ILogger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Log</span>(<span class="params"><span class="built_in">string</span> message</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEmailService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SendEmail</span>(<span class="params"><span class="built_in">string</span> toAddress, <span class="built_in">string</span> message</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyService</span> : <span class="title">IServiceDependency</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger _logger;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IEmailService _emailService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span>(<span class="params">IServiceProvider serviceProvider</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _logger = serviceProvider.GetService&lt;ILogger&gt;();</span><br><span class="line">        _emailService = serviceProvider.GetService&lt;IEmailService&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomething</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 业务逻辑代码</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        _logger.Log(<span class="string">&quot;DoSomething has been executed&quot;</span>);</span><br><span class="line">        _emailService.SendEmail(<span class="string">&quot;someone@example.com&quot;</span>, <span class="string">&quot;DoSomething has been executed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IServiceDependency</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ServiceCollectionExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceCollection <span class="title">AddMyServices</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        services.AddSingleton&lt;ILogger, ConsoleLogger&gt;();</span><br><span class="line">        services.AddSingleton&lt;IEmailService, SmtpEmailService&gt;();</span><br><span class="line">        services.AddSingleton&lt;IServiceDependency&gt;(serviceProvider =&gt; <span class="keyword">new</span> MyService(serviceProvider));</span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] <span class="keyword">args</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> services = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line">        services.AddMyServices();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> serviceProvider = services.BuildServiceProvider())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> myService = serviceProvider.GetService&lt;IServiceDependency&gt;();</span><br><span class="line">            myService.DoSomething();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>依赖注入是一种实现IOC的技术手段，它可以帮助我们更好地管理程序中的依赖关系，降低代码耦合度，提高代码复用性和可测试性。当我们掌握了依赖注入的技术，就可以更加轻松地编写高质量、可维护的代码。</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八的砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程思想 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
